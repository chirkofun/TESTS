
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f000 fec7 	bl	200fb0 <__core_init>
  200222:	f001 fc3d 	bl	201aa0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f000 fe61 	bl	200f30 <__init_ram_areas>
  20026e:	f000 fe97 	bl	200fa0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 ffd5 	bl	201230 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f000 be7b 	b.w	200f90 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08002230 	.word	0x08002230
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000ac4 	.word	0x20000ac4
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f000 fdee 	bl	200ed0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 fb14 	bl	200920 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  200300:	b480      	push	{r7}
  200302:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200304:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  200308:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20030a:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20030e:	2300      	movs	r3, #0
  200310:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  200314:	46bd      	mov	sp, r7
  200316:	bc80      	pop	{r7}
  200318:	4770      	bx	lr
  20031a:	bf00      	nop
  20031c:	0000      	movs	r0, r0
	...

00200320 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200320:	b470      	push	{r4, r5, r6}
  200322:	2320      	movs	r3, #32
  200324:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200328:	4e0d      	ldr	r6, [pc, #52]	; (200360 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20032a:	1e4a      	subs	r2, r1, #1
  20032c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20032e:	4c0d      	ldr	r4, [pc, #52]	; (200364 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200330:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200332:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200334:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200336:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200338:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20033a:	1858      	adds	r0, r3, r1
  20033c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20033e:	1a23      	subs	r3, r4, r0
  200340:	429a      	cmp	r2, r3
  200342:	d806      	bhi.n	200352 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200344:	4402      	add	r2, r0
  200346:	2300      	movs	r3, #0
  200348:	6032      	str	r2, [r6, #0]
  20034a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20034e:	bc70      	pop	{r4, r5, r6}
  200350:	4770      	bx	lr
    return NULL;
  200352:	2000      	movs	r0, #0
  200354:	2300      	movs	r3, #0
  200356:	f383 8811 	msr	BASEPRI, r3
}
  20035a:	bc70      	pop	{r4, r5, r6}
  20035c:	4770      	bx	lr
  20035e:	bf00      	nop
  200360:	20000a38 	.word	0x20000a38
  200364:	20000a34 	.word	0x20000a34
	...

00200370 <wakeup>:
  200370:	2320      	movs	r3, #32
  200372:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
  200376:	f890 3020 	ldrb.w	r3, [r0, #32]
  20037a:	2b07      	cmp	r3, #7
  20037c:	d80e      	bhi.n	20039c <wakeup+0x2c>
  20037e:	e8df f003 	tbb	[pc, r3]
  200382:	0d28      	.short	0x0d28
  200384:	0408240d 	.word	0x0408240d
  200388:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  20038a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20038c:	6893      	ldr	r3, [r2, #8]
  20038e:	3301      	adds	r3, #1
  200390:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200392:	e890 000c 	ldmia.w	r0, {r2, r3}
  200396:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200398:	6802      	ldr	r2, [r0, #0]
  20039a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20039c:	2200      	movs	r2, #0
  20039e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  2003a0:	4b0e      	ldr	r3, [pc, #56]	; (2003dc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  2003a2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  2003a6:	b410      	push	{r4}
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  2003a8:	f04f 34ff 	mov.w	r4, #4294967295
  2003ac:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  2003ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2003b0:	689a      	ldr	r2, [r3, #8]
  2003b2:	428a      	cmp	r2, r1
  2003b4:	d2fb      	bcs.n	2003ae <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  2003b6:	685a      	ldr	r2, [r3, #4]
  2003b8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  2003ba:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  2003bc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  2003be:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2003c0:	6058      	str	r0, [r3, #4]
  2003c2:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
  2003c6:	bc10      	pop	{r4}
  2003c8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2003ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2003cc:	2200      	movs	r2, #0
  2003ce:	601a      	str	r2, [r3, #0]
  2003d0:	e7e4      	b.n	20039c <wakeup+0x2c>
  2003d2:	2300      	movs	r3, #0
  2003d4:	f383 8811 	msr	BASEPRI, r3
  2003d8:	4770      	bx	lr
  2003da:	bf00      	nop
  2003dc:	20000844 	.word	0x20000844

002003e0 <_idle_thread.lto_priv.46>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  2003e0:	e7fe      	b.n	2003e0 <_idle_thread.lto_priv.46>
  2003e2:	bf00      	nop
	...

002003f0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2003f0:	4b08      	ldr	r3, [pc, #32]	; (200414 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2003f2:	681a      	ldr	r2, [r3, #0]
  2003f4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2003f6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2003f8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2003fc:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2003fe:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200400:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200402:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200404:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200406:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20040a:	619a      	str	r2, [r3, #24]
}
  20040c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  20040e:	f7ff bf61 	b.w	2002d4 <_port_switch>
  200412:	bf00      	nop
  200414:	20000844 	.word	0x20000844
	...

00200420 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  200420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200424:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  200428:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  20042c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  200430:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200434:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200436:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  200438:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  20043c:	f04f 0a0f 	mov.w	sl, #15
  200440:	e00e      	b.n	200460 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200442:	6a03      	ldr	r3, [r0, #32]
  200444:	ea23 0404 	bic.w	r4, r3, r4
  200448:	4325      	orrs	r5, r4
  20044a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20044c:	0849      	lsrs	r1, r1, #1
  20044e:	d047      	beq.n	2004e0 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  200450:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  200454:	3601      	adds	r6, #1
    ospeedr <<= 2;
  200456:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  20045a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  20045e:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  200460:	07cb      	lsls	r3, r1, #31
  200462:	d5f3      	bpl.n	20044c <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  200464:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200466:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  200468:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  20046c:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  200470:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  200474:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  200478:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20047c:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  200480:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200484:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  200488:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  20048c:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  200490:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200494:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  200498:	ea6f 0303 	mvn.w	r3, r3
  20049c:	f8d0 b008 	ldr.w	fp, [r0, #8]
  2004a0:	ea0b 0b03 	and.w	fp, fp, r3
  2004a4:	ea4b 0b0c 	orr.w	fp, fp, ip
  2004a8:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2004ac:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  2004b0:	ea03 0b0b 	and.w	fp, r3, fp
  2004b4:	ea4b 0b0e 	orr.w	fp, fp, lr
  2004b8:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2004bc:	d012      	beq.n	2004e4 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  2004be:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  2004c2:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  2004c4:	ea03 030b 	and.w	r3, r3, fp
  2004c8:	ea43 0307 	orr.w	r3, r3, r7
  2004cc:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  2004ce:	d9b8      	bls.n	200442 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2004d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  2004d2:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2004d4:	ea23 0404 	bic.w	r4, r3, r4
  2004d8:	ea45 0504 	orr.w	r5, r5, r4
  2004dc:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  2004de:	d1b7      	bne.n	200450 <_pal_lld_setgroupmode+0x30>
  2004e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  2004e4:	2e07      	cmp	r6, #7
  2004e6:	d80a      	bhi.n	2004fe <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2004e8:	f8d0 b020 	ldr.w	fp, [r0, #32]
  2004ec:	ea2b 0404 	bic.w	r4, fp, r4
  2004f0:	4325      	orrs	r5, r4
  2004f2:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  2004f4:	6804      	ldr	r4, [r0, #0]
  2004f6:	4023      	ands	r3, r4
  2004f8:	433b      	orrs	r3, r7
  2004fa:	6003      	str	r3, [r0, #0]
  2004fc:	e7a6      	b.n	20044c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2004fe:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  200502:	ea2b 0404 	bic.w	r4, fp, r4
  200506:	4325      	orrs	r5, r4
  200508:	6245      	str	r5, [r0, #36]	; 0x24
  20050a:	e7f3      	b.n	2004f4 <_pal_lld_setgroupmode+0xd4>
  20050c:	0000      	movs	r0, r0
	...

00200510 <_port_irq_epilogue>:
  200510:	2320      	movs	r3, #32
  200512:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200516:	4b11      	ldr	r3, [pc, #68]	; (20055c <_port_irq_epilogue+0x4c>)
  200518:	685b      	ldr	r3, [r3, #4]
  20051a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20051e:	d102      	bne.n	200526 <_port_irq_epilogue+0x16>
  200520:	f383 8811 	msr	BASEPRI, r3
  200524:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200526:	b480      	push	{r7}
  200528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20052a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20052e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200532:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200536:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20053a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20053e:	4a08      	ldr	r2, [pc, #32]	; (200560 <_port_irq_epilogue+0x50>)
  200540:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200542:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200544:	6889      	ldr	r1, [r1, #8]
  200546:	6892      	ldr	r2, [r2, #8]
  200548:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20054a:	bf8c      	ite	hi
  20054c:	4a05      	ldrhi	r2, [pc, #20]	; (200564 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20054e:	4a06      	ldrls	r2, [pc, #24]	; (200568 <_port_irq_epilogue+0x58>)
  200550:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  200554:	46bd      	mov	sp, r7
  200556:	bc80      	pop	{r7}
  200558:	4770      	bx	lr
  20055a:	bf00      	nop
  20055c:	e000ed00 	.word	0xe000ed00
  200560:	20000844 	.word	0x20000844
  200564:	002002f5 	.word	0x002002f5
  200568:	002002f8 	.word	0x002002f8
  20056c:	00000000 	.word	0x00000000

00200570 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200572:	2720      	movs	r7, #32
  200574:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200578:	4d12      	ldr	r5, [pc, #72]	; (2005c4 <SysTick_Handler+0x54>)
  20057a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20057c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20057e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200580:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200584:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200586:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200588:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20058a:	d013      	beq.n	2005b4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20058c:	891c      	ldrh	r4, [r3, #8]
  20058e:	3c01      	subs	r4, #1
  200590:	b2a4      	uxth	r4, r4
  200592:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200594:	b974      	cbnz	r4, 2005b4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200596:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200598:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20059a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20059c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20059e:	61ea      	str	r2, [r5, #28]
  2005a0:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  2005a4:	6918      	ldr	r0, [r3, #16]
  2005a6:	4788      	blx	r1
  2005a8:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  2005ac:	69eb      	ldr	r3, [r5, #28]
  2005ae:	891a      	ldrh	r2, [r3, #8]
  2005b0:	2a00      	cmp	r2, #0
  2005b2:	d0f0      	beq.n	200596 <SysTick_Handler+0x26>
  2005b4:	2300      	movs	r3, #0
  2005b6:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  2005ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2005be:	f7ff bfa7 	b.w	200510 <_port_irq_epilogue>
  2005c2:	bf00      	nop
  2005c4:	20000844 	.word	0x20000844
	...

002005d0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2005d0:	4b08      	ldr	r3, [pc, #32]	; (2005f4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  2005d2:	4809      	ldr	r0, [pc, #36]	; (2005f8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2005d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  2005d6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2005d8:	0d89      	lsrs	r1, r1, #22
  2005da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  2005de:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  2005e0:	058c      	lsls	r4, r1, #22
  2005e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  2005e4:	b10a      	cbz	r2, 2005ea <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  2005e6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  2005e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  2005ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2005ee:	f7ff bf8f 	b.w	200510 <_port_irq_epilogue>
  2005f2:	bf00      	nop
  2005f4:	40026400 	.word	0x40026400
  2005f8:	200009b0 	.word	0x200009b0
  2005fc:	00000000 	.word	0x00000000

00200600 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200600:	4b08      	ldr	r3, [pc, #32]	; (200624 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  200602:	4809      	ldr	r0, [pc, #36]	; (200628 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200604:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  200606:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200608:	0c09      	lsrs	r1, r1, #16
  20060a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20060e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  200610:	040c      	lsls	r4, r1, #16
  200612:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  200614:	b10a      	cbz	r2, 20061a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  200616:	6f40      	ldr	r0, [r0, #116]	; 0x74
  200618:	4790      	blx	r2
}
  20061a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20061e:	f7ff bf77 	b.w	200510 <_port_irq_epilogue>
  200622:	bf00      	nop
  200624:	40026400 	.word	0x40026400
  200628:	200009b0 	.word	0x200009b0
  20062c:	00000000 	.word	0x00000000

00200630 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200630:	4b08      	ldr	r3, [pc, #32]	; (200654 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  200632:	4809      	ldr	r0, [pc, #36]	; (200658 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200634:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  200636:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200638:	0989      	lsrs	r1, r1, #6
  20063a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20063e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  200640:	018c      	lsls	r4, r1, #6
  200642:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  200644:	b10a      	cbz	r2, 20064a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  200646:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  200648:	4790      	blx	r2
}
  20064a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20064e:	f7ff bf5f 	b.w	200510 <_port_irq_epilogue>
  200652:	bf00      	nop
  200654:	40026400 	.word	0x40026400
  200658:	200009b0 	.word	0x200009b0
  20065c:	00000000 	.word	0x00000000

00200660 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  200660:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200662:	4b07      	ldr	r3, [pc, #28]	; (200680 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  200664:	4807      	ldr	r0, [pc, #28]	; (200684 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200666:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  200668:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20066a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  20066e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  200670:	b10a      	cbz	r2, 200676 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  200672:	6e40      	ldr	r0, [r0, #100]	; 0x64
  200674:	4790      	blx	r2
}
  200676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20067a:	f7ff bf49 	b.w	200510 <_port_irq_epilogue>
  20067e:	bf00      	nop
  200680:	40026400 	.word	0x40026400
  200684:	200009b0 	.word	0x200009b0
	...

00200690 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200690:	4b08      	ldr	r3, [pc, #32]	; (2006b4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  200692:	4809      	ldr	r0, [pc, #36]	; (2006b8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200694:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  200696:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200698:	0d89      	lsrs	r1, r1, #22
  20069a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  20069e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  2006a0:	058c      	lsls	r4, r1, #22
  2006a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  2006a4:	b10a      	cbz	r2, 2006aa <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  2006a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  2006a8:	4790      	blx	r2
}
  2006aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2006ae:	f7ff bf2f 	b.w	200510 <_port_irq_epilogue>
  2006b2:	bf00      	nop
  2006b4:	40026400 	.word	0x40026400
  2006b8:	200009b0 	.word	0x200009b0
  2006bc:	00000000 	.word	0x00000000

002006c0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2006c0:	4b08      	ldr	r3, [pc, #32]	; (2006e4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  2006c2:	4809      	ldr	r0, [pc, #36]	; (2006e8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2006c4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  2006c6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2006c8:	0c09      	lsrs	r1, r1, #16
  2006ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  2006ce:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  2006d0:	040c      	lsls	r4, r1, #16
  2006d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  2006d4:	b10a      	cbz	r2, 2006da <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  2006d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  2006d8:	4790      	blx	r2
}
  2006da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2006de:	f7ff bf17 	b.w	200510 <_port_irq_epilogue>
  2006e2:	bf00      	nop
  2006e4:	40026400 	.word	0x40026400
  2006e8:	200009b0 	.word	0x200009b0
  2006ec:	00000000 	.word	0x00000000

002006f0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2006f0:	4b08      	ldr	r3, [pc, #32]	; (200714 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  2006f2:	4809      	ldr	r0, [pc, #36]	; (200718 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2006f4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  2006f6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2006f8:	0989      	lsrs	r1, r1, #6
  2006fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  2006fe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  200700:	018c      	lsls	r4, r1, #6
  200702:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  200704:	b10a      	cbz	r2, 20070a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  200706:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  200708:	4790      	blx	r2
}
  20070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20070e:	f7ff beff 	b.w	200510 <_port_irq_epilogue>
  200712:	bf00      	nop
  200714:	40026400 	.word	0x40026400
  200718:	200009b0 	.word	0x200009b0
  20071c:	00000000 	.word	0x00000000

00200720 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  200720:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200722:	4b07      	ldr	r3, [pc, #28]	; (200740 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  200724:	4807      	ldr	r0, [pc, #28]	; (200744 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200726:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  200728:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20072a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20072e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  200730:	b10a      	cbz	r2, 200736 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  200732:	6c40      	ldr	r0, [r0, #68]	; 0x44
  200734:	4790      	blx	r2
}
  200736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20073a:	f7ff bee9 	b.w	200510 <_port_irq_epilogue>
  20073e:	bf00      	nop
  200740:	40026400 	.word	0x40026400
  200744:	200009b0 	.word	0x200009b0
	...

00200750 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200750:	4b08      	ldr	r3, [pc, #32]	; (200774 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  200752:	4809      	ldr	r0, [pc, #36]	; (200778 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200754:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  200756:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200758:	0d89      	lsrs	r1, r1, #22
  20075a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20075e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  200760:	058c      	lsls	r4, r1, #22
  200762:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  200764:	b10a      	cbz	r2, 20076a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  200766:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  200768:	4790      	blx	r2
}
  20076a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20076e:	f7ff becf 	b.w	200510 <_port_irq_epilogue>
  200772:	bf00      	nop
  200774:	40026000 	.word	0x40026000
  200778:	200009b0 	.word	0x200009b0
  20077c:	00000000 	.word	0x00000000

00200780 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200780:	4b08      	ldr	r3, [pc, #32]	; (2007a4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  200782:	4809      	ldr	r0, [pc, #36]	; (2007a8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200784:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  200786:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200788:	0c09      	lsrs	r1, r1, #16
  20078a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  20078e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  200790:	040c      	lsls	r4, r1, #16
  200792:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  200794:	b10a      	cbz	r2, 20079a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  200796:	6b40      	ldr	r0, [r0, #52]	; 0x34
  200798:	4790      	blx	r2
}
  20079a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20079e:	f7ff beb7 	b.w	200510 <_port_irq_epilogue>
  2007a2:	bf00      	nop
  2007a4:	40026000 	.word	0x40026000
  2007a8:	200009b0 	.word	0x200009b0
  2007ac:	00000000 	.word	0x00000000

002007b0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2007b0:	4b08      	ldr	r3, [pc, #32]	; (2007d4 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2007b2:	4809      	ldr	r0, [pc, #36]	; (2007d8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2007b4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2007b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2007b8:	0989      	lsrs	r1, r1, #6
  2007ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2007be:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  2007c0:	018c      	lsls	r4, r1, #6
  2007c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  2007c4:	b10a      	cbz	r2, 2007ca <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  2007c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2007c8:	4790      	blx	r2
}
  2007ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2007ce:	f7ff be9f 	b.w	200510 <_port_irq_epilogue>
  2007d2:	bf00      	nop
  2007d4:	40026000 	.word	0x40026000
  2007d8:	200009b0 	.word	0x200009b0
  2007dc:	00000000 	.word	0x00000000

002007e0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  2007e0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2007e2:	4b07      	ldr	r3, [pc, #28]	; (200800 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  2007e4:	4807      	ldr	r0, [pc, #28]	; (200804 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2007e6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  2007e8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2007ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  2007ee:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  2007f0:	b10a      	cbz	r2, 2007f6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  2007f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  2007f4:	4790      	blx	r2
}
  2007f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2007fa:	f7ff be89 	b.w	200510 <_port_irq_epilogue>
  2007fe:	bf00      	nop
  200800:	40026000 	.word	0x40026000
  200804:	200009b0 	.word	0x200009b0
	...

00200810 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200810:	4b08      	ldr	r3, [pc, #32]	; (200834 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  200812:	4809      	ldr	r0, [pc, #36]	; (200838 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200814:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  200816:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200818:	0d89      	lsrs	r1, r1, #22
  20081a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  20081e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  200820:	058c      	lsls	r4, r1, #22
  200822:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  200824:	b10a      	cbz	r2, 20082a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  200826:	69c0      	ldr	r0, [r0, #28]
  200828:	4790      	blx	r2
}
  20082a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20082e:	f7ff be6f 	b.w	200510 <_port_irq_epilogue>
  200832:	bf00      	nop
  200834:	40026000 	.word	0x40026000
  200838:	200009b0 	.word	0x200009b0
  20083c:	00000000 	.word	0x00000000

00200840 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200840:	4b08      	ldr	r3, [pc, #32]	; (200864 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  200842:	4809      	ldr	r0, [pc, #36]	; (200868 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200844:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  200846:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200848:	0c09      	lsrs	r1, r1, #16
  20084a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20084e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  200850:	040c      	lsls	r4, r1, #16
  200852:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  200854:	b10a      	cbz	r2, 20085a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  200856:	6940      	ldr	r0, [r0, #20]
  200858:	4790      	blx	r2
}
  20085a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20085e:	f7ff be57 	b.w	200510 <_port_irq_epilogue>
  200862:	bf00      	nop
  200864:	40026000 	.word	0x40026000
  200868:	200009b0 	.word	0x200009b0
  20086c:	00000000 	.word	0x00000000

00200870 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200870:	4b08      	ldr	r3, [pc, #32]	; (200894 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  200872:	4809      	ldr	r0, [pc, #36]	; (200898 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200874:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  200876:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200878:	0989      	lsrs	r1, r1, #6
  20087a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20087e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  200880:	018c      	lsls	r4, r1, #6
  200882:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  200884:	b10a      	cbz	r2, 20088a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  200886:	68c0      	ldr	r0, [r0, #12]
  200888:	4790      	blx	r2
}
  20088a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20088e:	f7ff be3f 	b.w	200510 <_port_irq_epilogue>
  200892:	bf00      	nop
  200894:	40026000 	.word	0x40026000
  200898:	200009b0 	.word	0x200009b0
  20089c:	00000000 	.word	0x00000000

002008a0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2008a0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2008a2:	4b07      	ldr	r3, [pc, #28]	; (2008c0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  2008a4:	4a07      	ldr	r2, [pc, #28]	; (2008c4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2008a6:	6819      	ldr	r1, [r3, #0]
  2008a8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  2008ac:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  2008ae:	6813      	ldr	r3, [r2, #0]
  2008b0:	b10b      	cbz	r3, 2008b6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  2008b2:	6850      	ldr	r0, [r2, #4]
  2008b4:	4798      	blx	r3
}
  2008b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2008ba:	f7ff be29 	b.w	200510 <_port_irq_epilogue>
  2008be:	bf00      	nop
  2008c0:	40026000 	.word	0x40026000
  2008c4:	200009b0 	.word	0x200009b0
	...

002008d0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  2008d0:	4b0e      	ldr	r3, [pc, #56]	; (20090c <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  2008d2:	6882      	ldr	r2, [r0, #8]
  2008d4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2008d6:	490e      	ldr	r1, [pc, #56]	; (200910 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  2008d8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  2008da:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  2008dc:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2008de:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2008e0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2008e2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2008e4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2008e6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2008e8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2008ea:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2008ee:	18e4      	adds	r4, r4, r3
  2008f0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2008f4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2008f6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2008f8:	bf88      	it	hi
  2008fa:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2008fc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2008fe:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  200902:	bf38      	it	cc
  200904:	6003      	strcc	r3, [r0, #0]
}
  200906:	bc30      	pop	{r4, r5}
  200908:	4770      	bx	lr
  20090a:	bf00      	nop
  20090c:	e0001000 	.word	0xe0001000
  200910:	20000844 	.word	0x20000844
	...

00200920 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  200920:	4a0e      	ldr	r2, [pc, #56]	; (20095c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  200922:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  200924:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  200926:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  200928:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  20092a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  20092c:	6994      	ldr	r4, [r2, #24]
  20092e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  200930:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  200932:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  200936:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20093a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20093c:	6190      	str	r0, [r2, #24]
  20093e:	e000      	b.n	200942 <chSchDoReschedule+0x22>
  200940:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  200942:	689a      	ldr	r2, [r3, #8]
  200944:	4291      	cmp	r1, r2
  200946:	d3fb      	bcc.n	200940 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  200948:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20094a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20094c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20094e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200950:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200952:	605c      	str	r4, [r3, #4]
}
  200954:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200956:	f7ff bcbd 	b.w	2002d4 <_port_switch>
  20095a:	bf00      	nop
  20095c:	20000844 	.word	0x20000844

00200960 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  200960:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200964:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  200966:	b5f0      	push	{r4, r5, r6, r7, lr}
  200968:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20096a:	d031      	beq.n	2009d0 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20096c:	4c1c      	ldr	r4, [pc, #112]	; (2009e0 <chSchGoSleepTimeoutS+0x80>)
  20096e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  200970:	481c      	ldr	r0, [pc, #112]	; (2009e4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  200972:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  200974:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  200976:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  200978:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20097a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20097c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20097e:	d905      	bls.n	20098c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  200980:	1a89      	subs	r1, r1, r2
    p = p->next;
  200982:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  200984:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  200986:	891a      	ldrh	r2, [r3, #8]
  200988:	428a      	cmp	r2, r1
  20098a:	d3f9      	bcc.n	200980 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20098c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20098e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  200990:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  200992:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  200996:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  200998:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20099a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20099c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20099e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  2009a2:	891a      	ldrh	r2, [r3, #8]
  2009a4:	1a51      	subs	r1, r2, r1
  2009a6:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  2009a8:	84a6      	strh	r6, [r4, #36]	; 0x24
  2009aa:	f7ff fd21 	bl	2003f0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  2009ae:	9b04      	ldr	r3, [sp, #16]
  2009b0:	b153      	cbz	r3, 2009c8 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  2009b2:	9b01      	ldr	r3, [sp, #4]
  2009b4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  2009b8:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  2009ba:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  2009bc:	4402      	add	r2, r0
  2009be:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  2009c0:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  2009c2:	9b01      	ldr	r3, [sp, #4]
  2009c4:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  2009c6:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  2009c8:	69a3      	ldr	r3, [r4, #24]
}
  2009ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2009cc:	b007      	add	sp, #28
  2009ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2009d0:	4c03      	ldr	r4, [pc, #12]	; (2009e0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  2009d2:	f7ff fd0d 	bl	2003f0 <chSchGoSleepS>
  return currp->u.rdymsg;
  2009d6:	69a3      	ldr	r3, [r4, #24]
}
  2009d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2009da:	b007      	add	sp, #28
  2009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2009de:	bf00      	nop
  2009e0:	20000844 	.word	0x20000844
  2009e4:	00200371 	.word	0x00200371
	...

002009f0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
  2009f0:	b161      	cbz	r1, 200a0c <chThdEnqueueTimeoutS+0x1c>
  2009f2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  2009f4:	4b07      	ldr	r3, [pc, #28]	; (200a14 <chThdEnqueueTimeoutS+0x24>)

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2009f6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  2009f8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  2009fa:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  2009fc:	6854      	ldr	r4, [r2, #4]
  2009fe:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  200a02:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  200a04:	6053      	str	r3, [r2, #4]
}
  200a06:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  200a08:	f7ff bfaa 	b.w	200960 <chSchGoSleepTimeoutS>
}
  200a0c:	f04f 30ff 	mov.w	r0, #4294967295
  200a10:	4770      	bx	lr
  200a12:	bf00      	nop
  200a14:	20000844 	.word	0x20000844
	...

00200a20 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  200a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200a24:	4699      	mov	r9, r3
  200a26:	b083      	sub	sp, #12
  200a28:	4604      	mov	r4, r0
  200a2a:	460e      	mov	r6, r1
  200a2c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  200a2e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200a32:	2320      	movs	r3, #32
  200a34:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  200a38:	4b26      	ldr	r3, [pc, #152]	; (200ad4 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200a3a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  200a3e:	2700      	movs	r7, #0
  200a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200a42:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  200a46:	fa19 f383 	uxtah	r3, r9, r3
  200a4a:	b29b      	uxth	r3, r3
  200a4c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  200a4e:	68a3      	ldr	r3, [r4, #8]
  200a50:	b313      	cbz	r3, 200a98 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  200a52:	6961      	ldr	r1, [r4, #20]
  200a54:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  200a58:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  200a5a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  200a5c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  200a5e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  200a60:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  200a62:	7833      	ldrb	r3, [r6, #0]
  200a64:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  200a66:	6961      	ldr	r1, [r4, #20]
  200a68:	6923      	ldr	r3, [r4, #16]
  200a6a:	4299      	cmp	r1, r3
  200a6c:	d301      	bcc.n	200a72 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  200a6e:	68e3      	ldr	r3, [r4, #12]
  200a70:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  200a72:	f1b8 0f00 	cmp.w	r8, #0
  200a76:	d001      	beq.n	200a7c <oqWriteTimeout+0x5c>
      nfy(oqp);
  200a78:	4620      	mov	r0, r4
  200a7a:	47c0      	blx	r8
  200a7c:	2300      	movs	r3, #0
  200a7e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  200a82:	3d01      	subs	r5, #1
    w++;
  200a84:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200a88:	d019      	beq.n	200abe <oqWriteTimeout+0x9e>
  200a8a:	2320      	movs	r3, #32
  200a8c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  200a90:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  200a92:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  200a94:	2b00      	cmp	r3, #0
  200a96:	d1dc      	bne.n	200a52 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200a98:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  200a9c:	4592      	cmp	sl, r2
  200a9e:	d812      	bhi.n	200ac6 <oqWriteTimeout+0xa6>
  200aa0:	4a0c      	ldr	r2, [pc, #48]	; (200ad4 <oqWriteTimeout+0xb4>)
  200aa2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200aa4:	9a01      	ldr	r2, [sp, #4]
  200aa6:	1a51      	subs	r1, r2, r1
  200aa8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  200aaa:	4589      	cmp	r9, r1
  200aac:	d305      	bcc.n	200aba <oqWriteTimeout+0x9a>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
  200aae:	4620      	mov	r0, r4
  200ab0:	f7ff ff9e 	bl	2009f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200ab4:	2800      	cmp	r0, #0
  200ab6:	d0ca      	beq.n	200a4e <oqWriteTimeout+0x2e>
  200ab8:	2300      	movs	r3, #0
  200aba:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  200abe:	4638      	mov	r0, r7
  200ac0:	b003      	add	sp, #12
  200ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200ac6:	4649      	mov	r1, r9
  200ac8:	4620      	mov	r0, r4
  200aca:	f7ff ff91 	bl	2009f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200ace:	2800      	cmp	r0, #0
  200ad0:	d0bd      	beq.n	200a4e <oqWriteTimeout+0x2e>
  200ad2:	e7f1      	b.n	200ab8 <oqWriteTimeout+0x98>
  200ad4:	20000844 	.word	0x20000844
	...

00200ae0 <_writet.lto_priv.44>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  200ae0:	3030      	adds	r0, #48	; 0x30
  200ae2:	f7ff bf9d 	b.w	200a20 <oqWriteTimeout>
  200ae6:	bf00      	nop
	...

00200af0 <_write.lto_priv.38>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  200af0:	3030      	adds	r0, #48	; 0x30
  200af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200af6:	f7ff bf93 	b.w	200a20 <oqWriteTimeout>
  200afa:	bf00      	nop
  200afc:	0000      	movs	r0, r0
	...

00200b00 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  200b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  200b02:	4604      	mov	r4, r0
  200b04:	460f      	mov	r7, r1
  200b06:	4616      	mov	r6, r2
  200b08:	2320      	movs	r3, #32
  200b0a:	f383 8811 	msr	BASEPRI, r3
  200b0e:	e003      	b.n	200b18 <oqPutTimeout+0x18>
  200b10:	f7ff ff6e 	bl	2009f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200b14:	2800      	cmp	r0, #0
  200b16:	db19      	blt.n	200b4c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  200b18:	68a5      	ldr	r5, [r4, #8]
  200b1a:	4631      	mov	r1, r6
  200b1c:	4620      	mov	r0, r4
  200b1e:	2d00      	cmp	r5, #0
  200b20:	d0f6      	beq.n	200b10 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  200b22:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  200b24:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200b26:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  200b28:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  200b2a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  200b2c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200b2e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200b30:	6962      	ldr	r2, [r4, #20]
  200b32:	6923      	ldr	r3, [r4, #16]
  200b34:	429a      	cmp	r2, r3
  200b36:	d301      	bcc.n	200b3c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  200b38:	68e3      	ldr	r3, [r4, #12]
  200b3a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  200b3c:	69e3      	ldr	r3, [r4, #28]
  200b3e:	b10b      	cbz	r3, 200b44 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  200b40:	4620      	mov	r0, r4
  200b42:	4798      	blx	r3
  200b44:	2000      	movs	r0, #0
  200b46:	f380 8811 	msr	BASEPRI, r0
}
  200b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200b4c:	f385 8811 	msr	BASEPRI, r5
  200b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200b52:	bf00      	nop
	...

00200b60 <_putt.lto_priv.42>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  200b60:	3030      	adds	r0, #48	; 0x30
  200b62:	f7ff bfcd 	b.w	200b00 <oqPutTimeout>
  200b66:	bf00      	nop
	...

00200b70 <_put.lto_priv.40>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  200b70:	3030      	adds	r0, #48	; 0x30
  200b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
  200b76:	f7ff bfc3 	b.w	200b00 <oqPutTimeout>
  200b7a:	bf00      	nop
  200b7c:	0000      	movs	r0, r0
	...

00200b80 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  200b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200b84:	4699      	mov	r9, r3
  200b86:	b083      	sub	sp, #12
  200b88:	4604      	mov	r4, r0
  200b8a:	460e      	mov	r6, r1
  200b8c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  200b8e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200b92:	2320      	movs	r3, #32
  200b94:	f383 8811 	msr	BASEPRI, r3
  200b98:	4b26      	ldr	r3, [pc, #152]	; (200c34 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b9a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  200b9e:	2700      	movs	r7, #0
  200ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200ba2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  200ba6:	fa19 f383 	uxtah	r3, r9, r3
  200baa:	b29b      	uxth	r3, r3
  200bac:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  200bae:	68a3      	ldr	r3, [r4, #8]
  200bb0:	b313      	cbz	r3, 200bf8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  200bb2:	69a1      	ldr	r1, [r4, #24]
  200bb4:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  200bb8:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200bba:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  200bbc:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  200bbe:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  200bc0:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200bc2:	780b      	ldrb	r3, [r1, #0]
  200bc4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  200bc6:	69a1      	ldr	r1, [r4, #24]
  200bc8:	6923      	ldr	r3, [r4, #16]
  200bca:	4299      	cmp	r1, r3
  200bcc:	d301      	bcc.n	200bd2 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  200bce:	68e3      	ldr	r3, [r4, #12]
  200bd0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  200bd2:	f1b8 0f00 	cmp.w	r8, #0
  200bd6:	d001      	beq.n	200bdc <iqReadTimeout+0x5c>
      nfy(iqp);
  200bd8:	4620      	mov	r0, r4
  200bda:	47c0      	blx	r8
  200bdc:	2300      	movs	r3, #0
  200bde:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  200be2:	3d01      	subs	r5, #1
    r++;
  200be4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200be8:	d019      	beq.n	200c1e <iqReadTimeout+0x9e>
  200bea:	2320      	movs	r3, #32
  200bec:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  200bf0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200bf2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  200bf4:	2b00      	cmp	r3, #0
  200bf6:	d1dc      	bne.n	200bb2 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200bf8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  200bfc:	4592      	cmp	sl, r2
  200bfe:	d812      	bhi.n	200c26 <iqReadTimeout+0xa6>
  200c00:	4a0c      	ldr	r2, [pc, #48]	; (200c34 <iqReadTimeout+0xb4>)
  200c02:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200c04:	9a01      	ldr	r2, [sp, #4]
  200c06:	1a51      	subs	r1, r2, r1
  200c08:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  200c0a:	4589      	cmp	r9, r1
  200c0c:	d305      	bcc.n	200c1a <iqReadTimeout+0x9a>
  200c0e:	4620      	mov	r0, r4
  200c10:	f7ff feee 	bl	2009f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200c14:	2800      	cmp	r0, #0
  200c16:	d0ca      	beq.n	200bae <iqReadTimeout+0x2e>
  200c18:	2300      	movs	r3, #0
  200c1a:	f383 8811 	msr	BASEPRI, r3
}
  200c1e:	4638      	mov	r0, r7
  200c20:	b003      	add	sp, #12
  200c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200c26:	4649      	mov	r1, r9
  200c28:	4620      	mov	r0, r4
  200c2a:	f7ff fee1 	bl	2009f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200c2e:	2800      	cmp	r0, #0
  200c30:	d0bd      	beq.n	200bae <iqReadTimeout+0x2e>
  200c32:	e7f1      	b.n	200c18 <iqReadTimeout+0x98>
  200c34:	20000844 	.word	0x20000844
	...

00200c40 <_readt.lto_priv.45>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  200c40:	300c      	adds	r0, #12
  200c42:	f7ff bf9d 	b.w	200b80 <iqReadTimeout>
  200c46:	bf00      	nop
	...

00200c50 <_read.lto_priv.39>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  200c50:	300c      	adds	r0, #12
  200c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200c56:	f7ff bf93 	b.w	200b80 <iqReadTimeout>
  200c5a:	bf00      	nop
  200c5c:	0000      	movs	r0, r0
	...

00200c60 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  200c60:	b570      	push	{r4, r5, r6, lr}
  200c62:	2320      	movs	r3, #32
  200c64:	4604      	mov	r4, r0
  200c66:	460e      	mov	r6, r1
  200c68:	f383 8811 	msr	BASEPRI, r3
  200c6c:	e003      	b.n	200c76 <iqGetTimeout+0x16>
  200c6e:	f7ff febf 	bl	2009f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200c72:	2800      	cmp	r0, #0
  200c74:	db19      	blt.n	200caa <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  200c76:	68a5      	ldr	r5, [r4, #8]
  200c78:	4631      	mov	r1, r6
  200c7a:	4620      	mov	r0, r4
  200c7c:	2d00      	cmp	r5, #0
  200c7e:	d0f6      	beq.n	200c6e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  200c80:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  200c82:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200c84:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200c86:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  200c88:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200c8a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  200c8c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  200c8e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200c90:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  200c92:	d301      	bcc.n	200c98 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  200c94:	68e3      	ldr	r3, [r4, #12]
  200c96:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  200c98:	69e3      	ldr	r3, [r4, #28]
  200c9a:	b10b      	cbz	r3, 200ca0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  200c9c:	4620      	mov	r0, r4
  200c9e:	4798      	blx	r3
  200ca0:	2300      	movs	r3, #0
  200ca2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  200ca6:	4628      	mov	r0, r5
}
  200ca8:	bd70      	pop	{r4, r5, r6, pc}
  200caa:	f385 8811 	msr	BASEPRI, r5
  200cae:	bd70      	pop	{r4, r5, r6, pc}

00200cb0 <_gett.lto_priv.43>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  200cb0:	300c      	adds	r0, #12
  200cb2:	f7ff bfd5 	b.w	200c60 <iqGetTimeout>
  200cb6:	bf00      	nop
	...

00200cc0 <_get.lto_priv.41>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  200cc0:	300c      	adds	r0, #12
  200cc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  200cc6:	f7ff bfcb 	b.w	200c60 <iqGetTimeout>
  200cca:	bf00      	nop
  200ccc:	0000      	movs	r0, r0
	...

00200cd0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  200cd0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  200cd2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  200cd4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  200cd6:	4b08      	ldr	r3, [pc, #32]	; (200cf8 <chSchReadyI+0x28>)
  200cd8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  200cda:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  200cde:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200ce0:	689a      	ldr	r2, [r3, #8]
  200ce2:	428a      	cmp	r2, r1
  200ce4:	d2fb      	bcs.n	200cde <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  200ce6:	685a      	ldr	r2, [r3, #4]
}
  200ce8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  200cea:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200cec:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200cee:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200cf0:	605c      	str	r4, [r3, #4]
}
  200cf2:	bc10      	pop	{r4}
  200cf4:	4770      	bx	lr
  200cf6:	bf00      	nop
  200cf8:	20000844 	.word	0x20000844
  200cfc:	00000000 	.word	0x00000000

00200d00 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  200d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
  200d02:	4b23      	ldr	r3, [pc, #140]	; (200d90 <Vector88+0x90>)
  ADC1->SR = 0;
  200d04:	2100      	movs	r1, #0
  sr = ADC1->SR;
  200d06:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  200d08:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  200d0a:	0693      	lsls	r3, r2, #26
  200d0c:	d535      	bpl.n	200d7a <Vector88+0x7a>
  200d0e:	4c21      	ldr	r4, [pc, #132]	; (200d94 <Vector88+0x94>)
  200d10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  200d12:	6802      	ldr	r2, [r0, #0]
  200d14:	6853      	ldr	r3, [r2, #4]
  200d16:	2b00      	cmp	r3, #0
  200d18:	d02f      	beq.n	200d7a <Vector88+0x7a>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
  200d1a:	6921      	ldr	r1, [r4, #16]
  200d1c:	b369      	cbz	r1, 200d7a <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  200d1e:	6813      	ldr	r3, [r2, #0]
  200d20:	f023 031f 	bic.w	r3, r3, #31
  200d24:	6013      	str	r3, [r2, #0]
  200d26:	6813      	ldr	r3, [r2, #0]
  200d28:	f013 0301 	ands.w	r3, r3, #1
  200d2c:	d1fb      	bne.n	200d26 <Vector88+0x26>
  200d2e:	7a07      	ldrb	r7, [r0, #8]
  200d30:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  200d32:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  200d34:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  200d36:	6846      	ldr	r6, [r0, #4]
  200d38:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  200d3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  200d3e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  200d40:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  200d42:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200d44:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  200d46:	b1fd      	cbz	r5, 200d88 <Vector88+0x88>
  200d48:	2305      	movs	r3, #5
  200d4a:	4812      	ldr	r0, [pc, #72]	; (200d94 <Vector88+0x94>)
  200d4c:	7023      	strb	r3, [r4, #0]
  200d4e:	47a8      	blx	r5
  200d50:	7823      	ldrb	r3, [r4, #0]
  200d52:	2b05      	cmp	r3, #5
  200d54:	d015      	beq.n	200d82 <Vector88+0x82>
  200d56:	2300      	movs	r3, #0
  200d58:	6123      	str	r3, [r4, #16]
  200d5a:	2320      	movs	r3, #32
  200d5c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  200d60:	6963      	ldr	r3, [r4, #20]
  200d62:	b13b      	cbz	r3, 200d74 <Vector88+0x74>
    tp->u.rdymsg = msg;
  200d64:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  200d68:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  200d6a:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  200d6c:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  200d6e:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  200d70:	f7ff ffae 	bl	200cd0 <chSchReadyI>
  200d74:	2300      	movs	r3, #0
  200d76:	f383 8811 	msr	BASEPRI, r3
}
  200d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  200d7e:	f7ff bbc7 	b.w	200510 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  200d82:	2302      	movs	r3, #2
  200d84:	7023      	strb	r3, [r4, #0]
  200d86:	e7e6      	b.n	200d56 <Vector88+0x56>
  200d88:	2302      	movs	r3, #2
  200d8a:	6125      	str	r5, [r4, #16]
  200d8c:	7023      	strb	r3, [r4, #0]
  200d8e:	e7e4      	b.n	200d5a <Vector88+0x5a>
  200d90:	40012000 	.word	0x40012000
  200d94:	20000800 	.word	0x20000800
	...

00200da0 <adc_lld_serve_rx_interrupt.lto_priv.37>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  200da0:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
  200da4:	b570      	push	{r4, r5, r6, lr}
  200da6:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  200da8:	d031      	beq.n	200e0e <adc_lld_serve_rx_interrupt.lto_priv.37+0x6e>
  dmaStreamDisable(adcp->dmastp);
  200daa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200dac:	6803      	ldr	r3, [r0, #0]
  200dae:	681a      	ldr	r2, [r3, #0]
  200db0:	f022 021f 	bic.w	r2, r2, #31
  200db4:	601a      	str	r2, [r3, #0]
  200db6:	6819      	ldr	r1, [r3, #0]
  200db8:	f011 0101 	ands.w	r1, r1, #1
  200dbc:	d1fb      	bne.n	200db6 <adc_lld_serve_rx_interrupt.lto_priv.37+0x16>
  200dbe:	7a03      	ldrb	r3, [r0, #8]
  200dc0:	223d      	movs	r2, #61	; 0x3d
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200dc2:	6925      	ldr	r5, [r4, #16]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200dc4:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  200dc6:	6840      	ldr	r0, [r0, #4]
  200dc8:	409a      	lsls	r2, r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200dca:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
  200dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  200dce:	6002      	str	r2, [r0, #0]
  adcp->adc->CR1 = 0;
  200dd0:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
  200dd2:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200dd4:	609e      	str	r6, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200dd6:	2d00      	cmp	r5, #0
  200dd8:	d030      	beq.n	200e3c <adc_lld_serve_rx_interrupt.lto_priv.37+0x9c>
  200dda:	2305      	movs	r3, #5
  200ddc:	4620      	mov	r0, r4
  200dde:	7023      	strb	r3, [r4, #0]
  200de0:	47a8      	blx	r5
  200de2:	7823      	ldrb	r3, [r4, #0]
  200de4:	2b05      	cmp	r3, #5
  200de6:	d067      	beq.n	200eb8 <adc_lld_serve_rx_interrupt.lto_priv.37+0x118>
  200de8:	2300      	movs	r3, #0
  200dea:	6123      	str	r3, [r4, #16]
  200dec:	2320      	movs	r3, #32
  200dee:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  200df2:	6963      	ldr	r3, [r4, #20]
  200df4:	b13b      	cbz	r3, 200e06 <adc_lld_serve_rx_interrupt.lto_priv.37+0x66>
    *trp = NULL;
  200df6:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
  200df8:	f04f 32ff 	mov.w	r2, #4294967295
    (void) chSchReadyI(tp);
  200dfc:	4618      	mov	r0, r3
    *trp = NULL;
  200dfe:	6161      	str	r1, [r4, #20]
    tp->u.rdymsg = msg;
  200e00:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  200e02:	f7ff ff65 	bl	200cd0 <chSchReadyI>
  200e06:	2300      	movs	r3, #0
  200e08:	f383 8811 	msr	BASEPRI, r3
  200e0c:	bd70      	pop	{r4, r5, r6, pc}
    if (adcp->grpp != NULL) {
  200e0e:	6905      	ldr	r5, [r0, #16]
  200e10:	b19d      	cbz	r5, 200e3a <adc_lld_serve_rx_interrupt.lto_priv.37+0x9a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
  200e12:	068a      	lsls	r2, r1, #26
  200e14:	d50f      	bpl.n	200e36 <adc_lld_serve_rx_interrupt.lto_priv.37+0x96>
        _adc_isr_full_code(adcp);
  200e16:	782b      	ldrb	r3, [r5, #0]
  200e18:	b1eb      	cbz	r3, 200e56 <adc_lld_serve_rx_interrupt.lto_priv.37+0xb6>
  200e1a:	686b      	ldr	r3, [r5, #4]
  200e1c:	b16b      	cbz	r3, 200e3a <adc_lld_serve_rx_interrupt.lto_priv.37+0x9a>
  200e1e:	68c2      	ldr	r2, [r0, #12]
  200e20:	2a01      	cmp	r2, #1
  200e22:	d94c      	bls.n	200ebe <adc_lld_serve_rx_interrupt.lto_priv.37+0x11e>
  200e24:	0852      	lsrs	r2, r2, #1
  200e26:	886d      	ldrh	r5, [r5, #2]
  200e28:	6884      	ldr	r4, [r0, #8]
  200e2a:	0051      	lsls	r1, r2, #1
  200e2c:	fb05 4101 	mla	r1, r5, r1, r4
}
  200e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  200e34:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
  200e36:	06cb      	lsls	r3, r1, #27
  200e38:	d404      	bmi.n	200e44 <adc_lld_serve_rx_interrupt.lto_priv.37+0xa4>
  200e3a:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200e3c:	2302      	movs	r3, #2
  200e3e:	6125      	str	r5, [r4, #16]
  200e40:	7023      	strb	r3, [r4, #0]
  200e42:	e7d3      	b.n	200dec <adc_lld_serve_rx_interrupt.lto_priv.37+0x4c>
        _adc_isr_half_code(adcp);
  200e44:	686b      	ldr	r3, [r5, #4]
  200e46:	2b00      	cmp	r3, #0
  200e48:	d0f7      	beq.n	200e3a <adc_lld_serve_rx_interrupt.lto_priv.37+0x9a>
  200e4a:	68c2      	ldr	r2, [r0, #12]
  200e4c:	6881      	ldr	r1, [r0, #8]
  200e4e:	0852      	lsrs	r2, r2, #1
}
  200e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
  200e54:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
  200e56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200e58:	6802      	ldr	r2, [r0, #0]
  200e5a:	6813      	ldr	r3, [r2, #0]
  200e5c:	f023 031f 	bic.w	r3, r3, #31
  200e60:	6013      	str	r3, [r2, #0]
  200e62:	6813      	ldr	r3, [r2, #0]
  200e64:	f013 0301 	ands.w	r3, r3, #1
  200e68:	d1fb      	bne.n	200e62 <adc_lld_serve_rx_interrupt.lto_priv.37+0xc2>
  200e6a:	7a02      	ldrb	r2, [r0, #8]
  200e6c:	213d      	movs	r1, #61	; 0x3d
        _adc_isr_full_code(adcp);
  200e6e:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200e70:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  200e72:	6840      	ldr	r0, [r0, #4]
  200e74:	4091      	lsls	r1, r2
  adcp->adc->CR1 = 0;
  200e76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  200e78:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
  200e7a:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  200e7c:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200e7e:	6096      	str	r6, [r2, #8]
        _adc_isr_full_code(adcp);
  200e80:	b1ad      	cbz	r5, 200eae <adc_lld_serve_rx_interrupt.lto_priv.37+0x10e>
  200e82:	2304      	movs	r3, #4
  200e84:	68e2      	ldr	r2, [r4, #12]
  200e86:	68a1      	ldr	r1, [r4, #8]
  200e88:	4620      	mov	r0, r4
  200e8a:	7023      	strb	r3, [r4, #0]
  200e8c:	47a8      	blx	r5
  200e8e:	7823      	ldrb	r3, [r4, #0]
  200e90:	2b04      	cmp	r3, #4
  200e92:	d00c      	beq.n	200eae <adc_lld_serve_rx_interrupt.lto_priv.37+0x10e>
  200e94:	2320      	movs	r3, #32
  200e96:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  200e9a:	6963      	ldr	r3, [r4, #20]
  200e9c:	2b00      	cmp	r3, #0
  200e9e:	d0b2      	beq.n	200e06 <adc_lld_serve_rx_interrupt.lto_priv.37+0x66>
    *trp = NULL;
  200ea0:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  200ea2:	4618      	mov	r0, r3
    *trp = NULL;
  200ea4:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
  200ea6:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  200ea8:	f7ff ff12 	bl	200cd0 <chSchReadyI>
  200eac:	e7ab      	b.n	200e06 <adc_lld_serve_rx_interrupt.lto_priv.37+0x66>
  200eae:	2202      	movs	r2, #2
  200eb0:	2300      	movs	r3, #0
  200eb2:	7022      	strb	r2, [r4, #0]
  200eb4:	6123      	str	r3, [r4, #16]
  200eb6:	e7ed      	b.n	200e94 <adc_lld_serve_rx_interrupt.lto_priv.37+0xf4>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200eb8:	2302      	movs	r3, #2
  200eba:	7023      	strb	r3, [r4, #0]
  200ebc:	e794      	b.n	200de8 <adc_lld_serve_rx_interrupt.lto_priv.37+0x48>
        _adc_isr_full_code(adcp);
  200ebe:	6881      	ldr	r1, [r0, #8]
}
  200ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  200ec4:	4718      	bx	r3
  200ec6:	bf00      	nop
	...

00200ed0 <chThdExit>:
void chThdExit(msg_t msg) {
  200ed0:	b538      	push	{r3, r4, r5, lr}
  200ed2:	2220      	movs	r2, #32
  200ed4:	4603      	mov	r3, r0
  200ed6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  200eda:	4a10      	ldr	r2, [pc, #64]	; (200f1c <chThdExit+0x4c>)
  200edc:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  200ede:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  200ee2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  200ee4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  200ee6:	4285      	cmp	r5, r0
  200ee8:	d006      	beq.n	200ef8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  200eea:	6803      	ldr	r3, [r0, #0]
  200eec:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  200eee:	f7ff feef 	bl	200cd0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  200ef2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  200ef4:	42a8      	cmp	r0, r5
  200ef6:	d1f8      	bne.n	200eea <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  200ef8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  200efc:	b943      	cbnz	r3, 200f10 <chThdExit+0x40>
  200efe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  200f02:	079b      	lsls	r3, r3, #30
  200f04:	d104      	bne.n	200f10 <chThdExit+0x40>
    REG_REMOVE(tp);
  200f06:	6922      	ldr	r2, [r4, #16]
  200f08:	6963      	ldr	r3, [r4, #20]
  200f0a:	611a      	str	r2, [r3, #16]
  200f0c:	6922      	ldr	r2, [r4, #16]
  200f0e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  200f10:	200f      	movs	r0, #15
}
  200f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  200f16:	f7ff ba6b 	b.w	2003f0 <chSchGoSleepS>
  200f1a:	bf00      	nop
  200f1c:	20000844 	.word	0x20000844

00200f20 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200f20:	e7fe      	b.n	200f20 <BusFault_Handler>
  200f22:	bf00      	nop
	...

00200f30 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  200f30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  200f32:	4f12      	ldr	r7, [pc, #72]	; (200f7c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  200f34:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  200f36:	4d12      	ldr	r5, [pc, #72]	; (200f80 <__init_ram_areas+0x50>)
  200f38:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  200f3c:	4c11      	ldr	r4, [pc, #68]	; (200f84 <__init_ram_areas+0x54>)
  200f3e:	4b12      	ldr	r3, [pc, #72]	; (200f88 <__init_ram_areas+0x58>)
  200f40:	4912      	ldr	r1, [pc, #72]	; (200f8c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  200f42:	429c      	cmp	r4, r3
  200f44:	d911      	bls.n	200f6a <__init_ram_areas+0x3a>
  200f46:	3904      	subs	r1, #4
  200f48:	461a      	mov	r2, r3
      *p = *tp;
  200f4a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  200f4e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  200f52:	4294      	cmp	r4, r2
  200f54:	d8f9      	bhi.n	200f4a <__init_ram_areas+0x1a>
  200f56:	43da      	mvns	r2, r3
  200f58:	4414      	add	r4, r2
  200f5a:	f024 0403 	bic.w	r4, r4, #3
  200f5e:	3404      	adds	r4, #4
  200f60:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  200f62:	429d      	cmp	r5, r3
  200f64:	d903      	bls.n	200f6e <__init_ram_areas+0x3e>
      *p = 0;
  200f66:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  200f6a:	429d      	cmp	r5, r3
  200f6c:	d8fb      	bhi.n	200f66 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  200f6e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  200f70:	4577      	cmp	r7, lr
  200f72:	d202      	bcs.n	200f7a <__init_ram_areas+0x4a>
  200f74:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  200f78:	e7e3      	b.n	200f42 <__init_ram_areas+0x12>
  200f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200f7c:	08002068 	.word	0x08002068
  200f80:	20020000 	.word	0x20020000
  200f84:	20020000 	.word	0x20020000
  200f88:	20020000 	.word	0x20020000
  200f8c:	08002230 	.word	0x08002230

00200f90 <__default_exit>:
void __default_exit(void) {
  200f90:	e7fe      	b.n	200f90 <__default_exit>
  200f92:	bf00      	nop
	...

00200fa0 <__late_init>:
void __late_init(void) {}
  200fa0:	4770      	bx	lr
  200fa2:	bf00      	nop
	...

00200fb0 <__core_init>:
void __core_init(void) {
  200fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  200fb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200fb6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  200fba:	4c1b      	ldr	r4, [pc, #108]	; (201028 <__core_init+0x78>)
  200fbc:	2200      	movs	r2, #0
  200fbe:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  200fc2:	6963      	ldr	r3, [r4, #20]
  200fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200fc8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  200fca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200fce:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  200fd2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  200fd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  200fda:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  200fde:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  200fe2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  200fe6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  200fea:	07b7      	lsls	r7, r6, #30
  200fec:	015d      	lsls	r5, r3, #5
  200fee:	ea05 000e 	and.w	r0, r5, lr
  200ff2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  200ff4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200ff6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  200ffa:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200ffc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201000:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201004:	1c53      	adds	r3, r2, #1
  201006:	d1f6      	bne.n	200ff6 <__core_init+0x46>
  201008:	3d20      	subs	r5, #32
    } while(sets--);
  20100a:	f115 0f20 	cmn.w	r5, #32
  20100e:	d1ee      	bne.n	200fee <__core_init+0x3e>
  201010:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201014:	6963      	ldr	r3, [r4, #20]
  201016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20101a:	6163      	str	r3, [r4, #20]
  20101c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201020:	f3bf 8f6f 	isb	sy
  201024:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201026:	bf00      	nop
  201028:	e000ed00 	.word	0xe000ed00
  20102c:	00000000 	.word	0x00000000

00201030 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  201030:	4a02      	ldr	r2, [pc, #8]	; (20103c <notify7+0xc>)
  201032:	6813      	ldr	r3, [r2, #0]
  201034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  201038:	6013      	str	r3, [r2, #0]
  20103a:	4770      	bx	lr
  20103c:	40007800 	.word	0x40007800

00201040 <ADC_ErrCB>:
}

/*
 * ADC errors callback, should never happen.
 */
static void ADC_ErrCB(ADCDriver *adcp, adcerror_t err) {
  201040:	4770      	bx	lr
  201042:	bf00      	nop
	...

00201050 <ADC_CB>:
  value = buffer[0];
  201050:	880a      	ldrh	r2, [r1, #0]
  201052:	4b01      	ldr	r3, [pc, #4]	; (201058 <ADC_CB+0x8>)
  201054:	601a      	str	r2, [r3, #0]
  201056:	4770      	bx	lr
  201058:	20000a60 	.word	0x20000a60
  20105c:	00000000 	.word	0x00000000

00201060 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  201060:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  201062:	4b0b      	ldr	r3, [pc, #44]	; (201090 <VectorA4+0x30>)
  201064:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  201066:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  201068:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20106a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20106c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20106e:	d107      	bne.n	201080 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  201070:	2002      	movs	r0, #2
  201072:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201074:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201076:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  201078:	68d1      	ldr	r1, [r2, #12]
  20107a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20107e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  201080:	685b      	ldr	r3, [r3, #4]
  201082:	4803      	ldr	r0, [pc, #12]	; (201090 <VectorA4+0x30>)
  201084:	685b      	ldr	r3, [r3, #4]
  201086:	4798      	blx	r3
}
  201088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20108c:	f7ff ba40 	b.w	200510 <_port_irq_epilogue>
  201090:	20000834 	.word	0x20000834
	...

002010a0 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  2010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  2010a4:	4c5f      	ldr	r4, [pc, #380]	; (201224 <Vector188+0x184>)
  2010a6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  2010a8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  2010aa:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2010ac:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  2010ae:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2010b0:	d152      	bne.n	201158 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  2010b2:	05eb      	lsls	r3, r5, #23
  2010b4:	d445      	bmi.n	201142 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  2010b6:	06a8      	lsls	r0, r5, #26
  2010b8:	d417      	bmi.n	2010ea <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  2010ba:	0639      	lsls	r1, r7, #24
  2010bc:	d501      	bpl.n	2010c2 <Vector188+0x22>
  2010be:	062a      	lsls	r2, r5, #24
  2010c0:	d465      	bmi.n	20118e <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  2010c2:	066b      	lsls	r3, r5, #25
  2010c4:	d50d      	bpl.n	2010e2 <Vector188+0x42>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2010c6:	2320      	movs	r3, #32
  2010c8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  2010cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2010ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  2010d0:	429a      	cmp	r2, r3
  2010d2:	f000 8086 	beq.w	2011e2 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  2010d6:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  2010da:	2300      	movs	r3, #0
  2010dc:	6037      	str	r7, [r6, #0]
  2010de:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  2010e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  2010e6:	f7ff ba13 	b.w	200510 <_port_irq_epilogue>
  2010ea:	2320      	movs	r3, #32
  2010ec:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2010f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
  2010f2:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  2010f6:	6963      	ldr	r3, [r4, #20]
  2010f8:	ea01 0802 	and.w	r8, r1, r2
  2010fc:	2b00      	cmp	r3, #0
  2010fe:	d078      	beq.n	2011f2 <Vector188+0x152>
  if (iqIsFullI(iqp)) {
  201100:	6a23      	ldr	r3, [r4, #32]
  201102:	6a62      	ldr	r2, [r4, #36]	; 0x24
  201104:	4293      	cmp	r3, r2
  201106:	d078      	beq.n	2011fa <Vector188+0x15a>
  iqp->q_counter++;
  201108:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20110a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  20110c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  20110e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  201110:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  201112:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  201116:	6a22      	ldr	r2, [r4, #32]
  201118:	69e3      	ldr	r3, [r4, #28]
  20111a:	429a      	cmp	r2, r3
  20111c:	d25e      	bcs.n	2011dc <Vector188+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  20111e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  201120:	4a41      	ldr	r2, [pc, #260]	; (201228 <Vector188+0x188>)
  201122:	4293      	cmp	r3, r2
  201124:	d009      	beq.n	20113a <Vector188+0x9a>
  tqp->next             = tp->queue.next;
  201126:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  201128:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20112c:	4618      	mov	r0, r3
  20112e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201130:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  201132:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201136:	f7ff fdcb 	bl	200cd0 <chSchReadyI>
  20113a:	2300      	movs	r3, #0
  20113c:	f383 8811 	msr	BASEPRI, r3
  201140:	e7bb      	b.n	2010ba <Vector188+0x1a>
  201142:	2320      	movs	r3, #32
  201144:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201148:	f44f 7000 	mov.w	r0, #512	; 0x200
  20114c:	f000 fd28 	bl	201ba0 <chEvtBroadcastFlagsI.constprop.28>
  201150:	2300      	movs	r3, #0
  201152:	f383 8811 	msr	BASEPRI, r3
  201156:	e7ae      	b.n	2010b6 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  201158:	f015 0f08 	tst.w	r5, #8
  20115c:	bf0c      	ite	eq
  20115e:	2000      	moveq	r0, #0
  201160:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  201162:	07eb      	lsls	r3, r5, #31
  201164:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  201168:	bf48      	it	mi
  20116a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20116e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  201170:	bf48      	it	mi
  201172:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  201176:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  201178:	bf48      	it	mi
  20117a:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  20117e:	f383 8811 	msr	BASEPRI, r3
  201182:	f000 fd0d 	bl	201ba0 <chEvtBroadcastFlagsI.constprop.28>
  201186:	2300      	movs	r3, #0
  201188:	f383 8811 	msr	BASEPRI, r3
  20118c:	e791      	b.n	2010b2 <Vector188+0x12>
  20118e:	2320      	movs	r3, #32
  201190:	f383 8811 	msr	BASEPRI, r3
  if (oqIsEmptyI(oqp)) {
  201194:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201196:	6c62      	ldr	r2, [r4, #68]	; 0x44
  201198:	429a      	cmp	r2, r3
  20119a:	d036      	beq.n	20120a <Vector188+0x16a>
  oqp->q_counter++;
  20119c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20119e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  2011a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  2011a2:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  2011a4:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  2011a6:	4288      	cmp	r0, r1
  oqp->q_counter++;
  2011a8:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2011aa:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  2011ae:	d301      	bcc.n	2011b4 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  2011b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  2011b2:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  2011b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  2011b6:	4a1d      	ldr	r2, [pc, #116]	; (20122c <Vector188+0x18c>)
  2011b8:	4293      	cmp	r3, r2
  2011ba:	d009      	beq.n	2011d0 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  2011bc:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  2011be:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2011c2:	4618      	mov	r0, r3
  2011c4:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  2011c6:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2011c8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2011cc:	f7ff fd80 	bl	200cd0 <chSchReadyI>
      u->TDR = b;
  2011d0:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  2011d4:	2300      	movs	r3, #0
  2011d6:	f383 8811 	msr	BASEPRI, r3
  2011da:	e772      	b.n	2010c2 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  2011dc:	69a3      	ldr	r3, [r4, #24]
  2011de:	6223      	str	r3, [r4, #32]
  2011e0:	e79d      	b.n	20111e <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  2011e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2011e4:	2b00      	cmp	r3, #0
  2011e6:	f43f af76 	beq.w	2010d6 <Vector188+0x36>
  2011ea:	2010      	movs	r0, #16
  2011ec:	f000 fcd8 	bl	201ba0 <chEvtBroadcastFlagsI.constprop.28>
  2011f0:	e771      	b.n	2010d6 <Vector188+0x36>
  2011f2:	2004      	movs	r0, #4
  2011f4:	f000 fcd4 	bl	201ba0 <chEvtBroadcastFlagsI.constprop.28>
  2011f8:	e782      	b.n	201100 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  2011fa:	6962      	ldr	r2, [r4, #20]
  2011fc:	2a00      	cmp	r2, #0
  2011fe:	d083      	beq.n	201108 <Vector188+0x68>
  201200:	f44f 6080 	mov.w	r0, #1024	; 0x400
  201204:	f000 fccc 	bl	201ba0 <chEvtBroadcastFlagsI.constprop.28>
  201208:	e797      	b.n	20113a <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  20120a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  20120c:	2a00      	cmp	r2, #0
  20120e:	d0c5      	beq.n	20119c <Vector188+0xfc>
  201210:	2008      	movs	r0, #8
  201212:	f000 fcc5 	bl	201ba0 <chEvtBroadcastFlagsI.constprop.28>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  201216:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  20121a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20121e:	6033      	str	r3, [r6, #0]
  201220:	e7d8      	b.n	2011d4 <Vector188+0x134>
  201222:	bf00      	nop
  201224:	20000a64 	.word	0x20000a64
  201228:	20000a70 	.word	0x20000a70
  20122c:	20000a94 	.word	0x20000a94

00201230 <main>:
  tqp->next = (thread_t *)tqp;
  201230:	4c7e      	ldr	r4, [pc, #504]	; (20142c <main+0x1fc>)
  ch.rlist.prio = NOPRIO;
  201232:	2500      	movs	r5, #0
  ch.vtlist.delta = (systime_t)-1;
  201234:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  201238:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  20123c:	f104 031c 	add.w	r3, r4, #28
  tmp->cumulative = (rttime_t)0;
  201240:	2600      	movs	r6, #0
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201242:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
}

int main(void)
{
  201246:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  20124a:	b087      	sub	sp, #28
  20124c:	2700      	movs	r7, #0
  20124e:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  201250:	4668      	mov	r0, sp
  tqp->prev = (thread_t *)tqp;
  201252:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  201254:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201256:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201258:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  20125a:	9200      	str	r2, [sp, #0]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20125c:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  20125e:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  201260:	60a5      	str	r5, [r4, #8]
  ch.vtlist.systime = (systime_t)0;
  201262:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201264:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  201266:	9501      	str	r5, [sp, #4]
  tmp->last       = (rtcnt_t)0;
  201268:	9502      	str	r5, [sp, #8]
  tmp->n          = (ucnt_t)0;
  20126a:	9503      	str	r5, [sp, #12]
  tmp->cumulative = (rttime_t)0;
  20126c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  chTMStartMeasurementX(&tm);
  201270:	f000 fc8e 	bl	201b90 <chTMStartMeasurementX.constprop.32>
  chTMStopMeasurementX(&tm);
  201274:	4668      	mov	r0, sp
  201276:	f7ff fb2b 	bl	2008d0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  20127a:	4b6d      	ldr	r3, [pc, #436]	; (201430 <main+0x200>)
  20127c:	496d      	ldr	r1, [pc, #436]	; (201434 <main+0x204>)
  tp->prio      = prio;
  20127e:	f04f 0e80 	mov.w	lr, #128	; 0x80
  nextmem = __heap_base__;
  201282:	4a6d      	ldr	r2, [pc, #436]	; (201438 <main+0x208>)
  REG_INSERT(tp);
  201284:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  201288:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  20128a:	f103 0c10 	add.w	ip, r3, #16
  20128e:	496b      	ldr	r1, [pc, #428]	; (20143c <main+0x20c>)
  endmem  = __heap_end__;
  201290:	4f6b      	ldr	r7, [pc, #428]	; (201440 <main+0x210>)
  nextmem = __heap_base__;
  201292:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  201294:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  201296:	496b      	ldr	r1, [pc, #428]	; (201444 <main+0x214>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  201298:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  20129c:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  20129e:	496a      	ldr	r1, [pc, #424]	; (201448 <main+0x218>)
  ch.tm.offset = tm.last;
  2012a0:	9802      	ldr	r0, [sp, #8]
  2012a2:	68cf      	ldr	r7, [r1, #12]
  2012a4:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2012a6:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  2012aa:	4868      	ldr	r0, [pc, #416]	; (20144c <main+0x21c>)
  tp->prio      = prio;
  2012ac:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  2012b0:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  2012b4:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2012b6:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 201478 <main+0x248>
  REG_INSERT(tp);
  2012ba:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  2012bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 20147c <main+0x24c>
  tp->epending  = (eventmask_t)0;
  2012c0:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  2012c2:	619d      	str	r5, [r3, #24]
  2012c4:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  2012c8:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  2012cc:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  2012d0:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  2012d2:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  2012d6:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  2012d8:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  2012da:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  2012de:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  2012e0:	f104 0758 	add.w	r7, r4, #88	; 0x58
  SCB->AIRCR =  reg_value;
  2012e4:	60c8      	str	r0, [r1, #12]
  2012e6:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  2012ea:	609d      	str	r5, [r3, #8]
  2012ec:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  2012f0:	60dd      	str	r5, [r3, #12]
  2012f2:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  2012f4:	61a6      	str	r6, [r4, #24]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2012f6:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  2012f8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  2012fc:	f04f 0c10 	mov.w	ip, #16
  DWT->LAR = 0xC5ACCE55U;
  201300:	4b53      	ldr	r3, [pc, #332]	; (201450 <main+0x220>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201302:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201304:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201308:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  20130c:	4851      	ldr	r0, [pc, #324]	; (201454 <main+0x224>)
  tqp->next = (thread_t *)tqp;
  20130e:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201310:	65e7      	str	r7, [r4, #92]	; 0x5c
  201312:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201316:	6818      	ldr	r0, [r3, #0]
  201318:	4310      	orrs	r0, r2
  20131a:	6018      	str	r0, [r3, #0]
  20131c:	f881 c01f 	strb.w	ip, [r1, #31]
  201320:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  201324:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  201328:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20132a:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  20132e:	4b4a      	ldr	r3, [pc, #296]	; (201458 <main+0x228>)
  tp->state     = CH_STATE_WTSTART;
  201330:	2602      	movs	r6, #2
  REG_INSERT(tp);
  201332:	6961      	ldr	r1, [r4, #20]
  tp->prio      = prio;
  201334:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201338:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  20133c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  201340:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  201344:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201348:	4a44      	ldr	r2, [pc, #272]	; (20145c <main+0x22c>)
  20134a:	f8df e134 	ldr.w	lr, [pc, #308]	; 201480 <main+0x250>
  20134e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  201352:	4a43      	ldr	r2, [pc, #268]	; (201460 <main+0x230>)
  tp->state     = CH_STATE_WTSTART;
  201354:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  201358:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  20135c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201360:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201364:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201368:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  20136c:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  201370:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201374:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  201376:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  20137a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  20137e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201382:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  201386:	6108      	str	r0, [r1, #16]
  thread_t *otp = currp;
  201388:	69a2      	ldr	r2, [r4, #24]
  ntp->u.rdymsg = msg;
  20138a:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  20138e:	6891      	ldr	r1, [r2, #8]
  201390:	6160      	str	r0, [r4, #20]
  201392:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  201396:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  20139a:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  20139e:	2900      	cmp	r1, #0
  2013a0:	f000 82d8 	beq.w	201954 <main+0x724>
  tp->state = CH_STATE_READY;
  2013a4:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  2013a8:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  2013aa:	68a1      	ldr	r1, [r4, #8]
  2013ac:	2900      	cmp	r1, #0
  2013ae:	d1fb      	bne.n	2013a8 <main+0x178>
  tp->queue.next             = cp;
  2013b0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  2013b4:	6862      	ldr	r2, [r4, #4]
  2013b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  2013ba:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2013bc:	6060      	str	r0, [r4, #4]
  2013be:	f381 8811 	msr	BASEPRI, r1
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  2013c2:	4b28      	ldr	r3, [pc, #160]	; (201464 <main+0x234>)
  2013c4:	f04f 32ff 	mov.w	r2, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  2013c8:	4c27      	ldr	r4, [pc, #156]	; (201468 <main+0x238>)
  rccResetAHB1(~0);
  2013ca:	6918      	ldr	r0, [r3, #16]
  2013cc:	611a      	str	r2, [r3, #16]
  2013ce:	6119      	str	r1, [r3, #16]
  rccResetAHB2(~0);
  2013d0:	6958      	ldr	r0, [r3, #20]
  2013d2:	615a      	str	r2, [r3, #20]
  2013d4:	6159      	str	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2013d6:	6a18      	ldr	r0, [r3, #32]
  2013d8:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  2013dc:	6218      	str	r0, [r3, #32]
  2013de:	6219      	str	r1, [r3, #32]
  rccResetAPB2(~0);
  2013e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2013e2:	625a      	str	r2, [r3, #36]	; 0x24
  2013e4:	6259      	str	r1, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2013e6:	6822      	ldr	r2, [r4, #0]
  2013e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  2013ec:	6022      	str	r2, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2013ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  2013f0:	f402 7240 	and.w	r2, r2, #768	; 0x300
  2013f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  2013f8:	d003      	beq.n	201402 <main+0x1d2>
    RCC->BDCR = RCC_BDCR_BDRST;
  2013fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  2013fe:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201400:	6719      	str	r1, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201402:	4b18      	ldr	r3, [pc, #96]	; (201464 <main+0x234>)
  201404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201406:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201408:	f042 0219 	orr.w	r2, r2, #25
  20140c:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  20140e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  201410:	079b      	lsls	r3, r3, #30
  201412:	d5fc      	bpl.n	20140e <main+0x1de>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201414:	4d14      	ldr	r5, [pc, #80]	; (201468 <main+0x238>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  201416:	2400      	movs	r4, #0
  201418:	4814      	ldr	r0, [pc, #80]	; (20146c <main+0x23c>)
  20141a:	686a      	ldr	r2, [r5, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
  20141c:	4623      	mov	r3, r4
  dma_streams_mask = 0U;
  20141e:	4e14      	ldr	r6, [pc, #80]	; (201470 <main+0x240>)
  201420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  201424:	606a      	str	r2, [r5, #4]
  201426:	4a13      	ldr	r2, [pc, #76]	; (201474 <main+0x244>)
  201428:	6014      	str	r4, [r2, #0]
  20142a:	e02d      	b.n	201488 <main+0x258>
  20142c:	20000844 	.word	0x20000844
  201430:	20000990 	.word	0x20000990
  201434:	00200321 	.word	0x00200321
  201438:	20000a38 	.word	0x20000a38
  20143c:	20020000 	.word	0x20020000
  201440:	20080000 	.word	0x20080000
  201444:	20000a34 	.word	0x20000a34
  201448:	e000ed00 	.word	0xe000ed00
  20144c:	05fa0300 	.word	0x05fa0300
  201450:	e0001000 	.word	0xe0001000
  201454:	c5acce55 	.word	0xc5acce55
  201458:	200008b8 	.word	0x200008b8
  20145c:	002002e5 	.word	0x002002e5
  201460:	080021f8 	.word	0x080021f8
  201464:	40023800 	.word	0x40023800
  201468:	40007000 	.word	0x40007000
  20146c:	0800212c 	.word	0x0800212c
  201470:	40026010 	.word	0x40026010
  201474:	20000a30 	.word	0x20000a30
  201478:	e000edf0 	.word	0xe000edf0
  20147c:	080021e0 	.word	0x080021e0
  201480:	002003e1 	.word	0x002003e1
  201484:	f850 6c0c 	ldr.w	r6, [r0, #-12]
    dma_isr_redir[i].dma_func = NULL;
  201488:	4ad0      	ldr	r2, [pc, #832]	; (2017cc <main+0x59c>)
  20148a:	300c      	adds	r0, #12
    _stm32_dma_streams[i].stream->CR = 0U;
  20148c:	6033      	str	r3, [r6, #0]
    dma_isr_redir[i].dma_func = NULL;
  20148e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  201492:	3101      	adds	r1, #1
  201494:	2910      	cmp	r1, #16
  201496:	d1f5      	bne.n	201484 <main+0x254>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  201498:	f04f 3eff 	mov.w	lr, #4294967295
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  20149c:	4ecc      	ldr	r6, [pc, #816]	; (2017d0 <main+0x5a0>)
  20149e:	4ccd      	ldr	r4, [pc, #820]	; (2017d4 <main+0x5a4>)
  2014a0:	f240 75ff 	movw	r5, #2047	; 0x7ff
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  2014a4:	4acc      	ldr	r2, [pc, #816]	; (2017d8 <main+0x5a8>)
  gpiop->ODR     = config->odr;
  2014a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->LIFCR = 0xFFFFFFFFU;
  2014aa:	f8c4 e008 	str.w	lr, [r4, #8]
  2014ae:	f64b 7a7e 	movw	sl, #49022	; 0xbf7e
  DMA1->HIFCR = 0xFFFFFFFFU;
  2014b2:	f8c4 e00c 	str.w	lr, [r4, #12]
  gpiop->AFRH    = config->afrh;
  2014b6:	f44f 0930 	mov.w	r9, #11534336	; 0xb00000
  DMA2->LIFCR = 0xFFFFFFFFU;
  2014ba:	f8c2 e008 	str.w	lr, [r2, #8]
  gpiop->OSPEEDR = config->ospeedr;
  2014be:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  DMA2->HIFCR = 0xFFFFFFFFU;
  2014c2:	f8c2 e00c 	str.w	lr, [r2, #12]
  gpiop->MODER   = config->moder;
  2014c6:	f640 2b08 	movw	fp, #2568	; 0xa08
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2014ca:	6b32      	ldr	r2, [r6, #48]	; 0x30
  gpiop->OSPEEDR = config->ospeedr;
  2014cc:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  2014d0:	4cc2      	ldr	r4, [pc, #776]	; (2017dc <main+0x5ac>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2014d2:	432a      	orrs	r2, r5
  2014d4:	6332      	str	r2, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2014d6:	6d32      	ldr	r2, [r6, #80]	; 0x50
  2014d8:	ea42 0c05 	orr.w	ip, r2, r5
  gpiop->OTYPER  = config->otyper;
  2014dc:	4dc0      	ldr	r5, [pc, #768]	; (2017e0 <main+0x5b0>)
  sdp->vmt = &vmt;
  2014de:	4ac1      	ldr	r2, [pc, #772]	; (2017e4 <main+0x5b4>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2014e0:	f8c6 c050 	str.w	ip, [r6, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
  2014e4:	f8df c344 	ldr.w	ip, [pc, #836]	; 20182c <main+0x5fc>
  gpiop->OTYPER  = config->otyper;
  2014e8:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2014ea:	f8c5 e008 	str.w	lr, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  2014ee:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRL    = config->afrl;
  2014f2:	f8df c33c 	ldr.w	ip, [pc, #828]	; 201830 <main+0x600>
  gpiop->ODR     = config->odr;
  2014f6:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  2014f8:	f8c5 c020 	str.w	ip, [r5, #32]
  gpiop->AFRH    = config->afrh;
  2014fc:	f8df c334 	ldr.w	ip, [pc, #820]	; 201834 <main+0x604>
  201500:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201504:	f8df c330 	ldr.w	ip, [pc, #816]	; 201838 <main+0x608>
  201508:	f8c5 c000 	str.w	ip, [r5]
  gpiop->OTYPER  = config->otyper;
  20150c:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201510:	f8c5 e408 	str.w	lr, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201514:	f10e 4e8a 	add.w	lr, lr, #1157627904	; 0x45000000
  iqp->q_buffer  = bp;
  201518:	f8df c320 	ldr.w	ip, [pc, #800]	; 20183c <main+0x60c>
  20151c:	f10e 1e55 	add.w	lr, lr, #5570645	; 0x550055
  201520:	f50e 5ea8 	add.w	lr, lr, #5376	; 0x1500
  201524:	f8c5 e40c 	str.w	lr, [r5, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  201528:	f8df e314 	ldr.w	lr, [pc, #788]	; 201840 <main+0x610>
  gpiop->ODR     = config->odr;
  20152c:	f8c5 a414 	str.w	sl, [r5, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  201530:	f04f 6a08 	mov.w	sl, #142606336	; 0x8800000
  gpiop->AFRL    = config->afrl;
  201534:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201538:	f8c5 9424 	str.w	r9, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  20153c:	f44f 2920 	mov.w	r9, #655360	; 0xa0000
  201540:	f8c5 e400 	str.w	lr, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201544:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  201548:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20154a:	f8c5 8008 	str.w	r8, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  20154e:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 201844 <main+0x614>
  oqp->q_buffer  = bp;
  201552:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 201848 <main+0x618>
  201556:	f8c5 800c 	str.w	r8, [r5, #12]
  gpiop->AFRL    = config->afrl;
  20155a:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 20184c <main+0x61c>
  gpiop->ODR     = config->odr;
  20155e:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  201560:	f8c5 8020 	str.w	r8, [r5, #32]
  gpiop->PUPDR   = config->pupdr;
  201564:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 201850 <main+0x620>
  gpiop->AFRH    = config->afrh;
  201568:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20156a:	f8c5 b000 	str.w	fp, [r5]
  gpiop->PUPDR   = config->pupdr;
  20156e:	f04f 3b55 	mov.w	fp, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
  201572:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201576:	f8c5 7408 	str.w	r7, [r5, #1032]	; 0x408
  gpiop->AFRH    = config->afrh;
  20157a:	2777      	movs	r7, #119	; 0x77
  gpiop->PUPDR   = config->pupdr;
  20157c:	f8c5 840c 	str.w	r8, [r5, #1036]	; 0x40c
  gpiop->OSPEEDR = config->ospeedr;
  201580:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 201854 <main+0x624>
  gpiop->ODR     = config->odr;
  201584:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201588:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  20158c:	f8c5 7424 	str.w	r7, [r5, #1060]	; 0x424
  gpiop->OSPEEDR = config->ospeedr;
  201590:	270f      	movs	r7, #15
  gpiop->MODER   = config->moder;
  201592:	f8c5 9400 	str.w	r9, [r5, #1024]	; 0x400
  tqp->next = (thread_t *)tqp;
  201596:	f104 0918 	add.w	r9, r4, #24
  gpiop->OTYPER  = config->otyper;
  20159a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  20159e:	f8c5 8808 	str.w	r8, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2015a2:	f8c5 b80c 	str.w	fp, [r5, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  2015a6:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 201858 <main+0x628>
  gpiop->ODR     = config->odr;
  2015aa:	f8c5 0814 	str.w	r0, [r5, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2015ae:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2015b2:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2015b6:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  2015ba:	4d8b      	ldr	r5, [pc, #556]	; (2017e8 <main+0x5b8>)
  gpiop->OTYPER  = config->otyper;
  2015bc:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2015c0:	f8c8 5008 	str.w	r5, [r8, #8]
  gpiop->OTYPER  = config->otyper;
  2015c4:	4d89      	ldr	r5, [pc, #548]	; (2017ec <main+0x5bc>)
  gpiop->PUPDR   = config->pupdr;
  2015c6:	f8c8 b00c 	str.w	fp, [r8, #12]
  gpiop->ODR     = config->odr;
  2015ca:	f8c8 0014 	str.w	r0, [r8, #20]
  gpiop->AFRL    = config->afrl;
  2015ce:	f8c8 3020 	str.w	r3, [r8, #32]
  gpiop->AFRH    = config->afrh;
  2015d2:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2015d6:	f8c8 3000 	str.w	r3, [r8]
  gpiop->OSPEEDR = config->ospeedr;
  2015da:	f8df 8280 	ldr.w	r8, [pc, #640]	; 20185c <main+0x62c>
  gpiop->OTYPER  = config->otyper;
  2015de:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2015e0:	f8c5 8008 	str.w	r8, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  2015e4:	f8df 8278 	ldr.w	r8, [pc, #632]	; 201860 <main+0x630>
  2015e8:	f8c5 800c 	str.w	r8, [r5, #12]
  gpiop->AFRH    = config->afrh;
  2015ec:	f8df 8274 	ldr.w	r8, [pc, #628]	; 201864 <main+0x634>
  gpiop->ODR     = config->odr;
  2015f0:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  2015f2:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  2015f4:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
  gpiop->PUPDR   = config->pupdr;
  2015f8:	f8df 826c 	ldr.w	r8, [pc, #620]	; 201868 <main+0x638>
  gpiop->MODER   = config->moder;
  2015fc:	f8c5 a000 	str.w	sl, [r5]
  201600:	f04f 0a01 	mov.w	sl, #1
  gpiop->OTYPER  = config->otyper;
  201604:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201608:	f8c5 7408 	str.w	r7, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  20160c:	f8c5 840c 	str.w	r8, [r5, #1036]	; 0x40c
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201610:	f44f 2880 	mov.w	r8, #262144	; 0x40000
  gpiop->ODR     = config->odr;
  201614:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201618:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  20161c:	f8c5 3424 	str.w	r3, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201620:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201624:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  201628:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20162a:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  20162c:	f8c5 b00c 	str.w	fp, [r5, #12]
  adcp->config   = NULL;
  201630:	6063      	str	r3, [r4, #4]
  gpiop->ODR     = config->odr;
  201632:	6168      	str	r0, [r5, #20]
  adcp->samples  = NULL;
  201634:	60a3      	str	r3, [r4, #8]
  gpiop->AFRL    = config->afrl;
  201636:	622b      	str	r3, [r5, #32]
  adcp->depth    = 0;
  201638:	60e3      	str	r3, [r4, #12]
  gpiop->AFRH    = config->afrh;
  20163a:	626b      	str	r3, [r5, #36]	; 0x24
  adcp->grpp     = NULL;
  20163c:	6123      	str	r3, [r4, #16]
  gpiop->MODER   = config->moder;
  20163e:	602b      	str	r3, [r5, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  201640:	6163      	str	r3, [r4, #20]
  gpiop->OTYPER  = config->otyper;
  201642:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  201646:	6223      	str	r3, [r4, #32]
  gpiop->OSPEEDR = config->ospeedr;
  201648:	f8c5 3408 	str.w	r3, [r5, #1032]	; 0x408
  20164c:	f8c4 9018 	str.w	r9, [r4, #24]
  gpiop->PUPDR   = config->pupdr;
  201650:	f8c5 b40c 	str.w	fp, [r5, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  201654:	f8c4 901c 	str.w	r9, [r4, #28]
  201658:	4691      	mov	r9, r2
  gpiop->ODR     = config->odr;
  20165a:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20165e:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201662:	f8c5 3424 	str.w	r3, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201666:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20166a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  20166e:	f8c5 3808 	str.w	r3, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201672:	f8c5 b80c 	str.w	fp, [r5, #2060]	; 0x80c
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201676:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
  gpiop->ODR     = config->odr;
  20167a:	f8c5 0814 	str.w	r0, [r5, #2068]	; 0x814
  ADCD1.adc = ADC1;
  20167e:	485c      	ldr	r0, [pc, #368]	; (2017f0 <main+0x5c0>)
  gpiop->AFRL    = config->afrl;
  201680:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201684:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  201688:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  20168c:	f04f 0560 	mov.w	r5, #96	; 0x60
  201690:	62a0      	str	r0, [r4, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  201692:	4858      	ldr	r0, [pc, #352]	; (2017f4 <main+0x5c4>)
  adcp->state    = ADC_STOP;
  201694:	f884 a000 	strb.w	sl, [r4]
  201698:	62e0      	str	r0, [r4, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  20169a:	4857      	ldr	r0, [pc, #348]	; (2017f8 <main+0x5c8>)
  iqp->q_top     = bp + size;
  20169c:	4f57      	ldr	r7, [pc, #348]	; (2017fc <main+0x5cc>)
  20169e:	6320      	str	r0, [r4, #48]	; 0x30
  2016a0:	4857      	ldr	r0, [pc, #348]	; (201800 <main+0x5d0>)
  2016a2:	f880 5312 	strb.w	r5, [r0, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2016a6:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2016aa:	f8c0 8000 	str.w	r8, [r0]
  iqp->q_counter = 0;
  2016ae:	6153      	str	r3, [r2, #20]
  oqp->q_counter = size;
  2016b0:	6391      	str	r1, [r2, #56]	; 0x38
  2016b2:	4954      	ldr	r1, [pc, #336]	; (201804 <main+0x5d4>)
  GPTD1.tim = STM32_TIM1;
  2016b4:	4d54      	ldr	r5, [pc, #336]	; (201808 <main+0x5d8>)
  2016b6:	f849 1b04 	str.w	r1, [r9], #4
  oqp->q_top     = bp + size;
  2016ba:	f10e 0110 	add.w	r1, lr, #16
  iqp->q_buffer  = bp;
  2016be:	f8c2 c018 	str.w	ip, [r2, #24]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  2016c2:	f8c2 9004 	str.w	r9, [r2, #4]
  tqp->next = (thread_t *)tqp;
  2016c6:	f102 090c 	add.w	r9, r2, #12
  sdp->state = SD_STOP;
  2016ca:	f882 a008 	strb.w	sl, [r2, #8]
  iqp->q_notify  = infy;
  2016ce:	6293      	str	r3, [r2, #40]	; 0x28
  iqp->q_link    = link;
  2016d0:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  2016d2:	6512      	str	r2, [r2, #80]	; 0x50
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  2016d4:	f885 a000 	strb.w	sl, [r5]
  gptp->config = NULL;
  2016d8:	606b      	str	r3, [r5, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2016da:	f880 b352 	strb.w	fp, [r0, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2016de:	f8c0 8188 	str.w	r8, [r0, #392]	; 0x188
  iqp->q_rdptr   = bp;
  2016e2:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2016e6:	f8c0 8008 	str.w	r8, [r0, #8]
  2016ea:	f102 0030 	add.w	r0, r2, #48	; 0x30
  oqp->q_top     = bp + size;
  2016ee:	6411      	str	r1, [r2, #64]	; 0x40
  oqp->q_notify  = onfy;
  2016f0:	4946      	ldr	r1, [pc, #280]	; (20180c <main+0x5dc>)
  2016f2:	f8c2 900c 	str.w	r9, [r2, #12]
  2016f6:	64d1      	str	r1, [r2, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
  2016f8:	f8c2 9010 	str.w	r9, [r2, #16]
  2016fc:	f8df 816c 	ldr.w	r8, [pc, #364]	; 20186c <main+0x63c>

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  201700:	4943      	ldr	r1, [pc, #268]	; (201810 <main+0x5e0>)
  SD7.clock = STM32_UART7CLK;
  201702:	f8df 916c 	ldr.w	r9, [pc, #364]	; 201870 <main+0x640>
  iqp->q_wrptr   = bp;
  201706:	f8c2 c020 	str.w	ip, [r2, #32]
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  20170a:	f04f 0c07 	mov.w	ip, #7
  20170e:	f8c5 800c 	str.w	r8, [r5, #12]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  201712:	f04f 0880 	mov.w	r8, #128	; 0x80
  SD7.usart = UART7;
  201716:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  201718:	f8c2 9058 	str.w	r9, [r2, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
  20171c:	6310      	str	r0, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  20171e:	6350      	str	r0, [r2, #52]	; 0x34
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  201720:	493c      	ldr	r1, [pc, #240]	; (201814 <main+0x5e4>)
  201722:	f8df 9150 	ldr.w	r9, [pc, #336]	; 201874 <main+0x644>
  201726:	483c      	ldr	r0, [pc, #240]	; (201818 <main+0x5e8>)
  oqp->q_buffer  = bp;
  201728:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  20172c:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  201730:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
  201734:	f04f 0e20 	mov.w	lr, #32
  iqp->q_top     = bp + size;
  201738:	61d7      	str	r7, [r2, #28]
  20173a:	f8c1 9004 	str.w	r9, [r1, #4]
  SysTick->VAL = 0;
  20173e:	608b      	str	r3, [r1, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  201740:	f8c1 c000 	str.w	ip, [r1]
  201744:	f880 8023 	strb.w	r8, [r0, #35]	; 0x23
  201748:	f38e 8811 	msr	BASEPRI, lr
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  20174c:	7a13      	ldrb	r3, [r2, #8]
  20174e:	4553      	cmp	r3, sl
  201750:	f000 8103 	beq.w	20195a <main+0x72a>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201754:	6d93      	ldr	r3, [r2, #88]	; 0x58
  u->ICR = 0xFFFFFFFFU;
  201756:	f04f 30ff 	mov.w	r0, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20175a:	4930      	ldr	r1, [pc, #192]	; (20181c <main+0x5ec>)
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20175c:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201760:	f04f 0e01 	mov.w	lr, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201764:	f240 162d 	movw	r6, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201768:	fba1 3103 	umull	r3, r1, r1, r3
  USART_TypeDef *u = sdp->usart;
  20176c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20176e:	0c09      	lsrs	r1, r1, #16
  201770:	60d9      	str	r1, [r3, #12]
  sdp->state = SD_READY;
  201772:	2102      	movs	r1, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201774:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201778:	f8c3 e008 	str.w	lr, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20177c:	601e      	str	r6, [r3, #0]
  20177e:	2600      	movs	r6, #0
  u->ICR = 0xFFFFFFFFU;
  201780:	6218      	str	r0, [r3, #32]
  201782:	7211      	strb	r1, [r2, #8]
    sdp->rxmask = 0xFF;
  201784:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  201788:	f386 8811 	msr	BASEPRI, r6
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  20178c:	f240 4202 	movw	r2, #1026	; 0x402
  201790:	f44f 7180 	mov.w	r1, #256	; 0x100
  201794:	4822      	ldr	r0, [pc, #136]	; (201820 <main+0x5f0>)
  201796:	f7fe fe43 	bl	200420 <_pal_lld_setgroupmode>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  20179a:	f240 4202 	movw	r2, #1026	; 0x402
  20179e:	2180      	movs	r1, #128	; 0x80
  2017a0:	481f      	ldr	r0, [pc, #124]	; (201820 <main+0x5f0>)
  2017a2:	f7fe fe3d 	bl	200420 <_pal_lld_setgroupmode>
  2017a6:	2320      	movs	r3, #32
  2017a8:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  2017ac:	782b      	ldrb	r3, [r5, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  2017ae:	4a1d      	ldr	r2, [pc, #116]	; (201824 <main+0x5f4>)
  2017b0:	2b01      	cmp	r3, #1
  2017b2:	606a      	str	r2, [r5, #4]
  2017b4:	f000 8137 	beq.w	201a26 <main+0x7f6>
  2017b8:	68ab      	ldr	r3, [r5, #8]
  2017ba:	4a1b      	ldr	r2, [pc, #108]	; (201828 <main+0x5f8>)
  2017bc:	095b      	lsrs	r3, r3, #5
  2017be:	fba2 2303 	umull	r2, r3, r2, r3
  2017c2:	09db      	lsrs	r3, r3, #7
  2017c4:	3b01      	subs	r3, #1
  2017c6:	b29b      	uxth	r3, r3
  2017c8:	e056      	b.n	201878 <main+0x648>
  2017ca:	bf00      	nop
  2017cc:	200009b0 	.word	0x200009b0
  2017d0:	40023800 	.word	0x40023800
  2017d4:	40026000 	.word	0x40026000
  2017d8:	40026400 	.word	0x40026400
  2017dc:	20000800 	.word	0x20000800
  2017e0:	40020000 	.word	0x40020000
  2017e4:	20000a64 	.word	0x20000a64
  2017e8:	003fcfff 	.word	0x003fcfff
  2017ec:	40021800 	.word	0x40021800
  2017f0:	40012000 	.word	0x40012000
  2017f4:	080021b0 	.word	0x080021b0
  2017f8:	00022c16 	.word	0x00022c16
  2017fc:	20000a50 	.word	0x20000a50
  201800:	e000e100 	.word	0xe000e100
  201804:	08002208 	.word	0x08002208
  201808:	20000834 	.word	0x20000834
  20180c:	00201031 	.word	0x00201031
  201810:	40007800 	.word	0x40007800
  201814:	e000e010 	.word	0xe000e010
  201818:	e000ed00 	.word	0xe000ed00
  20181c:	91a2b3c5 	.word	0x91a2b3c5
  201820:	40021000 	.word	0x40021000
  201824:	08002110 	.word	0x08002110
  201828:	0a7c5ac5 	.word	0x0a7c5ac5
  20182c:	40005551 	.word	0x40005551
  201830:	b0000bb0 	.word	0xb0000bb0
  201834:	000aaa0a 	.word	0x000aaa0a
  201838:	2aae8028 	.word	0x2aae8028
  20183c:	20000a40 	.word	0x20000a40
  201840:	18004001 	.word	0x18004001
  201844:	01555051 	.word	0x01555051
  201848:	20000a50 	.word	0x20000a50
  20184c:	00bb00b0 	.word	0x00bb00b0
  201850:	55505555 	.word	0x55505555
  201854:	cffffff3 	.word	0xcffffff3
  201858:	40021400 	.word	0x40021400
  20185c:	3cccf000 	.word	0x3cccf000
  201860:	51155555 	.word	0x51155555
  201864:	00b0b000 	.word	0x00b0b000
  201868:	55555550 	.word	0x55555550
  20186c:	40010000 	.word	0x40010000
  201870:	0337f980 	.word	0x0337f980
  201874:	00034bbf 	.word	0x00034bbf
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201878:	68e9      	ldr	r1, [r5, #12]
  20187a:	2200      	movs	r2, #0
  gptp->tim->CR2 = gptp->config->cr2;
  20187c:	2020      	movs	r0, #32
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  20187e:	2602      	movs	r6, #2
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201880:	600a      	str	r2, [r1, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  201882:	6048      	str	r0, [r1, #4]
  201884:	702e      	strb	r6, [r5, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  201886:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201888:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  20188a:	60ca      	str	r2, [r1, #12]
  20188c:	f382 8811 	msr	BASEPRI, r2
  201890:	f380 8811 	msr	BASEPRI, r0
  if (adcp->state == ADC_STOP) {
  201894:	7823      	ldrb	r3, [r4, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
  201896:	6062      	str	r2, [r4, #4]
  201898:	2b01      	cmp	r3, #1
  20189a:	d063      	beq.n	201964 <main+0x734>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
  20189c:	2302      	movs	r3, #2
  20189e:	2600      	movs	r6, #0
  2018a0:	7023      	strb	r3, [r4, #0]
  2018a2:	f386 8811 	msr	BASEPRI, r6
    gptStart(&GPTD1, &GPT1cfg);

    // ADC driver
    adcStart(&ADCD1, NULL);

    palSetLineMode( LINE_ADC123_IN10, PAL_MODE_INPUT_ANALOG );  // PC0
  2018a6:	2203      	movs	r2, #3
  2018a8:	2101      	movs	r1, #1
  2018aa:	486c      	ldr	r0, [pc, #432]	; (201a5c <main+0x82c>)
  2018ac:	f7fe fdb8 	bl	200420 <_pal_lld_setgroupmode>
  2018b0:	f04f 0e20 	mov.w	lr, #32
  2018b4:	f38e 8811 	msr	BASEPRI, lr
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
  2018b8:	2703      	movs	r7, #3
  mode = adcp->dmamode;
  2018ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  2018bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  adcp->depth    = depth;
  2018be:	2101      	movs	r1, #1
  adcp->grpp     = grpp;
  2018c0:	4867      	ldr	r0, [pc, #412]	; (201a60 <main+0x830>)
    mode |= STM32_DMA_CR_CIRC;
  2018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  adcp->state    = ADC_ACTIVE;
  2018c6:	7027      	strb	r7, [r4, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  2018c8:	f04f 0c06 	mov.w	ip, #6
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  2018cc:	6812      	ldr	r2, [r2, #0]
  adcp->adc->SQR3  = grpp->sqr3;
  2018ce:	f04f 080a 	mov.w	r8, #10
  adcp->grpp     = grpp;
  2018d2:	6120      	str	r0, [r4, #16]
  adcp->samples  = samples;
  2018d4:	4863      	ldr	r0, [pc, #396]	; (201a64 <main+0x834>)
  adcp->depth    = depth;
  2018d6:	60e1      	str	r1, [r4, #12]
  adcp->samples  = samples;
  2018d8:	60a0      	str	r0, [r4, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  2018da:	60d0      	str	r0, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  2018dc:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
  2018de:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
  2018e0:	6810      	ldr	r0, [r2, #0]
  adcp->adc->SR    = 0;
  2018e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
  2018e4:	4308      	orrs	r0, r1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  2018e6:	4c60      	ldr	r4, [pc, #384]	; (201a68 <main+0x838>)
  dmaStreamEnable(adcp->dmastp);
  2018e8:	6010      	str	r0, [r2, #0]
    adcp->adc->CR2 = cr2;
  2018ea:	4a60      	ldr	r2, [pc, #384]	; (201a6c <main+0x83c>)
  adcp->adc->SR    = 0;
  2018ec:	601e      	str	r6, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  2018ee:	f8c3 c00c 	str.w	ip, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
  2018f2:	611e      	str	r6, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  2018f4:	62de      	str	r6, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  2018f6:	631e      	str	r6, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
  2018f8:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  2018fc:	605c      	str	r4, [r3, #4]
    adcp->adc->CR2 = cr2;
  2018fe:	609a      	str	r2, [r3, #8]
  201900:	f386 8811 	msr	BASEPRI, r6
  201904:	f38e 8811 	msr	BASEPRI, lr
  if (NULL != gptp->config->callback)
  201908:	686a      	ldr	r2, [r5, #4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  20190a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  20190e:	68eb      	ldr	r3, [r5, #12]
  if (NULL != gptp->config->callback)
  201910:	6852      	ldr	r2, [r2, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  201912:	702f      	strb	r7, [r5, #0]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  201914:	62d8      	str	r0, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  201916:	6159      	str	r1, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  201918:	625e      	str	r6, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  20191a:	611e      	str	r6, [r3, #16]
  if (NULL != gptp->config->callback)
  20191c:	b112      	cbz	r2, 201924 <main+0x6f4>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  20191e:	68da      	ldr	r2, [r3, #12]
  201920:	430a      	orrs	r2, r1
  201922:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  201924:	2185      	movs	r1, #133	; 0x85
  201926:	2200      	movs	r2, #0
  201928:	6019      	str	r1, [r3, #0]
  20192a:	f382 8811 	msr	BASEPRI, r2
  20192e:	4f50      	ldr	r7, [pc, #320]	; (201a70 <main+0x840>)
  201930:	2620      	movs	r6, #32
    /* Just set the limit (interval) of timer counter, you can use this function
    not only for ADC triggering, but start infinite counting of timer for callback processing */

    while (true)
       {
           chprintf(((BaseSequentialStream *)&SD7), "%d\n\r", value);
  201932:	4d50      	ldr	r5, [pc, #320]	; (201a74 <main+0x844>)
  201934:	4c50      	ldr	r4, [pc, #320]	; (201a78 <main+0x848>)
  201936:	683a      	ldr	r2, [r7, #0]
  201938:	4629      	mov	r1, r5
  20193a:	4620      	mov	r0, r4
  20193c:	f000 f968 	bl	201c10 <chprintf.constprop.0>
  201940:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  201944:	21c8      	movs	r1, #200	; 0xc8
  201946:	2008      	movs	r0, #8
  201948:	f7ff f80a 	bl	200960 <chSchGoSleepTimeoutS>
  20194c:	2300      	movs	r3, #0
  20194e:	f383 8811 	msr	BASEPRI, r3
  201952:	e7f0      	b.n	201936 <main+0x706>
  tp->state = CH_STATE_READY;
  201954:	f882 1020 	strb.w	r1, [r2, #32]
  201958:	e7fe      	b.n	201958 <main+0x728>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  20195a:	6c33      	ldr	r3, [r6, #64]	; 0x40
  20195c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  201960:	6433      	str	r3, [r6, #64]	; 0x40
  201962:	e6f7      	b.n	201754 <main+0x524>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
  201964:	4945      	ldr	r1, [pc, #276]	; (201a7c <main+0x84c>)
      b = dmaStreamAllocate(adcp->dmastp,
  201966:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  201968:	6808      	ldr	r0, [r1, #0]
  20196a:	7a51      	ldrb	r1, [r2, #9]
  20196c:	408b      	lsls	r3, r1
  20196e:	4203      	tst	r3, r0
  201970:	d143      	bne.n	2019fa <main+0x7ca>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
  201972:	4303      	orrs	r3, r0
  201974:	4f41      	ldr	r7, [pc, #260]	; (201a7c <main+0x84c>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  201976:	4842      	ldr	r0, [pc, #264]	; (201a80 <main+0x850>)
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  201978:	4e42      	ldr	r6, [pc, #264]	; (201a84 <main+0x854>)

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  20197a:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  20197e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
  201982:	603b      	str	r3, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  201984:	4f3e      	ldr	r7, [pc, #248]	; (201a80 <main+0x850>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  201986:	6044      	str	r4, [r0, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  201988:	f847 6031 	str.w	r6, [r7, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  20198c:	d004      	beq.n	201998 <main+0x768>
    rccEnableDMA1(false);
  20198e:	483e      	ldr	r0, [pc, #248]	; (201a88 <main+0x858>)
  201990:	6b01      	ldr	r1, [r0, #48]	; 0x30
  201992:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  201996:	6301      	str	r1, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
  201998:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
  20199c:	d004      	beq.n	2019a8 <main+0x778>
    rccEnableDMA2(false);
  20199e:	493a      	ldr	r1, [pc, #232]	; (201a88 <main+0x858>)
  2019a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  2019a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  2019a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  2019a8:	6813      	ldr	r3, [r2, #0]
  2019aa:	6819      	ldr	r1, [r3, #0]
  2019ac:	f021 011f 	bic.w	r1, r1, #31
  2019b0:	6019      	str	r1, [r3, #0]
  2019b2:	6818      	ldr	r0, [r3, #0]
  2019b4:	f010 0001 	ands.w	r0, r0, #1
  2019b8:	d1fb      	bne.n	2019b2 <main+0x782>
  2019ba:	7a11      	ldrb	r1, [r2, #8]
  2019bc:	f04f 0e3d 	mov.w	lr, #61	; 0x3d
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  2019c0:	2721      	movs	r7, #33	; 0x21
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019c2:	4e32      	ldr	r6, [pc, #200]	; (201a8c <main+0x85c>)
  dmaStreamDisable(dmastp);
  2019c4:	fa0e fe01 	lsl.w	lr, lr, r1
  2019c8:	6851      	ldr	r1, [r2, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019ca:	f04f 0c01 	mov.w	ip, #1
  2019ce:	f8c1 e000 	str.w	lr, [r1]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019d2:	f04f 0e60 	mov.w	lr, #96	; 0x60
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  2019d6:	6018      	str	r0, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  2019d8:	615f      	str	r7, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  2019da:	7a92      	ldrb	r2, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019dc:	f002 071f 	and.w	r7, r2, #31
  2019e0:	0950      	lsrs	r0, r2, #5
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019e2:	4432      	add	r2, r6
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019e4:	fa0c f107 	lsl.w	r1, ip, r7
  2019e8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019ec:	f882 e300 	strb.w	lr, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019f0:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019f4:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
  2019f8:	e000      	b.n	2019fc <main+0x7cc>
  2019fa:	6813      	ldr	r3, [r2, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  2019fc:	4a24      	ldr	r2, [pc, #144]	; (201a90 <main+0x860>)
    adcp->adc->CR1 = 0;
  2019fe:	2100      	movs	r1, #0
      rccEnableADC1(FALSE);
  201a00:	4e21      	ldr	r6, [pc, #132]	; (201a88 <main+0x858>)
    adcp->adc->CR2 = ADC_CR2_ADON;
  201a02:	2701      	movs	r7, #1
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  201a04:	609a      	str	r2, [r3, #8]
      rccEnableADC1(FALSE);
  201a06:	6c73      	ldr	r3, [r6, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  201a08:	4822      	ldr	r0, [pc, #136]	; (201a94 <main+0x864>)
      rccEnableADC1(FALSE);
  201a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    adcp->adc->CR1 = 0;
  201a0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      rccEnableADC1(FALSE);
  201a10:	6473      	str	r3, [r6, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  201a12:	6843      	ldr	r3, [r0, #4]
  201a14:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  201a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201a1c:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
  201a1e:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
  201a20:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
  201a22:	6097      	str	r7, [r2, #8]
  201a24:	e73a      	b.n	20189c <main+0x66c>
      rccEnableTIM1(FALSE);
  201a26:	4a18      	ldr	r2, [pc, #96]	; (201a88 <main+0x858>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201a28:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201a2c:	4917      	ldr	r1, [pc, #92]	; (201a8c <main+0x85c>)
  201a2e:	f04f 0c70 	mov.w	ip, #112	; 0x70
  201a32:	6c53      	ldr	r3, [r2, #68]	; 0x44
  201a34:	f043 0301 	orr.w	r3, r3, #1
  201a38:	6453      	str	r3, [r2, #68]	; 0x44
      gptp->clock = STM32_TIMCLK2;
  201a3a:	f640 036f 	movw	r3, #2159	; 0x86f
      rccResetTIM1();
  201a3e:	6a50      	ldr	r0, [r2, #36]	; 0x24
  201a40:	f040 0001 	orr.w	r0, r0, #1
  201a44:	6250      	str	r0, [r2, #36]	; 0x24
  201a46:	6256      	str	r6, [r2, #36]	; 0x24
      gptp->clock = STM32_TIMCLK2;
  201a48:	4a13      	ldr	r2, [pc, #76]	; (201a98 <main+0x868>)
  201a4a:	f881 c319 	strb.w	ip, [r1, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201a4e:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  201a52:	60aa      	str	r2, [r5, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201a54:	f8c1 e000 	str.w	lr, [r1]
  201a58:	e70e      	b.n	201878 <main+0x648>
  201a5a:	bf00      	nop
  201a5c:	40020800 	.word	0x40020800
  201a60:	080020e8 	.word	0x080020e8
  201a64:	20000a3c 	.word	0x20000a3c
  201a68:	04000100 	.word	0x04000100
  201a6c:	19000301 	.word	0x19000301
  201a70:	20000a60 	.word	0x20000a60
  201a74:	08002200 	.word	0x08002200
  201a78:	20000a64 	.word	0x20000a64
  201a7c:	20000a30 	.word	0x20000a30
  201a80:	200009b0 	.word	0x200009b0
  201a84:	00200da1 	.word	0x00200da1
  201a88:	40023800 	.word	0x40023800
  201a8c:	e000e100 	.word	0xe000e100
  201a90:	4001204c 	.word	0x4001204c
  201a94:	40012300 	.word	0x40012300
  201a98:	0cdfe600 	.word	0x0cdfe600
  201a9c:	00000000 	.word	0x00000000

00201aa0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  201aa0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201aa2:	4b33      	ldr	r3, [pc, #204]	; (201b70 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201aa4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  201aa8:	4a32      	ldr	r2, [pc, #200]	; (201b74 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201aaa:	4c33      	ldr	r4, [pc, #204]	; (201b78 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  201aac:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201aae:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  201ab0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201ab2:	681a      	ldr	r2, [r3, #0]
  201ab4:	f042 0201 	orr.w	r2, r2, #1
  201ab8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  201aba:	680b      	ldr	r3, [r1, #0]
  201abc:	079b      	lsls	r3, r3, #30
  201abe:	d5fc      	bpl.n	201aba <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201ac0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201ac2:	4a2b      	ldr	r2, [pc, #172]	; (201b70 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201ac4:	f023 0303 	bic.w	r3, r3, #3
  201ac8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  201aca:	688b      	ldr	r3, [r1, #8]
  201acc:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201ace:	6893      	ldr	r3, [r2, #8]
  201ad0:	f013 030c 	ands.w	r3, r3, #12
  201ad4:	d1fb      	bne.n	201ace <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201ad6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201ad8:	4925      	ldr	r1, [pc, #148]	; (201b70 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201ada:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  201ade:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201ae0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201ae2:	6813      	ldr	r3, [r2, #0]
  201ae4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201ae8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201aea:	680b      	ldr	r3, [r1, #0]
  201aec:	039d      	lsls	r5, r3, #14
  201aee:	d5fc      	bpl.n	201aea <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201af0:	4b22      	ldr	r3, [pc, #136]	; (201b7c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201af2:	4820      	ldr	r0, [pc, #128]	; (201b74 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201af4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201af6:	680b      	ldr	r3, [r1, #0]
  201af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  201afc:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201afe:	6843      	ldr	r3, [r0, #4]
  201b00:	045c      	lsls	r4, r3, #17
  201b02:	d5fc      	bpl.n	201afe <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201b04:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201b06:	4a1b      	ldr	r2, [pc, #108]	; (201b74 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201b0c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201b0e:	6853      	ldr	r3, [r2, #4]
  201b10:	03d9      	lsls	r1, r3, #15
  201b12:	d5fc      	bpl.n	201b0e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201b14:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201b16:	4917      	ldr	r1, [pc, #92]	; (201b74 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201b1c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201b1e:	684b      	ldr	r3, [r1, #4]
  201b20:	039a      	lsls	r2, r3, #14
  201b22:	d5fc      	bpl.n	201b1e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201b24:	4a12      	ldr	r2, [pc, #72]	; (201b70 <__early_init+0xd0>)
  201b26:	6813      	ldr	r3, [r2, #0]
  201b28:	019b      	lsls	r3, r3, #6
  201b2a:	d5fc      	bpl.n	201b26 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201b2c:	4b14      	ldr	r3, [pc, #80]	; (201b80 <__early_init+0xe0>)
  201b2e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201b32:	4d14      	ldr	r5, [pc, #80]	; (201b84 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201b34:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201b38:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201b3a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  201b3c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201b40:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201b44:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201b46:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201b48:	4909      	ldr	r1, [pc, #36]	; (201b70 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201b4a:	f043 0302 	orr.w	r3, r3, #2
  201b4e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201b50:	688b      	ldr	r3, [r1, #8]
  201b52:	f003 030c 	and.w	r3, r3, #12
  201b56:	2b08      	cmp	r3, #8
  201b58:	d1fa      	bne.n	201b50 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  201b5a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  201b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201b60:	644b      	str	r3, [r1, #68]	; 0x44
  201b62:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201b68:	bc30      	pop	{r4, r5}
  201b6a:	664b      	str	r3, [r1, #100]	; 0x64
  201b6c:	4770      	bx	lr
  201b6e:	bf00      	nop
  201b70:	40023800 	.word	0x40023800
  201b74:	40007000 	.word	0x40007000
  201b78:	10000400 	.word	0x10000400
  201b7c:	09406c08 	.word	0x09406c08
  201b80:	40023c00 	.word	0x40023c00
  201b84:	30999400 	.word	0x30999400
	...

00201b90 <chTMStartMeasurementX.constprop.32>:
  return DWT->CYCCNT;
  201b90:	4b01      	ldr	r3, [pc, #4]	; (201b98 <chTMStartMeasurementX.constprop.32+0x8>)
  201b92:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  201b94:	6083      	str	r3, [r0, #8]
  201b96:	4770      	bx	lr
  201b98:	e0001000 	.word	0xe0001000
  201b9c:	00000000 	.word	0x00000000

00201ba0 <chEvtBroadcastFlagsI.constprop.28>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201ba2:	4f17      	ldr	r7, [pc, #92]	; (201c00 <chEvtBroadcastFlagsI.constprop.28+0x60>)
  201ba4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201ba8:	42bc      	cmp	r4, r7
  201baa:	d021      	beq.n	201bf0 <chEvtBroadcastFlagsI.constprop.28+0x50>
  201bac:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  201bae:	2600      	movs	r6, #0
  201bb0:	e002      	b.n	201bb8 <chEvtBroadcastFlagsI.constprop.28+0x18>
    elp = elp->next;
  201bb2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201bb4:	42bc      	cmp	r4, r7
  201bb6:	d01b      	beq.n	201bf0 <chEvtBroadcastFlagsI.constprop.28+0x50>
    elp->flags |= flags;
  201bb8:	68e3      	ldr	r3, [r4, #12]
  201bba:	432b      	orrs	r3, r5
  201bbc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  201bbe:	b115      	cbz	r5, 201bc6 <chEvtBroadcastFlagsI.constprop.28+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  201bc0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201bc2:	4213      	tst	r3, r2
  201bc4:	d0f5      	beq.n	201bb2 <chEvtBroadcastFlagsI.constprop.28+0x12>
      chEvtSignalI(elp->listener, elp->events);
  201bc6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  201bc8:	68a3      	ldr	r3, [r4, #8]
  201bca:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201bcc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201bd0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201bd2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201bd4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201bd6:	d00c      	beq.n	201bf2 <chEvtBroadcastFlagsI.constprop.28+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201bd8:	2a0b      	cmp	r2, #11
  201bda:	d1ea      	bne.n	201bb2 <chEvtBroadcastFlagsI.constprop.28+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  201bdc:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  201bde:	ea32 0303 	bics.w	r3, r2, r3
  201be2:	d1e6      	bne.n	201bb2 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->u.rdymsg = MSG_OK;
  201be4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201be6:	f7ff f873 	bl	200cd0 <chSchReadyI>
    elp = elp->next;
  201bea:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201bec:	42bc      	cmp	r4, r7
  201bee:	d1e3      	bne.n	201bb8 <chEvtBroadcastFlagsI.constprop.28+0x18>
  201bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201bf2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  201bf4:	4213      	tst	r3, r2
  201bf6:	d0dc      	beq.n	201bb2 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->u.rdymsg = MSG_OK;
  201bf8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201bfa:	f7ff f869 	bl	200cd0 <chSchReadyI>
  201bfe:	e7f4      	b.n	201bea <chEvtBroadcastFlagsI.constprop.28+0x4a>
  201c00:	20000a64 	.word	0x20000a64
	...

00201c10 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  201c10:	b40e      	push	{r1, r2, r3}
  201c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c = *fmt++;
  201c16:	4e78      	ldr	r6, [pc, #480]	; (201df8 <chprintf.constprop.0+0x1e8>)
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  201c18:	b088      	sub	sp, #32
  int n = 0;
  201c1a:	2200      	movs	r2, #0
  201c1c:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 201dfc <chprintf.constprop.0+0x1ec>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  201c20:	ab12      	add	r3, sp, #72	; 0x48
  201c22:	1e75      	subs	r5, r6, #1
  int n = 0;
  201c24:	9201      	str	r2, [sp, #4]
  va_start(ap, fmt);
  201c26:	9304      	str	r3, [sp, #16]
  201c28:	4699      	mov	r9, r3
    if (*fmt == '-') {
  201c2a:	786b      	ldrb	r3, [r5, #1]
  201c2c:	2b2d      	cmp	r3, #45	; 0x2d
  201c2e:	f000 815c 	beq.w	201eea <chprintf.constprop.0+0x2da>
    if (*fmt == '0') {
  201c32:	7831      	ldrb	r1, [r6, #0]
    left_align = FALSE;
  201c34:	2300      	movs	r3, #0
    if (*fmt == '0') {
  201c36:	2930      	cmp	r1, #48	; 0x30
    left_align = FALSE;
  201c38:	9303      	str	r3, [sp, #12]
    if (*fmt == '0') {
  201c3a:	f000 815d 	beq.w	201ef8 <chprintf.constprop.0+0x2e8>
    filler = ' ';
  201c3e:	2720      	movs	r7, #32
  201c40:	1c72      	adds	r2, r6, #1
    width = 0;
  201c42:	2400      	movs	r4, #0
  201c44:	e007      	b.n	201c56 <chprintf.constprop.0+0x46>
        c = va_arg(ap, int);
  201c46:	f899 3000 	ldrb.w	r3, [r9]
  201c4a:	f109 0904 	add.w	r9, r9, #4
  201c4e:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  201c52:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  201c56:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  201c5a:	4615      	mov	r5, r2
      width = width * 10 + c;
  201c5c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  201c60:	b2db      	uxtb	r3, r3
  201c62:	2b09      	cmp	r3, #9
  201c64:	d9f3      	bls.n	201c4e <chprintf.constprop.0+0x3e>
      else if (c == '*')
  201c66:	292a      	cmp	r1, #42	; 0x2a
  201c68:	d0ed      	beq.n	201c46 <chprintf.constprop.0+0x36>
    if (c == '.') {
  201c6a:	292e      	cmp	r1, #46	; 0x2e
  201c6c:	f04f 0200 	mov.w	r2, #0
  201c70:	d04e      	beq.n	201d10 <chprintf.constprop.0+0x100>
    if (c == 'l' || c == 'L') {
  201c72:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  201c76:	2b4c      	cmp	r3, #76	; 0x4c
  201c78:	d159      	bne.n	201d2e <chprintf.constprop.0+0x11e>
      if (*fmt)
  201c7a:	f895 8000 	ldrb.w	r8, [r5]
  201c7e:	f1b8 0f00 	cmp.w	r8, #0
  201c82:	d003      	beq.n	201c8c <chprintf.constprop.0+0x7c>
        c = *fmt++;
  201c84:	4641      	mov	r1, r8
  201c86:	3501      	adds	r5, #1
  201c88:	f895 8000 	ldrb.w	r8, [r5]
    switch (c) {
  201c8c:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  201c90:	2b34      	cmp	r3, #52	; 0x34
  201c92:	f200 811e 	bhi.w	201ed2 <chprintf.constprop.0+0x2c2>
  201c96:	e8df f013 	tbh	[pc, r3, lsl #1]
  201c9a:	01b7      	.short	0x01b7
  201c9c:	011c011c 	.word	0x011c011c
  201ca0:	011c011c 	.word	0x011c011c
  201ca4:	011c01b7 	.word	0x011c01b7
  201ca8:	011c011c 	.word	0x011c011c
  201cac:	011c011c 	.word	0x011c011c
  201cb0:	011c016c 	.word	0x011c016c
  201cb4:	011c011c 	.word	0x011c011c
  201cb8:	011c011c 	.word	0x011c011c
  201cbc:	011c01ac 	.word	0x011c01ac
  201cc0:	01af011c 	.word	0x01af011c
  201cc4:	011c011c 	.word	0x011c011c
  201cc8:	011c011c 	.word	0x011c011c
  201ccc:	011c011c 	.word	0x011c011c
  201cd0:	011c011c 	.word	0x011c011c
  201cd4:	011c011c 	.word	0x011c011c
  201cd8:	01b700b5 	.word	0x01b700b5
  201cdc:	011c011c 	.word	0x011c011c
  201ce0:	011c011c 	.word	0x011c011c
  201ce4:	011c01b7 	.word	0x011c01b7
  201ce8:	011c011c 	.word	0x011c011c
  201cec:	011c011c 	.word	0x011c011c
  201cf0:	011c016c 	.word	0x011c016c
  201cf4:	011c011c 	.word	0x011c011c
  201cf8:	011c008b 	.word	0x011c008b
  201cfc:	011c01ac 	.word	0x011c01ac
  201d00:	01af011c 	.word	0x01af011c
          c = va_arg(ap, int);
  201d04:	f899 3000 	ldrb.w	r3, [r9]
  201d08:	f109 0904 	add.w	r9, r9, #4
        precision += c;
  201d0c:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  201d10:	f815 1b01 	ldrb.w	r1, [r5], #1
        precision *= 10;
  201d14:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  201d18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  201d1c:	b2db      	uxtb	r3, r3
  201d1e:	2b09      	cmp	r3, #9
  201d20:	d9f4      	bls.n	201d0c <chprintf.constprop.0+0xfc>
        else if (c == '*')
  201d22:	292a      	cmp	r1, #42	; 0x2a
  201d24:	d0ee      	beq.n	201d04 <chprintf.constprop.0+0xf4>
    if (c == 'l' || c == 'L') {
  201d26:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  201d2a:	2b4c      	cmp	r3, #76	; 0x4c
  201d2c:	d0a5      	beq.n	201c7a <chprintf.constprop.0+0x6a>
      is_long = (c >= 'A') && (c <= 'Z');
  201d2e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  201d32:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  201d36:	b2db      	uxtb	r3, r3
    switch (c) {
  201d38:	2834      	cmp	r0, #52	; 0x34
  201d3a:	f200 80c8 	bhi.w	201ece <chprintf.constprop.0+0x2be>
  201d3e:	e8df f010 	tbh	[pc, r0, lsl #1]
  201d42:	011f      	.short	0x011f
  201d44:	00c600c6 	.word	0x00c600c6
  201d48:	00c600c6 	.word	0x00c600c6
  201d4c:	00c6011f 	.word	0x00c6011f
  201d50:	00c600c6 	.word	0x00c600c6
  201d54:	00c600c6 	.word	0x00c600c6
  201d58:	00c60151 	.word	0x00c60151
  201d5c:	00c600c6 	.word	0x00c600c6
  201d60:	00c600c6 	.word	0x00c600c6
  201d64:	00c600e7 	.word	0x00c600e7
  201d68:	015e00c6 	.word	0x015e00c6
  201d6c:	00c600c6 	.word	0x00c600c6
  201d70:	00c600c6 	.word	0x00c600c6
  201d74:	00c600c6 	.word	0x00c600c6
  201d78:	00c600c6 	.word	0x00c600c6
  201d7c:	00c600c6 	.word	0x00c600c6
  201d80:	011f005f 	.word	0x011f005f
  201d84:	00c600c6 	.word	0x00c600c6
  201d88:	00c600c6 	.word	0x00c600c6
  201d8c:	00c6011f 	.word	0x00c6011f
  201d90:	00c600c6 	.word	0x00c600c6
  201d94:	00c600c6 	.word	0x00c600c6
  201d98:	00c60151 	.word	0x00c60151
  201d9c:	00c600c6 	.word	0x00c600c6
  201da0:	00c60035 	.word	0x00c60035
  201da4:	00c600e7 	.word	0x00c600e7
  201da8:	015e00c6 	.word	0x015e00c6
  201dac:	f895 8000 	ldrb.w	r8, [r5]
      if ((s = va_arg(ap, char *)) == 0)
  201db0:	f8d9 6000 	ldr.w	r6, [r9]
  201db4:	f109 0904 	add.w	r9, r9, #4
  201db8:	2e00      	cmp	r6, #0
  201dba:	f000 8137 	beq.w	20202c <chprintf.constprop.0+0x41c>
      for (p = s; *p && (--precision >= 0); p++)
  201dbe:	7833      	ldrb	r3, [r6, #0]
      if (precision == 0)
  201dc0:	2a00      	cmp	r2, #0
  201dc2:	f040 8130 	bne.w	202026 <chprintf.constprop.0+0x416>
      for (p = s; *p && (--precision >= 0); p++)
  201dc6:	2b00      	cmp	r3, #0
  201dc8:	f000 8143 	beq.w	202052 <chprintf.constprop.0+0x442>
  201dcc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  201dd0:	4632      	mov	r2, r6
  201dd2:	e001      	b.n	201dd8 <chprintf.constprop.0+0x1c8>
  201dd4:	3b01      	subs	r3, #1
  201dd6:	d403      	bmi.n	201de0 <chprintf.constprop.0+0x1d0>
  201dd8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  201ddc:	2900      	cmp	r1, #0
  201dde:	d1f9      	bne.n	201dd4 <chprintf.constprop.0+0x1c4>
  201de0:	1b92      	subs	r2, r2, r6
      filler = ' ';
  201de2:	2720      	movs	r7, #32
  201de4:	1e53      	subs	r3, r2, #1
    if ((width -= i) < 0)
  201de6:	1aa4      	subs	r4, r4, r2
  201de8:	9302      	str	r3, [sp, #8]
  201dea:	d518      	bpl.n	201e1e <chprintf.constprop.0+0x20e>
    while (--i >= 0) {
  201dec:	9b02      	ldr	r3, [sp, #8]
  201dee:	2b00      	cmp	r3, #0
  201df0:	f2c0 808c 	blt.w	201f0c <chprintf.constprop.0+0x2fc>
      width = 0;
  201df4:	2400      	movs	r4, #0
  201df6:	e02f      	b.n	201e58 <chprintf.constprop.0+0x248>
  201df8:	08002201 	.word	0x08002201
  201dfc:	20000a64 	.word	0x20000a64
  201e00:	f895 8000 	ldrb.w	r8, [r5]
      *p++ = va_arg(ap, int);
  201e04:	2200      	movs	r2, #0
  201e06:	f8d9 3000 	ldr.w	r3, [r9]
  201e0a:	ae08      	add	r6, sp, #32
  201e0c:	f109 0904 	add.w	r9, r9, #4
  201e10:	9202      	str	r2, [sp, #8]
      filler = ' ';
  201e12:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
  201e14:	2201      	movs	r2, #1
  201e16:	f806 3d0c 	strb.w	r3, [r6, #-12]!
    if ((width -= i) < 0)
  201e1a:	1aa4      	subs	r4, r4, r2
  201e1c:	d4e6      	bmi.n	201dec <chprintf.constprop.0+0x1dc>
    if (left_align == FALSE)
  201e1e:	9b03      	ldr	r3, [sp, #12]
  201e20:	2b00      	cmp	r3, #0
  201e22:	d16e      	bne.n	201f02 <chprintf.constprop.0+0x2f2>
  201e24:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  201e28:	2c00      	cmp	r4, #0
  201e2a:	d069      	beq.n	201f00 <chprintf.constprop.0+0x2f0>
      if (*s == '-' && filler == '0') {
  201e2c:	7833      	ldrb	r3, [r6, #0]
  201e2e:	2b2d      	cmp	r3, #45	; 0x2d
  201e30:	d102      	bne.n	201e38 <chprintf.constprop.0+0x228>
  201e32:	2f30      	cmp	r7, #48	; 0x30
  201e34:	f000 80ff 	beq.w	202036 <chprintf.constprop.0+0x426>
        streamPut(chp, (uint8_t)filler);
  201e38:	f8da 3000 	ldr.w	r3, [sl]
  201e3c:	4639      	mov	r1, r7
  201e3e:	4650      	mov	r0, sl
  201e40:	689b      	ldr	r3, [r3, #8]
  201e42:	4798      	blx	r3
      } while (++width != 0);
  201e44:	f11b 0b01 	adds.w	fp, fp, #1
  201e48:	d1f6      	bne.n	201e38 <chprintf.constprop.0+0x228>
  201e4a:	9b01      	ldr	r3, [sp, #4]
  201e4c:	4423      	add	r3, r4
  201e4e:	9301      	str	r3, [sp, #4]
    while (--i >= 0) {
  201e50:	9b02      	ldr	r3, [sp, #8]
  201e52:	2b00      	cmp	r3, #0
  201e54:	db5a      	blt.n	201f0c <chprintf.constprop.0+0x2fc>
  201e56:	465c      	mov	r4, fp
  201e58:	f8dd b008 	ldr.w	fp, [sp, #8]
      streamPut(chp, (uint8_t)*s++);
  201e5c:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  201e60:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  201e64:	f816 1b01 	ldrb.w	r1, [r6], #1
  201e68:	4650      	mov	r0, sl
  201e6a:	689b      	ldr	r3, [r3, #8]
  201e6c:	4798      	blx	r3
    while (--i >= 0) {
  201e6e:	f1bb 3fff 	cmp.w	fp, #4294967295
  201e72:	d1f3      	bne.n	201e5c <chprintf.constprop.0+0x24c>
  201e74:	9b01      	ldr	r3, [sp, #4]
  201e76:	9a02      	ldr	r2, [sp, #8]
  201e78:	3301      	adds	r3, #1
  201e7a:	441a      	add	r2, r3
  201e7c:	9201      	str	r2, [sp, #4]
    while (width) {
  201e7e:	2c00      	cmp	r4, #0
  201e80:	d044      	beq.n	201f0c <chprintf.constprop.0+0x2fc>
  201e82:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)filler);
  201e84:	f8da 3000 	ldr.w	r3, [sl]
  201e88:	4639      	mov	r1, r7
  201e8a:	4650      	mov	r0, sl
  201e8c:	689b      	ldr	r3, [r3, #8]
  201e8e:	4798      	blx	r3
    while (width) {
  201e90:	3e01      	subs	r6, #1
  201e92:	d1f7      	bne.n	201e84 <chprintf.constprop.0+0x274>
  201e94:	9b01      	ldr	r3, [sp, #4]
  201e96:	441c      	add	r4, r3
  201e98:	1b64      	subs	r4, r4, r5
  201e9a:	4643      	mov	r3, r8
      streamPut(chp, (uint8_t)c);
  201e9c:	486f      	ldr	r0, [pc, #444]	; (20205c <chprintf.constprop.0+0x44c>)
    c = *fmt++;
  201e9e:	1c6e      	adds	r6, r5, #1
      streamPut(chp, (uint8_t)c);
  201ea0:	4619      	mov	r1, r3
  201ea2:	192a      	adds	r2, r5, r4
    if (c == 0)
  201ea4:	b16b      	cbz	r3, 201ec2 <chprintf.constprop.0+0x2b2>
    if (c != '%') {
  201ea6:	2b25      	cmp	r3, #37	; 0x25
  201ea8:	d01a      	beq.n	201ee0 <chprintf.constprop.0+0x2d0>
      streamPut(chp, (uint8_t)c);
  201eaa:	f8da 3000 	ldr.w	r3, [sl]
  201eae:	4635      	mov	r5, r6
  201eb0:	689b      	ldr	r3, [r3, #8]
  201eb2:	4798      	blx	r3
  201eb4:	7833      	ldrb	r3, [r6, #0]
  201eb6:	4869      	ldr	r0, [pc, #420]	; (20205c <chprintf.constprop.0+0x44c>)
  201eb8:	192a      	adds	r2, r5, r4
  201eba:	4619      	mov	r1, r3
    c = *fmt++;
  201ebc:	1c6e      	adds	r6, r5, #1
    if (c == 0)
  201ebe:	2b00      	cmp	r3, #0
  201ec0:	d1f1      	bne.n	201ea6 <chprintf.constprop.0+0x296>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  201ec2:	4610      	mov	r0, r2
  201ec4:	b008      	add	sp, #32
  201ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201eca:	b003      	add	sp, #12
  201ecc:	4770      	bx	lr
  201ece:	f895 8000 	ldrb.w	r8, [r5]
      *p++ = c;
  201ed2:	ae08      	add	r6, sp, #32
  201ed4:	2300      	movs	r3, #0
  201ed6:	2201      	movs	r2, #1
  201ed8:	9302      	str	r3, [sp, #8]
  201eda:	f806 1d0c 	strb.w	r1, [r6, #-12]!
  201ede:	e79c      	b.n	201e1a <chprintf.constprop.0+0x20a>
    if (*fmt == '-') {
  201ee0:	786b      	ldrb	r3, [r5, #1]
  201ee2:	9201      	str	r2, [sp, #4]
  201ee4:	2b2d      	cmp	r3, #45	; 0x2d
  201ee6:	f47f aea4 	bne.w	201c32 <chprintf.constprop.0+0x22>
      fmt++;
  201eea:	1cae      	adds	r6, r5, #2
    if (*fmt == '0') {
  201eec:	7831      	ldrb	r1, [r6, #0]
      left_align = TRUE;
  201eee:	2301      	movs	r3, #1
    if (*fmt == '0') {
  201ef0:	2930      	cmp	r1, #48	; 0x30
      left_align = TRUE;
  201ef2:	9303      	str	r3, [sp, #12]
    if (*fmt == '0') {
  201ef4:	f47f aea3 	bne.w	201c3e <chprintf.constprop.0+0x2e>
  201ef8:	7871      	ldrb	r1, [r6, #1]
      filler = '0';
  201efa:	2730      	movs	r7, #48	; 0x30
      fmt++;
  201efc:	3601      	adds	r6, #1
  201efe:	e69f      	b.n	201c40 <chprintf.constprop.0+0x30>
    if (width < 0) {
  201f00:	465c      	mov	r4, fp
    while (--i >= 0) {
  201f02:	9b02      	ldr	r3, [sp, #8]
  201f04:	2b00      	cmp	r3, #0
  201f06:	daa7      	bge.n	201e58 <chprintf.constprop.0+0x248>
    while (width) {
  201f08:	2c00      	cmp	r4, #0
  201f0a:	d1ba      	bne.n	201e82 <chprintf.constprop.0+0x272>
  201f0c:	9c01      	ldr	r4, [sp, #4]
  201f0e:	e7c3      	b.n	201e98 <chprintf.constprop.0+0x288>
    switch (c) {
  201f10:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  201f14:	2b19      	cmp	r3, #25
  201f16:	d969      	bls.n	201fec <chprintf.constprop.0+0x3dc>
        l = va_arg(ap, unsigned int);
  201f18:	f8d9 6000 	ldr.w	r6, [r9]
  201f1c:	f109 0904 	add.w	r9, r9, #4
  201f20:	f895 8000 	ldrb.w	r8, [r5]
  q = p + MAX_FILLER;
  201f24:	f10d 011f 	add.w	r1, sp, #31
  201f28:	e000      	b.n	201f2c <chprintf.constprop.0+0x31c>
  } while ((ll /= radix) != 0);
  201f2a:	4601      	mov	r1, r0
    *--q = i;
  201f2c:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  201f2e:	fbb6 f2fe 	udiv	r2, r6, lr
  201f32:	fb0e 6c12 	mls	ip, lr, r2, r6
    l /= radix;
  201f36:	4616      	mov	r6, r2
    i += '0';
  201f38:	f10c 0330 	add.w	r3, ip, #48	; 0x30
    if (i > '9')
  201f3c:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  201f3e:	bfc8      	it	gt
  201f40:	f10c 0337 	addgt.w	r3, ip, #55	; 0x37
    *--q = i;
  201f44:	b2db      	uxtb	r3, r3
  201f46:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  201f4a:	2a00      	cmp	r2, #0
  201f4c:	d1ed      	bne.n	201f2a <chprintf.constprop.0+0x31a>
  i = (int)(p + MAX_FILLER - q);
  201f4e:	f10d 021f 	add.w	r2, sp, #31
  201f52:	f10d 0b14 	add.w	fp, sp, #20
  201f56:	1a12      	subs	r2, r2, r0
  201f58:	465e      	mov	r6, fp
  201f5a:	4410      	add	r0, r2
  201f5c:	e001      	b.n	201f62 <chprintf.constprop.0+0x352>
  201f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  201f62:	4288      	cmp	r0, r1
    *p++ = *q++;
  201f64:	f806 3b01 	strb.w	r3, [r6], #1
  while (--i);
  201f68:	d1f9      	bne.n	201f5e <chprintf.constprop.0+0x34e>
  201f6a:	1e53      	subs	r3, r2, #1
    s = tmpbuf;
  201f6c:	465e      	mov	r6, fp
  201f6e:	9302      	str	r3, [sp, #8]
  201f70:	e753      	b.n	201e1a <chprintf.constprop.0+0x20a>
    switch (c) {
  201f72:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  201f76:	f8d9 6000 	ldr.w	r6, [r9]
  201f7a:	f109 0904 	add.w	r9, r9, #4
  201f7e:	e7d1      	b.n	201f24 <chprintf.constprop.0+0x314>
      if (is_long)
  201f80:	2b19      	cmp	r3, #25
  201f82:	d93f      	bls.n	202004 <chprintf.constprop.0+0x3f4>
        l = va_arg(ap, int);
  201f84:	f8d9 1000 	ldr.w	r1, [r9]
  201f88:	f109 0904 	add.w	r9, r9, #4
  201f8c:	f895 8000 	ldrb.w	r8, [r5]
      if (l < 0) {
  201f90:	2900      	cmp	r1, #0
  201f92:	db3f      	blt.n	202014 <chprintf.constprop.0+0x404>
    p = tmpbuf;
  201f94:	f10d 0b14 	add.w	fp, sp, #20
  201f98:	465a      	mov	r2, fp
  q = p + MAX_FILLER;
  201f9a:	f102 030b 	add.w	r3, r2, #11
    i = (int)(l % radix);
  201f9e:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 202064 <chprintf.constprop.0+0x454>
  q = p + MAX_FILLER;
  201fa2:	4618      	mov	r0, r3
  201fa4:	9302      	str	r3, [sp, #8]
    i = (int)(l % radix);
  201fa6:	fbac 6301 	umull	r6, r3, ip, r1
  201faa:	08db      	lsrs	r3, r3, #3
  201fac:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
  201fb0:	461e      	mov	r6, r3
  201fb2:	eba1 034e 	sub.w	r3, r1, lr, lsl #1
  } while ((ll /= radix) != 0);
  201fb6:	4631      	mov	r1, r6
    i += '0';
  201fb8:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  201fba:	b2db      	uxtb	r3, r3
  201fbc:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  201fc0:	2e00      	cmp	r6, #0
  201fc2:	d1f0      	bne.n	201fa6 <chprintf.constprop.0+0x396>
  i = (int)(p + MAX_FILLER - q);
  201fc4:	9902      	ldr	r1, [sp, #8]
  201fc6:	1a09      	subs	r1, r1, r0
  201fc8:	4411      	add	r1, r2
  201fca:	e001      	b.n	201fd0 <chprintf.constprop.0+0x3c0>
  201fcc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  201fd0:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  201fd4:	428a      	cmp	r2, r1
  201fd6:	d1f9      	bne.n	201fcc <chprintf.constprop.0+0x3bc>
  201fd8:	eba2 020b 	sub.w	r2, r2, fp
    s = tmpbuf;
  201fdc:	465e      	mov	r6, fp
  201fde:	1e53      	subs	r3, r2, #1
  201fe0:	9302      	str	r3, [sp, #8]
  201fe2:	e71a      	b.n	201e1a <chprintf.constprop.0+0x20a>
      if (is_long)
  201fe4:	2b19      	cmp	r3, #25
    switch (c) {
  201fe6:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  201fea:	d895      	bhi.n	201f18 <chprintf.constprop.0+0x308>
  201fec:	f895 8000 	ldrb.w	r8, [r5]
  201ff0:	e7c1      	b.n	201f76 <chprintf.constprop.0+0x366>
    switch (c) {
  201ff2:	f04f 0e0a 	mov.w	lr, #10
  201ff6:	e7be      	b.n	201f76 <chprintf.constprop.0+0x366>
  201ff8:	f04f 0e10 	mov.w	lr, #16
  201ffc:	e7bb      	b.n	201f76 <chprintf.constprop.0+0x366>
  201ffe:	f04f 0e10 	mov.w	lr, #16
  202002:	e787      	b.n	201f14 <chprintf.constprop.0+0x304>
  202004:	f895 8000 	ldrb.w	r8, [r5]
        l = va_arg(ap, long);
  202008:	f8d9 1000 	ldr.w	r1, [r9]
  20200c:	f109 0904 	add.w	r9, r9, #4
      if (l < 0) {
  202010:	2900      	cmp	r1, #0
  202012:	dabf      	bge.n	201f94 <chprintf.constprop.0+0x384>
        *p++ = '-';
  202014:	232d      	movs	r3, #45	; 0x2d
        l = -l;
  202016:	4249      	negs	r1, r1
        *p++ = '-';
  202018:	f10d 0215 	add.w	r2, sp, #21
  20201c:	f10d 0b14 	add.w	fp, sp, #20
  202020:	f88d 3014 	strb.w	r3, [sp, #20]
  202024:	e7b9      	b.n	201f9a <chprintf.constprop.0+0x38a>
      for (p = s; *p && (--precision >= 0); p++)
  202026:	b1a3      	cbz	r3, 202052 <chprintf.constprop.0+0x442>
  202028:	1e53      	subs	r3, r2, #1
  20202a:	e6d1      	b.n	201dd0 <chprintf.constprop.0+0x1c0>
      if (precision == 0)
  20202c:	b90a      	cbnz	r2, 202032 <chprintf.constprop.0+0x422>
        precision = 32767;
  20202e:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  202032:	4e0b      	ldr	r6, [pc, #44]	; (202060 <chprintf.constprop.0+0x450>)
  202034:	e7f8      	b.n	202028 <chprintf.constprop.0+0x418>
        n++;
  202036:	9a01      	ldr	r2, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
  202038:	212d      	movs	r1, #45	; 0x2d
  20203a:	f8da 3000 	ldr.w	r3, [sl]
  20203e:	3601      	adds	r6, #1
        n++;
  202040:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  202042:	4806      	ldr	r0, [pc, #24]	; (20205c <chprintf.constprop.0+0x44c>)
  202044:	689b      	ldr	r3, [r3, #8]
        n++;
  202046:	9201      	str	r2, [sp, #4]
  202048:	9a02      	ldr	r2, [sp, #8]
  20204a:	3a01      	subs	r2, #1
  20204c:	9202      	str	r2, [sp, #8]
        streamPut(chp, (uint8_t)*s++);
  20204e:	4798      	blx	r3
  202050:	e6f2      	b.n	201e38 <chprintf.constprop.0+0x228>
      for (p = s; *p && (--precision >= 0); p++)
  202052:	f04f 33ff 	mov.w	r3, #4294967295
  202056:	2720      	movs	r7, #32
  202058:	9302      	str	r3, [sp, #8]
  20205a:	e6e0      	b.n	201e1e <chprintf.constprop.0+0x20e>
  20205c:	20000a64 	.word	0x20000a64
  202060:	08002228 	.word	0x08002228
  202064:	cccccccd 	.word	0xcccccccd
