
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 f9b7 	bl	201590 <__core_init>
  200222:	f001 f8b5 	bl	201390 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 f951 	bl	201510 <__init_ram_areas>
  20026e:	f001 f987 	bl	201580 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 fced 	bl	200c60 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 b96b 	b.w	201570 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	080016fc 	.word	0x080016fc
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020044 	.word	0x20020044
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000a10 	.word	0x20000a10
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 f8c6 	bl	201480 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 f8ec 	bl	2014d0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <chTMStartMeasurementX.constprop.23>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200300:	4b01      	ldr	r3, [pc, #4]	; (200308 <chTMStartMeasurementX.constprop.23+0x8>)
  200302:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  200304:	6083      	str	r3, [r0, #8]
  200306:	4770      	bx	lr
  200308:	e0001000 	.word	0xe0001000
  20030c:	00000000 	.word	0x00000000

00200310 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200310:	4a02      	ldr	r2, [pc, #8]	; (20031c <notify7+0xc>)
  200312:	6813      	ldr	r3, [r2, #0]
  200314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200318:	6013      	str	r3, [r2, #0]
  20031a:	4770      	bx	lr
  20031c:	40007800 	.word	0x40007800

00200320 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200320:	b470      	push	{r4, r5, r6}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200322:	2320      	movs	r3, #32
  200324:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200328:	4e0d      	ldr	r6, [pc, #52]	; (200360 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20032a:	1e4a      	subs	r2, r1, #1
  20032c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20032e:	4c0d      	ldr	r4, [pc, #52]	; (200364 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200330:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200332:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200334:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200336:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200338:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20033a:	1858      	adds	r0, r3, r1
  20033c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20033e:	1a23      	subs	r3, r4, r0
  200340:	429a      	cmp	r2, r3
  200342:	d806      	bhi.n	200352 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200344:	4402      	add	r2, r0
  200346:	2300      	movs	r3, #0
  200348:	6032      	str	r2, [r6, #0]
  20034a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20034e:	bc70      	pop	{r4, r5, r6}
  200350:	4770      	bx	lr
    return NULL;
  200352:	2000      	movs	r0, #0
  200354:	2300      	movs	r3, #0
  200356:	f383 8811 	msr	BASEPRI, r3
}
  20035a:	bc70      	pop	{r4, r5, r6}
  20035c:	4770      	bx	lr
  20035e:	bf00      	nop
  200360:	200009ec 	.word	0x200009ec
  200364:	200009e8 	.word	0x200009e8
	...

00200370 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  200370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200374:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  200378:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  20037c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  200380:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200384:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200386:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  200388:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  20038c:	f04f 0a0f 	mov.w	sl, #15
  200390:	e00e      	b.n	2003b0 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200392:	6a03      	ldr	r3, [r0, #32]
  200394:	ea23 0404 	bic.w	r4, r3, r4
  200398:	4325      	orrs	r5, r4
  20039a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20039c:	0849      	lsrs	r1, r1, #1
  20039e:	d047      	beq.n	200430 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  2003a0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  2003a4:	3601      	adds	r6, #1
    ospeedr <<= 2;
  2003a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  2003aa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  2003ae:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  2003b0:	07cb      	lsls	r3, r1, #31
  2003b2:	d5f3      	bpl.n	20039c <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  2003b4:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2003b6:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  2003b8:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2003bc:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  2003c0:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  2003c4:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  2003c8:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2003cc:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  2003d0:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2003d4:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  2003d8:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  2003dc:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  2003e0:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2003e4:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2003e8:	ea6f 0303 	mvn.w	r3, r3
  2003ec:	f8d0 b008 	ldr.w	fp, [r0, #8]
  2003f0:	ea0b 0b03 	and.w	fp, fp, r3
  2003f4:	ea4b 0b0c 	orr.w	fp, fp, ip
  2003f8:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2003fc:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  200400:	ea03 0b0b 	and.w	fp, r3, fp
  200404:	ea4b 0b0e 	orr.w	fp, fp, lr
  200408:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  20040c:	d012      	beq.n	200434 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  20040e:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  200412:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  200414:	ea03 030b 	and.w	r3, r3, fp
  200418:	ea43 0307 	orr.w	r3, r3, r7
  20041c:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  20041e:	d9b8      	bls.n	200392 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200420:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  200422:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200424:	ea23 0404 	bic.w	r4, r3, r4
  200428:	ea45 0504 	orr.w	r5, r5, r4
  20042c:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  20042e:	d1b7      	bne.n	2003a0 <_pal_lld_setgroupmode+0x30>
  200430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  200434:	2e07      	cmp	r6, #7
  200436:	d80a      	bhi.n	20044e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200438:	f8d0 b020 	ldr.w	fp, [r0, #32]
  20043c:	ea2b 0404 	bic.w	r4, fp, r4
  200440:	4325      	orrs	r5, r4
  200442:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  200444:	6804      	ldr	r4, [r0, #0]
  200446:	4023      	ands	r3, r4
  200448:	433b      	orrs	r3, r7
  20044a:	6003      	str	r3, [r0, #0]
  20044c:	e7a6      	b.n	20039c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20044e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  200452:	ea2b 0404 	bic.w	r4, fp, r4
  200456:	4325      	orrs	r5, r4
  200458:	6245      	str	r5, [r0, #36]	; 0x24
  20045a:	e7f3      	b.n	200444 <_pal_lld_setgroupmode+0xd4>
  20045c:	0000      	movs	r0, r0
	...

00200460 <_port_irq_epilogue>:
  200460:	2320      	movs	r3, #32
  200462:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200466:	4b11      	ldr	r3, [pc, #68]	; (2004ac <_port_irq_epilogue+0x4c>)
  200468:	685b      	ldr	r3, [r3, #4]
  20046a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20046e:	d102      	bne.n	200476 <_port_irq_epilogue+0x16>
  200470:	f383 8811 	msr	BASEPRI, r3
  200474:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200476:	b480      	push	{r7}
  200478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20047a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20047e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200482:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200486:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20048a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20048e:	4a08      	ldr	r2, [pc, #32]	; (2004b0 <_port_irq_epilogue+0x50>)
  200490:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200492:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200494:	6889      	ldr	r1, [r1, #8]
  200496:	6892      	ldr	r2, [r2, #8]
  200498:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20049a:	bf8c      	ite	hi
  20049c:	4a05      	ldrhi	r2, [pc, #20]	; (2004b4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20049e:	4a06      	ldrls	r2, [pc, #24]	; (2004b8 <_port_irq_epilogue+0x58>)
  2004a0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2004a4:	46bd      	mov	sp, r7
  2004a6:	bc80      	pop	{r7}
  2004a8:	4770      	bx	lr
  2004aa:	bf00      	nop
  2004ac:	e000ed00 	.word	0xe000ed00
  2004b0:	2000087c 	.word	0x2000087c
  2004b4:	002002f5 	.word	0x002002f5
  2004b8:	002002f8 	.word	0x002002f8
  2004bc:	00000000 	.word	0x00000000

002004c0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  2004c0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  2004c2:	4d17      	ldr	r5, [pc, #92]	; (200520 <VectorB4+0x60>)
  2004c4:	69ab      	ldr	r3, [r5, #24]
  2004c6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  2004c8:	68da      	ldr	r2, [r3, #12]
  2004ca:	4014      	ands	r4, r2
  2004cc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  2004ce:	43d2      	mvns	r2, r2
  2004d0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  2004d2:	07a3      	lsls	r3, r4, #30
  2004d4:	d504      	bpl.n	2004e0 <VectorB4+0x20>
      (pwmp->config->channels[0].callback != NULL))
  2004d6:	686b      	ldr	r3, [r5, #4]
  2004d8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  2004da:	b10b      	cbz	r3, 2004e0 <VectorB4+0x20>
    pwmp->config->channels[0].callback(pwmp);
  2004dc:	4628      	mov	r0, r5
  2004de:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  2004e0:	0760      	lsls	r0, r4, #29
  2004e2:	d504      	bpl.n	2004ee <VectorB4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  2004e4:	686b      	ldr	r3, [r5, #4]
  2004e6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  2004e8:	b10b      	cbz	r3, 2004ee <VectorB4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  2004ea:	480d      	ldr	r0, [pc, #52]	; (200520 <VectorB4+0x60>)
  2004ec:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  2004ee:	0721      	lsls	r1, r4, #28
  2004f0:	d504      	bpl.n	2004fc <VectorB4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  2004f2:	686b      	ldr	r3, [r5, #4]
  2004f4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  2004f6:	b10b      	cbz	r3, 2004fc <VectorB4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  2004f8:	4809      	ldr	r0, [pc, #36]	; (200520 <VectorB4+0x60>)
  2004fa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  2004fc:	06e2      	lsls	r2, r4, #27
  2004fe:	d504      	bpl.n	20050a <VectorB4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  200500:	686b      	ldr	r3, [r5, #4]
  200502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200504:	b10b      	cbz	r3, 20050a <VectorB4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  200506:	4806      	ldr	r0, [pc, #24]	; (200520 <VectorB4+0x60>)
  200508:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  20050a:	07e3      	lsls	r3, r4, #31
  20050c:	d504      	bpl.n	200518 <VectorB4+0x58>
  20050e:	686b      	ldr	r3, [r5, #4]
  200510:	689b      	ldr	r3, [r3, #8]
  200512:	b10b      	cbz	r3, 200518 <VectorB4+0x58>
    pwmp->config->callback(pwmp);
  200514:	4802      	ldr	r0, [pc, #8]	; (200520 <VectorB4+0x60>)
  200516:	4798      	blx	r3
}
  200518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
  20051c:	f7ff bfa0 	b.w	200460 <_port_irq_epilogue>
  200520:	20000800 	.word	0x20000800
	...

00200530 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200532:	2720      	movs	r7, #32
  200534:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200538:	4d12      	ldr	r5, [pc, #72]	; (200584 <SysTick_Handler+0x54>)
  20053a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20053c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20053e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200540:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200544:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200546:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200548:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20054a:	d013      	beq.n	200574 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20054c:	891c      	ldrh	r4, [r3, #8]
  20054e:	3c01      	subs	r4, #1
  200550:	b2a4      	uxth	r4, r4
  200552:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200554:	b974      	cbnz	r4, 200574 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200556:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200558:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20055a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20055c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20055e:	61ea      	str	r2, [r5, #28]
  200560:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200564:	6918      	ldr	r0, [r3, #16]
  200566:	4788      	blx	r1
  200568:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20056c:	69eb      	ldr	r3, [r5, #28]
  20056e:	891a      	ldrh	r2, [r3, #8]
  200570:	2a00      	cmp	r2, #0
  200572:	d0f0      	beq.n	200556 <SysTick_Handler+0x26>
  200574:	2300      	movs	r3, #0
  200576:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  20057a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20057e:	f7ff bf6f 	b.w	200460 <_port_irq_epilogue>
  200582:	bf00      	nop
  200584:	2000087c 	.word	0x2000087c
	...

00200590 <SVC_Handler>:
void SVC_Handler(void) {
  200590:	b480      	push	{r7}
  200592:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200594:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200598:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20059a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20059e:	2300      	movs	r3, #0
  2005a0:	f383 8811 	msr	BASEPRI, r3
}
  2005a4:	46bd      	mov	sp, r7
  2005a6:	bc80      	pop	{r7}
  2005a8:	4770      	bx	lr
  2005aa:	bf00      	nop
  2005ac:	0000      	movs	r0, r0
	...

002005b0 <chTMStopMeasurementX>:
  2005b0:	4b0e      	ldr	r3, [pc, #56]	; (2005ec <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  2005b2:	6882      	ldr	r2, [r0, #8]
  2005b4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2005b6:	490e      	ldr	r1, [pc, #56]	; (2005f0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  2005b8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  2005ba:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  2005bc:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2005be:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2005c0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2005c2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2005c4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2005c6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2005c8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2005ca:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2005ce:	18e4      	adds	r4, r4, r3
  2005d0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2005d4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2005d6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2005d8:	bf88      	it	hi
  2005da:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2005dc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2005de:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2005e2:	bf38      	it	cc
  2005e4:	6003      	strcc	r3, [r0, #0]
}
  2005e6:	bc30      	pop	{r4, r5}
  2005e8:	4770      	bx	lr
  2005ea:	bf00      	nop
  2005ec:	e0001000 	.word	0xe0001000
  2005f0:	2000087c 	.word	0x2000087c
	...

00200600 <wakeup>:
  200600:	2320      	movs	r3, #32
  200602:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  200606:	f890 3020 	ldrb.w	r3, [r0, #32]
  20060a:	2b07      	cmp	r3, #7
  20060c:	d80e      	bhi.n	20062c <wakeup+0x2c>
  20060e:	e8df f003 	tbb	[pc, r3]
  200612:	0d28      	.short	0x0d28
  200614:	0408240d 	.word	0x0408240d
  200618:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20061a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20061c:	6893      	ldr	r3, [r2, #8]
  20061e:	3301      	adds	r3, #1
  200620:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200622:	e890 000c 	ldmia.w	r0, {r2, r3}
  200626:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200628:	6802      	ldr	r2, [r0, #0]
  20062a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20062c:	2200      	movs	r2, #0
  20062e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200630:	4b0e      	ldr	r3, [pc, #56]	; (20066c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200632:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200636:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200638:	f04f 34ff 	mov.w	r4, #4294967295
  20063c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20063e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200640:	689a      	ldr	r2, [r3, #8]
  200642:	428a      	cmp	r2, r1
  200644:	d2fb      	bcs.n	20063e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200646:	685a      	ldr	r2, [r3, #4]
  200648:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20064a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20064c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20064e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200650:	6058      	str	r0, [r3, #4]
  200652:	f381 8811 	msr	BASEPRI, r1
}
  200656:	bc10      	pop	{r4}
  200658:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20065a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20065c:	2200      	movs	r2, #0
  20065e:	601a      	str	r2, [r3, #0]
  200660:	e7e4      	b.n	20062c <wakeup+0x2c>
  200662:	2300      	movs	r3, #0
  200664:	f383 8811 	msr	BASEPRI, r3
  200668:	4770      	bx	lr
  20066a:	bf00      	nop
  20066c:	2000087c 	.word	0x2000087c

00200670 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  200670:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  200672:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  200674:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  200676:	4b08      	ldr	r3, [pc, #32]	; (200698 <chSchReadyI+0x28>)
  200678:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  20067a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  20067e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200680:	689a      	ldr	r2, [r3, #8]
  200682:	428a      	cmp	r2, r1
  200684:	d2fb      	bcs.n	20067e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  200686:	685a      	ldr	r2, [r3, #4]
}
  200688:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  20068a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20068c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  20068e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200690:	605c      	str	r4, [r3, #4]
}
  200692:	bc10      	pop	{r4}
  200694:	4770      	bx	lr
  200696:	bf00      	nop
  200698:	2000087c 	.word	0x2000087c
  20069c:	00000000 	.word	0x00000000

002006a0 <chEvtBroadcastFlagsI.constprop.19>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2006a2:	4f17      	ldr	r7, [pc, #92]	; (200700 <chEvtBroadcastFlagsI.constprop.19+0x60>)
  2006a4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2006a8:	42bc      	cmp	r4, r7
  2006aa:	d021      	beq.n	2006f0 <chEvtBroadcastFlagsI.constprop.19+0x50>
  2006ac:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2006ae:	2600      	movs	r6, #0
  2006b0:	e002      	b.n	2006b8 <chEvtBroadcastFlagsI.constprop.19+0x18>
    elp = elp->next;
  2006b2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2006b4:	42bc      	cmp	r4, r7
  2006b6:	d01b      	beq.n	2006f0 <chEvtBroadcastFlagsI.constprop.19+0x50>
    elp->flags |= flags;
  2006b8:	68e3      	ldr	r3, [r4, #12]
  2006ba:	432b      	orrs	r3, r5
  2006bc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2006be:	b115      	cbz	r5, 2006c6 <chEvtBroadcastFlagsI.constprop.19+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2006c0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2006c2:	4213      	tst	r3, r2
  2006c4:	d0f5      	beq.n	2006b2 <chEvtBroadcastFlagsI.constprop.19+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2006c6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2006c8:	68a3      	ldr	r3, [r4, #8]
  2006ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2006cc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2006d0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2006d2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2006d4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2006d6:	d00c      	beq.n	2006f2 <chEvtBroadcastFlagsI.constprop.19+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2006d8:	2a0b      	cmp	r2, #11
  2006da:	d1ea      	bne.n	2006b2 <chEvtBroadcastFlagsI.constprop.19+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2006dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2006de:	ea32 0303 	bics.w	r3, r2, r3
  2006e2:	d1e6      	bne.n	2006b2 <chEvtBroadcastFlagsI.constprop.19+0x12>
    tp->u.rdymsg = MSG_OK;
  2006e4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2006e6:	f7ff ffc3 	bl	200670 <chSchReadyI>
    elp = elp->next;
  2006ea:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2006ec:	42bc      	cmp	r4, r7
  2006ee:	d1e3      	bne.n	2006b8 <chEvtBroadcastFlagsI.constprop.19+0x18>
  2006f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2006f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  2006f4:	4213      	tst	r3, r2
  2006f6:	d0dc      	beq.n	2006b2 <chEvtBroadcastFlagsI.constprop.19+0x12>
    tp->u.rdymsg = MSG_OK;
  2006f8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2006fa:	f7ff ffb9 	bl	200670 <chSchReadyI>
  2006fe:	e7f4      	b.n	2006ea <chEvtBroadcastFlagsI.constprop.19+0x4a>
  200700:	2000081c 	.word	0x2000081c
	...

00200710 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  200710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200714:	4c5f      	ldr	r4, [pc, #380]	; (200894 <Vector188+0x184>)
  200716:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200718:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20071a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20071c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20071e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200720:	d152      	bne.n	2007c8 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  200722:	05eb      	lsls	r3, r5, #23
  200724:	d445      	bmi.n	2007b2 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  200726:	06a8      	lsls	r0, r5, #26
  200728:	d417      	bmi.n	20075a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20072a:	0639      	lsls	r1, r7, #24
  20072c:	d501      	bpl.n	200732 <Vector188+0x22>
  20072e:	062a      	lsls	r2, r5, #24
  200730:	d465      	bmi.n	2007fe <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  200732:	066b      	lsls	r3, r5, #25
  200734:	d50d      	bpl.n	200752 <Vector188+0x42>
  200736:	2320      	movs	r3, #32
  200738:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20073c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  20073e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200740:	429a      	cmp	r2, r3
  200742:	f000 8086 	beq.w	200852 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200746:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20074a:	2300      	movs	r3, #0
  20074c:	6037      	str	r7, [r6, #0]
  20074e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  200752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  200756:	f7ff be83 	b.w	200460 <_port_irq_epilogue>
  20075a:	2320      	movs	r3, #32
  20075c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200760:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200762:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200766:	6963      	ldr	r3, [r4, #20]
  200768:	ea01 0802 	and.w	r8, r1, r2
  20076c:	2b00      	cmp	r3, #0
  20076e:	d078      	beq.n	200862 <Vector188+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  200770:	6a23      	ldr	r3, [r4, #32]
  200772:	6a62      	ldr	r2, [r4, #36]	; 0x24
  200774:	4293      	cmp	r3, r2
  200776:	d078      	beq.n	20086a <Vector188+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  200778:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20077a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  20077c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  20077e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  200780:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200782:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  200786:	6a22      	ldr	r2, [r4, #32]
  200788:	69e3      	ldr	r3, [r4, #28]
  20078a:	429a      	cmp	r2, r3
  20078c:	d25e      	bcs.n	20084c <Vector188+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  20078e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  200790:	4a41      	ldr	r2, [pc, #260]	; (200898 <Vector188+0x188>)
  200792:	4293      	cmp	r3, r2
  200794:	d009      	beq.n	2007aa <Vector188+0x9a>
  tqp->next             = tp->queue.next;
  200796:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  200798:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20079c:	4618      	mov	r0, r3
  20079e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2007a0:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2007a2:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2007a6:	f7ff ff63 	bl	200670 <chSchReadyI>
  2007aa:	2300      	movs	r3, #0
  2007ac:	f383 8811 	msr	BASEPRI, r3
  2007b0:	e7bb      	b.n	20072a <Vector188+0x1a>
  2007b2:	2320      	movs	r3, #32
  2007b4:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2007b8:	f44f 7000 	mov.w	r0, #512	; 0x200
  2007bc:	f7ff ff70 	bl	2006a0 <chEvtBroadcastFlagsI.constprop.19>
  2007c0:	2300      	movs	r3, #0
  2007c2:	f383 8811 	msr	BASEPRI, r3
  2007c6:	e7ae      	b.n	200726 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  2007c8:	f015 0f08 	tst.w	r5, #8
  2007cc:	bf0c      	ite	eq
  2007ce:	2000      	moveq	r0, #0
  2007d0:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  2007d2:	07eb      	lsls	r3, r5, #31
  2007d4:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  2007d8:	bf48      	it	mi
  2007da:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  2007de:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  2007e0:	bf48      	it	mi
  2007e2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  2007e6:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  2007e8:	bf48      	it	mi
  2007ea:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  2007ee:	f383 8811 	msr	BASEPRI, r3
  2007f2:	f7ff ff55 	bl	2006a0 <chEvtBroadcastFlagsI.constprop.19>
  2007f6:	2300      	movs	r3, #0
  2007f8:	f383 8811 	msr	BASEPRI, r3
  2007fc:	e791      	b.n	200722 <Vector188+0x12>
  2007fe:	2320      	movs	r3, #32
  200800:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200806:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200808:	429a      	cmp	r2, r3
  20080a:	d036      	beq.n	20087a <Vector188+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  20080c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20080e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200810:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200812:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200814:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200816:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200818:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20081a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  20081e:	d301      	bcc.n	200824 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  200820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200822:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200824:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200826:	4a1d      	ldr	r2, [pc, #116]	; (20089c <Vector188+0x18c>)
  200828:	4293      	cmp	r3, r2
  20082a:	d009      	beq.n	200840 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  20082c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  20082e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200832:	4618      	mov	r0, r3
  200834:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  200836:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200838:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  20083c:	f7ff ff18 	bl	200670 <chSchReadyI>
      u->TDR = b;
  200840:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200844:	2300      	movs	r3, #0
  200846:	f383 8811 	msr	BASEPRI, r3
  20084a:	e772      	b.n	200732 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  20084c:	69a3      	ldr	r3, [r4, #24]
  20084e:	6223      	str	r3, [r4, #32]
  200850:	e79d      	b.n	20078e <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  200852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  200854:	2b00      	cmp	r3, #0
  200856:	f43f af76 	beq.w	200746 <Vector188+0x36>
  20085a:	2010      	movs	r0, #16
  20085c:	f7ff ff20 	bl	2006a0 <chEvtBroadcastFlagsI.constprop.19>
  200860:	e771      	b.n	200746 <Vector188+0x36>
  200862:	2004      	movs	r0, #4
  200864:	f7ff ff1c 	bl	2006a0 <chEvtBroadcastFlagsI.constprop.19>
  200868:	e782      	b.n	200770 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  20086a:	6962      	ldr	r2, [r4, #20]
  20086c:	2a00      	cmp	r2, #0
  20086e:	d083      	beq.n	200778 <Vector188+0x68>
  200870:	f44f 6080 	mov.w	r0, #1024	; 0x400
  200874:	f7ff ff14 	bl	2006a0 <chEvtBroadcastFlagsI.constprop.19>
  200878:	e797      	b.n	2007aa <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  20087a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  20087c:	2a00      	cmp	r2, #0
  20087e:	d0c5      	beq.n	20080c <Vector188+0xfc>
  200880:	2008      	movs	r0, #8
  200882:	f7ff ff0d 	bl	2006a0 <chEvtBroadcastFlagsI.constprop.19>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  200886:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  20088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20088e:	6033      	str	r3, [r6, #0]
  200890:	e7d8      	b.n	200844 <Vector188+0x134>
  200892:	bf00      	nop
  200894:	2000081c 	.word	0x2000081c
  200898:	20000828 	.word	0x20000828
  20089c:	2000084c 	.word	0x2000084c

002008a0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  2008a0:	e7fe      	b.n	2008a0 <_idle_thread>
  2008a2:	bf00      	nop
	...

002008b0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  2008b0:	e7fe      	b.n	2008b0 <BusFault_Handler>
  2008b2:	bf00      	nop
	...

002008c0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2008c0:	4b08      	ldr	r3, [pc, #32]	; (2008e4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2008c2:	681a      	ldr	r2, [r3, #0]
  2008c4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2008c6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2008c8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2008cc:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2008ce:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2008d0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2008d2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2008d4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2008d6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2008da:	619a      	str	r2, [r3, #24]
}
  2008dc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2008de:	f7ff bcf9 	b.w	2002d4 <_port_switch>
  2008e2:	bf00      	nop
  2008e4:	2000087c 	.word	0x2000087c
	...

002008f0 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  2008f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2008f4:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  2008f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  2008f8:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  2008fa:	d031      	beq.n	200960 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  2008fc:	4c1c      	ldr	r4, [pc, #112]	; (200970 <chSchGoSleepTimeoutS+0x80>)
  2008fe:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  200900:	481c      	ldr	r0, [pc, #112]	; (200974 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  200902:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  200904:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  200906:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  200908:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20090a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20090c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20090e:	d905      	bls.n	20091c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  200910:	1a89      	subs	r1, r1, r2
    p = p->next;
  200912:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  200914:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  200916:	891a      	ldrh	r2, [r3, #8]
  200918:	428a      	cmp	r2, r1
  20091a:	d3f9      	bcc.n	200910 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20091c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20091e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  200920:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  200922:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  200926:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  200928:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20092a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20092c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20092e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  200932:	891a      	ldrh	r2, [r3, #8]
  200934:	1a51      	subs	r1, r2, r1
  200936:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  200938:	84a6      	strh	r6, [r4, #36]	; 0x24
  20093a:	f7ff ffc1 	bl	2008c0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20093e:	9b04      	ldr	r3, [sp, #16]
  200940:	b153      	cbz	r3, 200958 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  200942:	9b01      	ldr	r3, [sp, #4]
  200944:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  200948:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20094a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20094c:	4402      	add	r2, r0
  20094e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  200950:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  200952:	9b01      	ldr	r3, [sp, #4]
  200954:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  200956:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  200958:	69a3      	ldr	r3, [r4, #24]
}
  20095a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20095c:	b007      	add	sp, #28
  20095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200960:	4c03      	ldr	r4, [pc, #12]	; (200970 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  200962:	f7ff ffad 	bl	2008c0 <chSchGoSleepS>
  return currp->u.rdymsg;
  200966:	69a3      	ldr	r3, [r4, #24]
}
  200968:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20096a:	b007      	add	sp, #28
  20096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20096e:	bf00      	nop
  200970:	2000087c 	.word	0x2000087c
  200974:	00200601 	.word	0x00200601
	...

00200980 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  200980:	b161      	cbz	r1, 20099c <chThdEnqueueTimeoutS+0x1c>
  200982:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  200984:	4b07      	ldr	r3, [pc, #28]	; (2009a4 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  200986:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  200988:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20098a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20098c:	6854      	ldr	r4, [r2, #4]
  20098e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  200992:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  200994:	6053      	str	r3, [r2, #4]
}
  200996:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  200998:	f7ff bfaa 	b.w	2008f0 <chSchGoSleepTimeoutS>
}
  20099c:	f04f 30ff 	mov.w	r0, #4294967295
  2009a0:	4770      	bx	lr
  2009a2:	bf00      	nop
  2009a4:	2000087c 	.word	0x2000087c
	...

002009b0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  2009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2009b4:	4699      	mov	r9, r3
  2009b6:	b083      	sub	sp, #12
  2009b8:	4604      	mov	r4, r0
  2009ba:	460e      	mov	r6, r1
  2009bc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  2009be:	f8d0 801c 	ldr.w	r8, [r0, #28]
  2009c2:	2320      	movs	r3, #32
  2009c4:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  2009c8:	4b26      	ldr	r3, [pc, #152]	; (200a64 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2009ca:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  2009ce:	2700      	movs	r7, #0
  2009d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2009d2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  2009d6:	fa19 f383 	uxtah	r3, r9, r3
  2009da:	b29b      	uxth	r3, r3
  2009dc:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  2009de:	68a3      	ldr	r3, [r4, #8]
  2009e0:	b313      	cbz	r3, 200a28 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  2009e2:	6961      	ldr	r1, [r4, #20]
  2009e4:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  2009e8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009ea:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  2009ec:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  2009ee:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  2009f0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009f2:	7833      	ldrb	r3, [r6, #0]
  2009f4:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  2009f6:	6961      	ldr	r1, [r4, #20]
  2009f8:	6923      	ldr	r3, [r4, #16]
  2009fa:	4299      	cmp	r1, r3
  2009fc:	d301      	bcc.n	200a02 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  2009fe:	68e3      	ldr	r3, [r4, #12]
  200a00:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  200a02:	f1b8 0f00 	cmp.w	r8, #0
  200a06:	d001      	beq.n	200a0c <oqWriteTimeout+0x5c>
      nfy(oqp);
  200a08:	4620      	mov	r0, r4
  200a0a:	47c0      	blx	r8
  200a0c:	2300      	movs	r3, #0
  200a0e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  200a12:	3d01      	subs	r5, #1
    w++;
  200a14:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200a18:	d019      	beq.n	200a4e <oqWriteTimeout+0x9e>
  200a1a:	2320      	movs	r3, #32
  200a1c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  200a20:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  200a22:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  200a24:	2b00      	cmp	r3, #0
  200a26:	d1dc      	bne.n	2009e2 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200a28:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  200a2c:	4592      	cmp	sl, r2
  200a2e:	d812      	bhi.n	200a56 <oqWriteTimeout+0xa6>
  200a30:	4a0c      	ldr	r2, [pc, #48]	; (200a64 <oqWriteTimeout+0xb4>)
  200a32:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200a34:	9a01      	ldr	r2, [sp, #4]
  200a36:	1a51      	subs	r1, r2, r1
  200a38:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  200a3a:	4589      	cmp	r9, r1
  200a3c:	d305      	bcc.n	200a4a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  200a3e:	4620      	mov	r0, r4
  200a40:	f7ff ff9e 	bl	200980 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200a44:	2800      	cmp	r0, #0
  200a46:	d0ca      	beq.n	2009de <oqWriteTimeout+0x2e>
  200a48:	2300      	movs	r3, #0
  200a4a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  200a4e:	4638      	mov	r0, r7
  200a50:	b003      	add	sp, #12
  200a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200a56:	4649      	mov	r1, r9
  200a58:	4620      	mov	r0, r4
  200a5a:	f7ff ff91 	bl	200980 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200a5e:	2800      	cmp	r0, #0
  200a60:	d0bd      	beq.n	2009de <oqWriteTimeout+0x2e>
  200a62:	e7f1      	b.n	200a48 <oqWriteTimeout+0x98>
  200a64:	2000087c 	.word	0x2000087c
	...

00200a70 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  200a70:	3030      	adds	r0, #48	; 0x30
  200a72:	f7ff bf9d 	b.w	2009b0 <oqWriteTimeout>
  200a76:	bf00      	nop
	...

00200a80 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  200a80:	3030      	adds	r0, #48	; 0x30
  200a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200a86:	f7ff bf93 	b.w	2009b0 <oqWriteTimeout>
  200a8a:	bf00      	nop
  200a8c:	0000      	movs	r0, r0
	...

00200a90 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  200a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  200a92:	4604      	mov	r4, r0
  200a94:	460f      	mov	r7, r1
  200a96:	4616      	mov	r6, r2
  200a98:	2320      	movs	r3, #32
  200a9a:	f383 8811 	msr	BASEPRI, r3
  200a9e:	e003      	b.n	200aa8 <oqPutTimeout+0x18>
  200aa0:	f7ff ff6e 	bl	200980 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200aa4:	2800      	cmp	r0, #0
  200aa6:	db19      	blt.n	200adc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  200aa8:	68a5      	ldr	r5, [r4, #8]
  200aaa:	4631      	mov	r1, r6
  200aac:	4620      	mov	r0, r4
  200aae:	2d00      	cmp	r5, #0
  200ab0:	d0f6      	beq.n	200aa0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  200ab2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  200ab4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200ab6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  200ab8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  200aba:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  200abc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200abe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200ac0:	6962      	ldr	r2, [r4, #20]
  200ac2:	6923      	ldr	r3, [r4, #16]
  200ac4:	429a      	cmp	r2, r3
  200ac6:	d301      	bcc.n	200acc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  200ac8:	68e3      	ldr	r3, [r4, #12]
  200aca:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  200acc:	69e3      	ldr	r3, [r4, #28]
  200ace:	b10b      	cbz	r3, 200ad4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  200ad0:	4620      	mov	r0, r4
  200ad2:	4798      	blx	r3
  200ad4:	2000      	movs	r0, #0
  200ad6:	f380 8811 	msr	BASEPRI, r0
}
  200ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200adc:	f385 8811 	msr	BASEPRI, r5
  200ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200ae2:	bf00      	nop
	...

00200af0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  200af0:	3030      	adds	r0, #48	; 0x30
  200af2:	f7ff bfcd 	b.w	200a90 <oqPutTimeout>
  200af6:	bf00      	nop
	...

00200b00 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  200b00:	3030      	adds	r0, #48	; 0x30
  200b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
  200b06:	f7ff bfc3 	b.w	200a90 <oqPutTimeout>
  200b0a:	bf00      	nop
  200b0c:	0000      	movs	r0, r0
	...

00200b10 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  200b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200b14:	4699      	mov	r9, r3
  200b16:	b083      	sub	sp, #12
  200b18:	4604      	mov	r4, r0
  200b1a:	460e      	mov	r6, r1
  200b1c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  200b1e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200b22:	2320      	movs	r3, #32
  200b24:	f383 8811 	msr	BASEPRI, r3
  200b28:	4b26      	ldr	r3, [pc, #152]	; (200bc4 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b2a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  200b2e:	2700      	movs	r7, #0
  200b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b32:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  200b36:	fa19 f383 	uxtah	r3, r9, r3
  200b3a:	b29b      	uxth	r3, r3
  200b3c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  200b3e:	68a3      	ldr	r3, [r4, #8]
  200b40:	b313      	cbz	r3, 200b88 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  200b42:	69a1      	ldr	r1, [r4, #24]
  200b44:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  200b48:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b4a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  200b4c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  200b4e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  200b50:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b52:	780b      	ldrb	r3, [r1, #0]
  200b54:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  200b56:	69a1      	ldr	r1, [r4, #24]
  200b58:	6923      	ldr	r3, [r4, #16]
  200b5a:	4299      	cmp	r1, r3
  200b5c:	d301      	bcc.n	200b62 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  200b5e:	68e3      	ldr	r3, [r4, #12]
  200b60:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  200b62:	f1b8 0f00 	cmp.w	r8, #0
  200b66:	d001      	beq.n	200b6c <iqReadTimeout+0x5c>
      nfy(iqp);
  200b68:	4620      	mov	r0, r4
  200b6a:	47c0      	blx	r8
  200b6c:	2300      	movs	r3, #0
  200b6e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  200b72:	3d01      	subs	r5, #1
    r++;
  200b74:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200b78:	d019      	beq.n	200bae <iqReadTimeout+0x9e>
  200b7a:	2320      	movs	r3, #32
  200b7c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  200b80:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b82:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  200b84:	2b00      	cmp	r3, #0
  200b86:	d1dc      	bne.n	200b42 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b88:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  200b8c:	4592      	cmp	sl, r2
  200b8e:	d812      	bhi.n	200bb6 <iqReadTimeout+0xa6>
  200b90:	4a0c      	ldr	r2, [pc, #48]	; (200bc4 <iqReadTimeout+0xb4>)
  200b92:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200b94:	9a01      	ldr	r2, [sp, #4]
  200b96:	1a51      	subs	r1, r2, r1
  200b98:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  200b9a:	4589      	cmp	r9, r1
  200b9c:	d305      	bcc.n	200baa <iqReadTimeout+0x9a>
  200b9e:	4620      	mov	r0, r4
  200ba0:	f7ff feee 	bl	200980 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200ba4:	2800      	cmp	r0, #0
  200ba6:	d0ca      	beq.n	200b3e <iqReadTimeout+0x2e>
  200ba8:	2300      	movs	r3, #0
  200baa:	f383 8811 	msr	BASEPRI, r3
}
  200bae:	4638      	mov	r0, r7
  200bb0:	b003      	add	sp, #12
  200bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200bb6:	4649      	mov	r1, r9
  200bb8:	4620      	mov	r0, r4
  200bba:	f7ff fee1 	bl	200980 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200bbe:	2800      	cmp	r0, #0
  200bc0:	d0bd      	beq.n	200b3e <iqReadTimeout+0x2e>
  200bc2:	e7f1      	b.n	200ba8 <iqReadTimeout+0x98>
  200bc4:	2000087c 	.word	0x2000087c
	...

00200bd0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  200bd0:	300c      	adds	r0, #12
  200bd2:	f7ff bf9d 	b.w	200b10 <iqReadTimeout>
  200bd6:	bf00      	nop
	...

00200be0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  200be0:	300c      	adds	r0, #12
  200be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200be6:	f7ff bf93 	b.w	200b10 <iqReadTimeout>
  200bea:	bf00      	nop
  200bec:	0000      	movs	r0, r0
	...

00200bf0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  200bf0:	b570      	push	{r4, r5, r6, lr}
  200bf2:	2320      	movs	r3, #32
  200bf4:	4604      	mov	r4, r0
  200bf6:	460e      	mov	r6, r1
  200bf8:	f383 8811 	msr	BASEPRI, r3
  200bfc:	e003      	b.n	200c06 <iqGetTimeout+0x16>
  200bfe:	f7ff febf 	bl	200980 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200c02:	2800      	cmp	r0, #0
  200c04:	db19      	blt.n	200c3a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  200c06:	68a5      	ldr	r5, [r4, #8]
  200c08:	4631      	mov	r1, r6
  200c0a:	4620      	mov	r0, r4
  200c0c:	2d00      	cmp	r5, #0
  200c0e:	d0f6      	beq.n	200bfe <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  200c10:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  200c12:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200c14:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200c16:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  200c18:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200c1a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  200c1c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  200c1e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200c20:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  200c22:	d301      	bcc.n	200c28 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  200c24:	68e3      	ldr	r3, [r4, #12]
  200c26:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  200c28:	69e3      	ldr	r3, [r4, #28]
  200c2a:	b10b      	cbz	r3, 200c30 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  200c2c:	4620      	mov	r0, r4
  200c2e:	4798      	blx	r3
  200c30:	2300      	movs	r3, #0
  200c32:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  200c36:	4628      	mov	r0, r5
}
  200c38:	bd70      	pop	{r4, r5, r6, pc}
  200c3a:	f385 8811 	msr	BASEPRI, r5
  200c3e:	bd70      	pop	{r4, r5, r6, pc}

00200c40 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  200c40:	300c      	adds	r0, #12
  200c42:	f7ff bfd5 	b.w	200bf0 <iqGetTimeout>
  200c46:	bf00      	nop
	...

00200c50 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  200c50:	300c      	adds	r0, #12
  200c52:	f64f 71ff 	movw	r1, #65535	; 0xffff
  200c56:	f7ff bfcb 	b.w	200bf0 <iqGetTimeout>
  200c5a:	bf00      	nop
  200c5c:	0000      	movs	r0, r0
	...

00200c60 <main>:
  tqp->next = (thread_t *)tqp;
  200c60:	4cc1      	ldr	r4, [pc, #772]	; (200f68 <main+0x308>)
  ch.rlist.prio = NOPRIO;
  200c62:	2500      	movs	r5, #0
  ch.vtlist.delta = (systime_t)-1;
  200c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  200c68:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200c6c:	f104 031c 	add.w	r3, r4, #28
  tmp->cumulative = (rttime_t)0;
  200c70:	2600      	movs	r6, #0
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200c72:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
}

int main(void)
{
  200c76:	b580      	push	{r7, lr}
  200c78:	b086      	sub	sp, #24
  200c7a:	2700      	movs	r7, #0
  200c7c:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  200c7e:	4668      	mov	r0, sp
  tqp->prev = (thread_t *)tqp;
  200c80:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  200c82:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200c84:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200c86:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  200c88:	9200      	str	r2, [sp, #0]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  200c8a:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  200c8c:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  200c8e:	60a5      	str	r5, [r4, #8]
  ch.vtlist.systime = (systime_t)0;
  200c90:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200c92:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200c94:	9501      	str	r5, [sp, #4]
  tmp->last       = (rtcnt_t)0;
  200c96:	9502      	str	r5, [sp, #8]
  tmp->n          = (ucnt_t)0;
  200c98:	9503      	str	r5, [sp, #12]
  tmp->cumulative = (rttime_t)0;
  200c9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  chTMStartMeasurementX(&tm);
  200c9e:	f7ff fb2f 	bl	200300 <chTMStartMeasurementX.constprop.23>
  chTMStopMeasurementX(&tm);
  200ca2:	4668      	mov	r0, sp
  200ca4:	f7ff fc84 	bl	2005b0 <chTMStopMeasurementX>
  nextmem = __heap_base__;
  200ca8:	4ab0      	ldr	r2, [pc, #704]	; (200f6c <main+0x30c>)
  200caa:	48b1      	ldr	r0, [pc, #708]	; (200f70 <main+0x310>)
  tp->prio      = prio;
  200cac:	f04f 0e80 	mov.w	lr, #128	; 0x80
  endmem  = __heap_end__;
  200cb0:	4eb0      	ldr	r6, [pc, #704]	; (200f74 <main+0x314>)
  REG_INSERT(tp);
  200cb2:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  nextmem = __heap_base__;
  200cb6:	6010      	str	r0, [r2, #0]
  tp->refs      = (trefs_t)1;
  200cb8:	2001      	movs	r0, #1
  endmem  = __heap_end__;
  200cba:	4aaf      	ldr	r2, [pc, #700]	; (200f78 <main+0x318>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  200cbc:	49af      	ldr	r1, [pc, #700]	; (200f7c <main+0x31c>)
  200cbe:	6016      	str	r6, [r2, #0]
  200cc0:	4baf      	ldr	r3, [pc, #700]	; (200f80 <main+0x320>)
  tqp->next = (thread_t *)tqp;
  200cc2:	f101 0c10 	add.w	ip, r1, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  200cc6:	4eaf      	ldr	r6, [pc, #700]	; (200f84 <main+0x324>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200cc8:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  200ccc:	600b      	str	r3, [r1, #0]
  200cce:	68f2      	ldr	r2, [r6, #12]
  ch.tm.offset = tm.last;
  200cd0:	9b02      	ldr	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200cd2:	ea02 0208 	and.w	r2, r2, r8
  tp->prio      = prio;
  200cd6:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  200cda:	6723      	str	r3, [r4, #112]	; 0x70
  reg_value  =  (reg_value                                   |
  200cdc:	4baa      	ldr	r3, [pc, #680]	; (200f88 <main+0x328>)
  tp->realprio  = prio;
  200cde:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  200ce2:	4313      	orrs	r3, r2
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200ce4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 200fcc <main+0x36c>
  REG_INSERT(tp);
  200ce8:	6962      	ldr	r2, [r4, #20]
  tp->name      = name;
  200cea:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 200fd0 <main+0x370>
  tp->epending  = (eventmask_t)0;
  200cee:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200cf0:	618d      	str	r5, [r1, #24]
  200cf2:	f8c1 c010 	str.w	ip, [r1, #16]
  tqp->prev = (thread_t *)tqp;
  200cf6:	f8c1 c014 	str.w	ip, [r1, #20]
  tlp->next = (thread_t *)tlp;
  200cfa:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  200cfe:	6422      	str	r2, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  200d00:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  200d04:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  200d06:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  200d08:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  200d0c:	6117      	str	r7, [r2, #16]
  tqp->next = (thread_t *)tqp;
  200d0e:	f104 0258 	add.w	r2, r4, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  200d12:	60f3      	str	r3, [r6, #12]
  200d14:	f8de 300c 	ldr.w	r3, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  200d18:	608d      	str	r5, [r1, #8]
  200d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  200d1e:	60cd      	str	r5, [r1, #12]
  200d20:	6167      	str	r7, [r4, #20]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  200d22:	2120      	movs	r1, #32
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  200d24:	61a7      	str	r7, [r4, #24]
  200d26:	2710      	movs	r7, #16
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  200d28:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  200d2a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  tlp->next = (thread_t *)tlp;
  200d2e:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  200d32:	f8ce 300c 	str.w	r3, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  200d36:	4b95      	ldr	r3, [pc, #596]	; (200f8c <main+0x32c>)
  200d38:	f8df e298 	ldr.w	lr, [pc, #664]	; 200fd4 <main+0x374>
  tqp->next = (thread_t *)tqp;
  200d3c:	65a2      	str	r2, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  200d3e:	65e2      	str	r2, [r4, #92]	; 0x5c
  200d40:	f8c3 efb0 	str.w	lr, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  200d44:	681a      	ldr	r2, [r3, #0]
  200d46:	4302      	orrs	r2, r0
  200d48:	601a      	str	r2, [r3, #0]
  200d4a:	77f7      	strb	r7, [r6, #31]
  200d4c:	f886 1022 	strb.w	r1, [r6, #34]	; 0x22
  200d50:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  200d54:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200d56:	f381 8811 	msr	BASEPRI, r1
  tp->wabase = tdp->wbase;
  200d5a:	4b8d      	ldr	r3, [pc, #564]	; (200f90 <main+0x330>)
  tp->state     = CH_STATE_WTSTART;
  200d5c:	2602      	movs	r6, #2
  REG_INSERT(tp);
  200d5e:	6962      	ldr	r2, [r4, #20]
  tp->prio      = prio;
  200d60:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d64:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  200d68:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  200d6c:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  200d70:	f883 00b2 	strb.w	r0, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d74:	4887      	ldr	r0, [pc, #540]	; (200f94 <main+0x334>)
  200d76:	f8df e260 	ldr.w	lr, [pc, #608]	; 200fd8 <main+0x378>
  200d7a:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  tp->name      = name;
  200d7e:	4886      	ldr	r0, [pc, #536]	; (200f98 <main+0x338>)
  tp->state     = CH_STATE_WTSTART;
  200d80:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  200d84:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  200d88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200d8c:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200d90:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d94:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  200d98:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  200d9c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200da0:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200da2:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  200da6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200daa:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200dae:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  200db2:	6111      	str	r1, [r2, #16]
  thread_t *otp = currp;
  200db4:	69a2      	ldr	r2, [r4, #24]
  ntp->u.rdymsg = msg;
  200db6:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  200dba:	6890      	ldr	r0, [r2, #8]
  200dbc:	6161      	str	r1, [r4, #20]
  200dbe:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200dc2:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  200dc6:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  200dca:	2800      	cmp	r0, #0
  200dcc:	f000 8283 	beq.w	2012d6 <main+0x676>
  tp->state = CH_STATE_READY;
  200dd0:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200dd4:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  200dd6:	68a2      	ldr	r2, [r4, #8]
  200dd8:	2a00      	cmp	r2, #0
  200dda:	d1fb      	bne.n	200dd4 <main+0x174>
  tp->queue.next             = cp;
  200ddc:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200de0:	6860      	ldr	r0, [r4, #4]
  200de2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  200de6:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  200de8:	6061      	str	r1, [r4, #4]
  200dea:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200dee:	4b6b      	ldr	r3, [pc, #428]	; (200f9c <main+0x33c>)
  200df0:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  200df4:	4c6a      	ldr	r4, [pc, #424]	; (200fa0 <main+0x340>)
  rccResetAHB1(~0);
  200df6:	6918      	ldr	r0, [r3, #16]
  200df8:	6119      	str	r1, [r3, #16]
  200dfa:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200dfc:	6958      	ldr	r0, [r3, #20]
  200dfe:	6159      	str	r1, [r3, #20]
  200e00:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200e02:	6a18      	ldr	r0, [r3, #32]
  200e04:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  200e08:	6218      	str	r0, [r3, #32]
  200e0a:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200e0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200e0e:	6259      	str	r1, [r3, #36]	; 0x24
  200e10:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200e12:	6821      	ldr	r1, [r4, #0]
  200e14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  200e18:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  200e1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  200e1c:	f401 7140 	and.w	r1, r1, #768	; 0x300
  200e20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  200e24:	d003      	beq.n	200e2e <main+0x1ce>
    RCC->BDCR = RCC_BDCR_BDRST;
  200e26:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  200e2a:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  200e2c:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200e2e:	4b5b      	ldr	r3, [pc, #364]	; (200f9c <main+0x33c>)
  200e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200e32:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200e34:	f042 0219 	orr.w	r2, r2, #25
  200e38:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200e3a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  200e3c:	079b      	lsls	r3, r3, #30
  200e3e:	d5fc      	bpl.n	200e3a <main+0x1da>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  200e40:	4c57      	ldr	r4, [pc, #348]	; (200fa0 <main+0x340>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200e42:	f240 7cff 	movw	ip, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  200e46:	2300      	movs	r3, #0
  gpiop->OSPEEDR = config->ospeedr;
  200e48:	f04f 3eff 	mov.w	lr, #4294967295
  200e4c:	6861      	ldr	r1, [r4, #4]
  gpiop->ODR     = config->odr;
  200e4e:	f64b 787e 	movw	r8, #49022	; 0xbf7e
  gpiop->AFRH    = config->afrh;
  200e52:	f44f 0a30 	mov.w	sl, #11534336	; 0xb00000
  gpiop->MODER   = config->moder;
  200e56:	f640 2908 	movw	r9, #2568	; 0xa08
  200e5a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  sdp->vmt = &vmt;
  200e5e:	4a51      	ldr	r2, [pc, #324]	; (200fa4 <main+0x344>)
  iqp->q_buffer  = bp;
  200e60:	4f51      	ldr	r7, [pc, #324]	; (200fa8 <main+0x348>)
  200e62:	6061      	str	r1, [r4, #4]
  gpiop->ODR     = config->odr;
  200e64:	f64f 71ff 	movw	r1, #65535	; 0xffff
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200e68:	6b04      	ldr	r4, [r0, #48]	; 0x30
  oqp->q_buffer  = bp;
  200e6a:	4e50      	ldr	r6, [pc, #320]	; (200fac <main+0x34c>)
  200e6c:	ea44 040c 	orr.w	r4, r4, ip
  200e70:	6304      	str	r4, [r0, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200e72:	6d05      	ldr	r5, [r0, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
  200e74:	4c4e      	ldr	r4, [pc, #312]	; (200fb0 <main+0x350>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200e76:	ea45 050c 	orr.w	r5, r5, ip
  gpiop->AFRH    = config->afrh;
  200e7a:	f8df c160 	ldr.w	ip, [pc, #352]	; 200fdc <main+0x37c>
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200e7e:	6505      	str	r5, [r0, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
  200e80:	4d4c      	ldr	r5, [pc, #304]	; (200fb4 <main+0x354>)
  gpiop->OTYPER  = config->otyper;
  200e82:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200e84:	f8c4 e008 	str.w	lr, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200e88:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200e8a:	4d4b      	ldr	r5, [pc, #300]	; (200fb8 <main+0x358>)
  gpiop->ODR     = config->odr;
  200e8c:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200e8e:	6225      	str	r5, [r4, #32]
  gpiop->OSPEEDR = config->ospeedr;
  200e90:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  gpiop->AFRH    = config->afrh;
  200e94:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200e98:	f8df c144 	ldr.w	ip, [pc, #324]	; 200fe0 <main+0x380>
  200e9c:	f8c4 c000 	str.w	ip, [r4]
  gpiop->OSPEEDR = config->ospeedr;
  200ea0:	f46f 1c40 	mvn.w	ip, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  200ea4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200ea8:	f8c4 e408 	str.w	lr, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200eac:	f10e 4e8a 	add.w	lr, lr, #1157627904	; 0x45000000
  200eb0:	f10e 1e55 	add.w	lr, lr, #5570645	; 0x550055
  200eb4:	f50e 5ea8 	add.w	lr, lr, #5376	; 0x1500
  200eb8:	f8c4 e40c 	str.w	lr, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  200ebc:	f8df e124 	ldr.w	lr, [pc, #292]	; 200fe4 <main+0x384>
  gpiop->ODR     = config->odr;
  200ec0:	f8c4 8414 	str.w	r8, [r4, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  200ec4:	f04f 6808 	mov.w	r8, #142606336	; 0x8800000
  gpiop->AFRL    = config->afrl;
  200ec8:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200ecc:	f8c4 a424 	str.w	sl, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200ed0:	f44f 2a20 	mov.w	sl, #655360	; 0xa0000
  200ed4:	f8c4 e400 	str.w	lr, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200ed8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  200edc:	6063      	str	r3, [r4, #4]
  gpiop->AFRH    = config->afrh;
  200ede:	f04f 0e77 	mov.w	lr, #119	; 0x77
  gpiop->OSPEEDR = config->ospeedr;
  200ee2:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200ee4:	4d35      	ldr	r5, [pc, #212]	; (200fbc <main+0x35c>)
  200ee6:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200ee8:	4d35      	ldr	r5, [pc, #212]	; (200fc0 <main+0x360>)
  gpiop->ODR     = config->odr;
  200eea:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200eec:	6225      	str	r5, [r4, #32]
  gpiop->PUPDR   = config->pupdr;
  200eee:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
  gpiop->AFRH    = config->afrh;
  200ef2:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200ef4:	f8c4 9000 	str.w	r9, [r4]
  iqp->q_top     = bp + size;
  200ef8:	f107 0910 	add.w	r9, r7, #16
  gpiop->OTYPER  = config->otyper;
  200efc:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200f00:	f8c4 c408 	str.w	ip, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200f04:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 200fe8 <main+0x388>
  200f08:	f8c4 c40c 	str.w	ip, [r4, #1036]	; 0x40c
  gpiop->OSPEEDR = config->ospeedr;
  200f0c:	f04f 0c0f 	mov.w	ip, #15
  gpiop->ODR     = config->odr;
  200f10:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200f14:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200f18:	f8c4 e424 	str.w	lr, [r4, #1060]	; 0x424
  gpiop->OSPEEDR = config->ospeedr;
  200f1c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 200fec <main+0x38c>
  gpiop->MODER   = config->moder;
  200f20:	f8c4 a400 	str.w	sl, [r4, #1024]	; 0x400
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200f24:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  gpiop->OTYPER  = config->otyper;
  200f28:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200f2c:	f8c4 e808 	str.w	lr, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200f30:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  200f34:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 200ff0 <main+0x390>
  gpiop->ODR     = config->odr;
  200f38:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  200f3c:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200f40:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200f44:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  200f48:	4c1e      	ldr	r4, [pc, #120]	; (200fc4 <main+0x364>)
  gpiop->OTYPER  = config->otyper;
  200f4a:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200f4e:	f8ce 4008 	str.w	r4, [lr, #8]
  gpiop->OTYPER  = config->otyper;
  200f52:	4c1d      	ldr	r4, [pc, #116]	; (200fc8 <main+0x368>)
  gpiop->PUPDR   = config->pupdr;
  200f54:	f8ce 500c 	str.w	r5, [lr, #12]
  gpiop->ODR     = config->odr;
  200f58:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->AFRL    = config->afrl;
  200f5c:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
  200f60:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  200f64:	e046      	b.n	200ff4 <main+0x394>
  200f66:	bf00      	nop
  200f68:	2000087c 	.word	0x2000087c
  200f6c:	200009ec 	.word	0x200009ec
  200f70:	20020048 	.word	0x20020048
  200f74:	20080000 	.word	0x20080000
  200f78:	200009e8 	.word	0x200009e8
  200f7c:	200009c8 	.word	0x200009c8
  200f80:	00200321 	.word	0x00200321
  200f84:	e000ed00 	.word	0xe000ed00
  200f88:	05fa0300 	.word	0x05fa0300
  200f8c:	e0001000 	.word	0xe0001000
  200f90:	200008f0 	.word	0x200008f0
  200f94:	002002e5 	.word	0x002002e5
  200f98:	08001624 	.word	0x08001624
  200f9c:	40023800 	.word	0x40023800
  200fa0:	40007000 	.word	0x40007000
  200fa4:	2000081c 	.word	0x2000081c
  200fa8:	200009f0 	.word	0x200009f0
  200fac:	20000a00 	.word	0x20000a00
  200fb0:	40020000 	.word	0x40020000
  200fb4:	40005551 	.word	0x40005551
  200fb8:	b0000bb0 	.word	0xb0000bb0
  200fbc:	01555051 	.word	0x01555051
  200fc0:	00bb00b0 	.word	0x00bb00b0
  200fc4:	003fcfff 	.word	0x003fcfff
  200fc8:	40021800 	.word	0x40021800
  200fcc:	e000edf0 	.word	0xe000edf0
  200fd0:	0800160c 	.word	0x0800160c
  200fd4:	c5acce55 	.word	0xc5acce55
  200fd8:	002008a1 	.word	0x002008a1
  200fdc:	000aaa0a 	.word	0x000aaa0a
  200fe0:	2aae8028 	.word	0x2aae8028
  200fe4:	18004001 	.word	0x18004001
  200fe8:	55505555 	.word	0x55505555
  200fec:	cffffff3 	.word	0xcffffff3
  200ff0:	40021400 	.word	0x40021400
  gpiop->MODER   = config->moder;
  200ff4:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OSPEEDR = config->ospeedr;
  200ff8:	f8df e374 	ldr.w	lr, [pc, #884]	; 201370 <main+0x710>
  gpiop->OTYPER  = config->otyper;
  200ffc:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200ffe:	f8c4 e008 	str.w	lr, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201002:	f8df e370 	ldr.w	lr, [pc, #880]	; 201374 <main+0x714>
  201006:	f8c4 e00c 	str.w	lr, [r4, #12]
  gpiop->AFRH    = config->afrh;
  20100a:	f8df e36c 	ldr.w	lr, [pc, #876]	; 201378 <main+0x718>
  gpiop->ODR     = config->odr;
  20100e:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201010:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201012:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  201016:	4696      	mov	lr, r2
  gpiop->MODER   = config->moder;
  201018:	f8c4 8000 	str.w	r8, [r4]
  gpiop->PUPDR   = config->pupdr;
  20101c:	f8df 835c 	ldr.w	r8, [pc, #860]	; 20137c <main+0x71c>
  gpiop->OTYPER  = config->otyper;
  201020:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201024:	f8c4 c408 	str.w	ip, [r4, #1032]	; 0x408
  PWMD3.channels = STM32_TIM3_CHANNELS;
  201028:	f04f 0c04 	mov.w	ip, #4
  gpiop->PUPDR   = config->pupdr;
  20102c:	f8c4 840c 	str.w	r8, [r4, #1036]	; 0x40c
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  201030:	f04f 0801 	mov.w	r8, #1
  gpiop->ODR     = config->odr;
  201034:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201038:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  20103c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201040:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201044:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  201048:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20104a:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  20104c:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
  20104e:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201050:	6223      	str	r3, [r4, #32]
  iqp->q_buffer  = bp;
  201052:	6197      	str	r7, [r2, #24]
  gpiop->AFRH    = config->afrh;
  201054:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_rdptr   = bp;
  201056:	6257      	str	r7, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201058:	6023      	str	r3, [r4, #0]
  iqp->q_wrptr   = bp;
  20105a:	6217      	str	r7, [r2, #32]
  tqp->next = (thread_t *)tqp;
  20105c:	f102 070c 	add.w	r7, r2, #12
  gpiop->OTYPER  = config->otyper;
  201060:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  iqp->q_top     = bp + size;
  201064:	f8c2 901c 	str.w	r9, [r2, #28]
  oqp->q_counter = size;
  201068:	f04f 0910 	mov.w	r9, #16
  gpiop->OSPEEDR = config->ospeedr;
  20106c:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  sdp->state = SD_STOP;
  201070:	f882 8008 	strb.w	r8, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  201074:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  201078:	60d7      	str	r7, [r2, #12]
  gpiop->ODR     = config->odr;
  20107a:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  tqp->prev = (thread_t *)tqp;
  20107e:	6117      	str	r7, [r2, #16]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201080:	27c0      	movs	r7, #192	; 0xc0
  gpiop->AFRL    = config->afrl;
  201082:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201086:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  20108a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20108e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201092:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201096:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  20109a:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  sdp->vmt = &vmt;
  20109e:	49a2      	ldr	r1, [pc, #648]	; (201328 <main+0x6c8>)
  gpiop->AFRL    = config->afrl;
  2010a0:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  2010a4:	4da1      	ldr	r5, [pc, #644]	; (20132c <main+0x6cc>)
  gpiop->AFRH    = config->afrh;
  2010a6:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2010aa:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  tqp->next = (thread_t *)tqp;
  2010ae:	f102 0430 	add.w	r4, r2, #48	; 0x30
  2010b2:	f84e 1b04 	str.w	r1, [lr], #4
  PWMD3.tim = STM32_TIM3;
  2010b6:	499e      	ldr	r1, [pc, #632]	; (201330 <main+0x6d0>)
  iqp->q_counter = 0;
  2010b8:	6153      	str	r3, [r2, #20]
  2010ba:	61a9      	str	r1, [r5, #24]
  2010bc:	499d      	ldr	r1, [pc, #628]	; (201334 <main+0x6d4>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  2010be:	f8c2 e004 	str.w	lr, [r2, #4]
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2010c2:	f04f 0e07 	mov.w	lr, #7
  pwmp->config   = NULL;
  2010c6:	606b      	str	r3, [r5, #4]
  pwmp->enabled  = 0;
  2010c8:	60eb      	str	r3, [r5, #12]
  PWMD3.channels = STM32_TIM3_CHANNELS;
  2010ca:	f885 c010 	strb.w	ip, [r5, #16]
  oqp->q_top     = bp + size;
  2010ce:	eb06 0c09 	add.w	ip, r6, r9
  pwmp->state    = PWM_STOP;
  2010d2:	f885 8000 	strb.w	r8, [r5]
  iqp->q_notify  = infy;
  2010d6:	6293      	str	r3, [r2, #40]	; 0x28
  oqp->q_buffer  = bp;
  2010d8:	63d6      	str	r6, [r2, #60]	; 0x3c
  iqp->q_link    = link;
  2010da:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  2010dc:	6512      	str	r2, [r2, #80]	; 0x50
  oqp->q_counter = size;
  2010de:	f8c2 9038 	str.w	r9, [r2, #56]	; 0x38
  2010e2:	f881 7352 	strb.w	r7, [r1, #850]	; 0x352
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  2010e6:	4f94      	ldr	r7, [pc, #592]	; (201338 <main+0x6d8>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2010e8:	f8c1 a188 	str.w	sl, [r1, #392]	; 0x188
  oqp->q_rdptr   = bp;
  2010ec:	6496      	str	r6, [r2, #72]	; 0x48
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2010ee:	f8c1 a008 	str.w	sl, [r1, #8]
  oqp->q_wrptr   = bp;
  2010f2:	6456      	str	r6, [r2, #68]	; 0x44

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2010f4:	2680      	movs	r6, #128	; 0x80
  2010f6:	f841 7cec 	str.w	r7, [r1, #-236]
  oqp->q_top     = bp + size;
  2010fa:	f8c2 c040 	str.w	ip, [r2, #64]	; 0x40
  oqp->q_notify  = onfy;
  2010fe:	4f8f      	ldr	r7, [pc, #572]	; (20133c <main+0x6dc>)
  SysTick->VAL = 0;
  201100:	f841 3ce8 	str.w	r3, [r1, #-232]
  201104:	2320      	movs	r3, #32
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  201106:	f841 ecf0 	str.w	lr, [r1, #-240]

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  20110a:	498d      	ldr	r1, [pc, #564]	; (201340 <main+0x6e0>)
  20110c:	64d7      	str	r7, [r2, #76]	; 0x4c
  20110e:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  201110:	4f8c      	ldr	r7, [pc, #560]	; (201344 <main+0x6e4>)
  201112:	498d      	ldr	r1, [pc, #564]	; (201348 <main+0x6e8>)
  201114:	6597      	str	r7, [r2, #88]	; 0x58
  201116:	6314      	str	r4, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  201118:	6354      	str	r4, [r2, #52]	; 0x34
  20111a:	f881 6023 	strb.w	r6, [r1, #35]	; 0x23
  20111e:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  201122:	7a13      	ldrb	r3, [r2, #8]
  201124:	4543      	cmp	r3, r8
  201126:	f000 80fa 	beq.w	20131e <main+0x6be>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20112a:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20112c:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201130:	4886      	ldr	r0, [pc, #536]	; (20134c <main+0x6ec>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201132:	2601      	movs	r6, #1
  USART_TypeDef *u = sdp->usart;
  201134:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201136:	f240 1e2d 	movw	lr, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20113a:	fba0 0101 	umull	r0, r1, r0, r1
  sdp->state = SD_READY;
  20113e:	2702      	movs	r7, #2
  u->ICR = 0xFFFFFFFFU;
  201140:	f04f 30ff 	mov.w	r0, #4294967295
  201144:	2400      	movs	r4, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201146:	0a89      	lsrs	r1, r1, #10
  201148:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20114a:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20114e:	609e      	str	r6, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201150:	f8c3 e000 	str.w	lr, [r3]
  u->ICR = 0xFFFFFFFFU;
  201154:	6218      	str	r0, [r3, #32]
  201156:	7217      	strb	r7, [r2, #8]
    sdp->rxmask = 0xFF;
  201158:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  20115c:	f384 8811 	msr	BASEPRI, r4
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  201160:	f240 4202 	movw	r2, #1026	; 0x402
  201164:	f44f 7180 	mov.w	r1, #256	; 0x100
  201168:	4879      	ldr	r0, [pc, #484]	; (201350 <main+0x6f0>)
  20116a:	f7ff f901 	bl	200370 <_pal_lld_setgroupmode>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  20116e:	f240 4202 	movw	r2, #1026	; 0x402
  201172:	2180      	movs	r1, #128	; 0x80
  201174:	4876      	ldr	r0, [pc, #472]	; (201350 <main+0x6f0>)
  201176:	f7ff f8fb 	bl	200370 <_pal_lld_setgroupmode>
    palSetPadMode( GPIOB, 0, PAL_MODE_ALTERNATE(2) );
  20117a:	4631      	mov	r1, r6
  20117c:	f44f 7281 	mov.w	r2, #258	; 0x102
  201180:	4874      	ldr	r0, [pc, #464]	; (201354 <main+0x6f4>)
  201182:	f7ff f8f5 	bl	200370 <_pal_lld_setgroupmode>
  201186:	2320      	movs	r3, #32
  201188:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  20118c:	4872      	ldr	r0, [pc, #456]	; (201358 <main+0x6f8>)
  if (pwmp->state == PWM_STOP) {
  20118e:	782b      	ldrb	r3, [r5, #0]
  pwmp->period = config->period;
  201190:	6846      	ldr	r6, [r0, #4]
  201192:	2b01      	cmp	r3, #1
  pwmp->config = config;
  201194:	6068      	str	r0, [r5, #4]
  pwmp->period = config->period;
  201196:	60ae      	str	r6, [r5, #8]
  201198:	f000 80a0 	beq.w	2012dc <main+0x67c>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  20119c:	69ab      	ldr	r3, [r5, #24]
  20119e:	601c      	str	r4, [r3, #0]
    if (pwmp->channels > 4) {
  2011a0:	7c2a      	ldrb	r2, [r5, #16]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  2011a2:	635c      	str	r4, [r3, #52]	; 0x34
    if (pwmp->channels > 4) {
  2011a4:	2a04      	cmp	r2, #4
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  2011a6:	639c      	str	r4, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  2011a8:	63dc      	str	r4, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  2011aa:	641c      	str	r4, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  2011ac:	d901      	bls.n	2011b2 <main+0x552>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  2011ae:	659c      	str	r4, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  2011b0:	65dc      	str	r4, [r3, #92]	; 0x5c
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  2011b2:	2200      	movs	r2, #0
  2011b4:	6969      	ldr	r1, [r5, #20]
  2011b6:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2011b8:	6804      	ldr	r4, [r0, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  2011ba:	3e01      	subs	r6, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2011bc:	68c2      	ldr	r2, [r0, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
  2011be:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2011c0:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2011c4:	fbb1 f1f4 	udiv	r1, r1, r4
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2011c8:	2a01      	cmp	r2, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2011ca:	f101 31ff 	add.w	r1, r1, #4294967295
  pwmp->tim->PSC  = psc;
  2011ce:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  2011d0:	62de      	str	r6, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  2011d2:	605f      	str	r7, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2011d4:	d003      	beq.n	2011de <main+0x57e>
  ccer = 0;
  2011d6:	2a02      	cmp	r2, #2
  2011d8:	bf0c      	ite	eq
  2011da:	2203      	moveq	r2, #3
  2011dc:	2200      	movne	r2, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  2011de:	6941      	ldr	r1, [r0, #20]
  2011e0:	f001 010f 	and.w	r1, r1, #15
  2011e4:	2901      	cmp	r1, #1
  2011e6:	d003      	beq.n	2011f0 <main+0x590>
  2011e8:	2902      	cmp	r1, #2
  2011ea:	d103      	bne.n	2011f4 <main+0x594>
    ccer |= STM32_TIM_CCER_CC2P;
  2011ec:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  2011f0:	f042 0210 	orr.w	r2, r2, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  2011f4:	69c1      	ldr	r1, [r0, #28]
  2011f6:	f001 010f 	and.w	r1, r1, #15
  2011fa:	2901      	cmp	r1, #1
  2011fc:	d003      	beq.n	201206 <main+0x5a6>
  2011fe:	2902      	cmp	r1, #2
  201200:	d103      	bne.n	20120a <main+0x5aa>
    ccer |= STM32_TIM_CCER_CC3P;
  201202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  201206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  20120a:	6a41      	ldr	r1, [r0, #36]	; 0x24
  20120c:	f001 010f 	and.w	r1, r1, #15
  201210:	2901      	cmp	r1, #1
  201212:	d003      	beq.n	20121c <main+0x5bc>
  201214:	2902      	cmp	r1, #2
  201216:	d103      	bne.n	201220 <main+0x5c0>
    ccer |= STM32_TIM_CCER_CC4P;
  201218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  20121c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201220:	6c01      	ldr	r1, [r0, #64]	; 0x40
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201222:	2400      	movs	r4, #0
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201224:	2701      	movs	r7, #1
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  201226:	2685      	movs	r6, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201228:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
  20122c:	2002      	movs	r0, #2
  pwmp->tim->CCER  = ccer;
  20122e:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201230:	615f      	str	r7, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201232:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201234:	60d9      	str	r1, [r3, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  201236:	601e      	str	r6, [r3, #0]
  pwmp->enabled = 0;
  201238:	60ec      	str	r4, [r5, #12]
  pwmp->state = PWM_READY;
  20123a:	7028      	strb	r0, [r5, #0]
  20123c:	f384 8811 	msr	BASEPRI, r4

    sdWrite(&SD7, "Press W or S \r\n", 16);

    while (true)
       {
           char sym = sdGet(&SD7);
  201240:	f8df 813c 	ldr.w	r8, [pc, #316]	; 201380 <main+0x720>
    sdWrite(&SD7, "Press W or S \r\n", 16);
  201244:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201248:	2210      	movs	r2, #16
  20124a:	4944      	ldr	r1, [pc, #272]	; (20135c <main+0x6fc>)
  20124c:	f108 0024 	add.w	r0, r8, #36	; 0x24
           }
           else if ((sym == 's')||(sym == 'S'))
           {
               bright -= 1000;
               if (bright<0) bright = 0;
               sdWrite(&SD7, "Bright -10% \r\n", 16);
  201250:	f8df 9130 	ldr.w	r9, [pc, #304]	; 201384 <main+0x724>
  201254:	4607      	mov	r7, r0
    sdWrite(&SD7, "Press W or S \r\n", 16);
  201256:	f7ff fbab 	bl	2009b0 <oqWriteTimeout>
  20125a:	e01a      	b.n	201292 <main+0x632>
  20125c:	45f4      	cmp	ip, lr
  20125e:	4664      	mov	r4, ip
  201260:	bfa8      	it	ge
  201262:	4674      	movge	r4, lr
               sdWrite(&SD7, "Bright +10% \r\n", 16);
  201264:	f7ff fba4 	bl	2009b0 <oqWriteTimeout>
  201268:	2120      	movs	r1, #32
  20126a:	f381 8811 	msr	BASEPRI, r1

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
  20126e:	68eb      	ldr	r3, [r5, #12]
  201270:	2600      	movs	r6, #0
    pwmp->tim->CCR[channel] = width;
  201272:	69aa      	ldr	r2, [r5, #24]
  201274:	f043 0304 	orr.w	r3, r3, #4
  201278:	63d4      	str	r4, [r2, #60]	; 0x3c
  20127a:	60eb      	str	r3, [r5, #12]
  20127c:	f386 8811 	msr	BASEPRI, r6
  201280:	f381 8811 	msr	BASEPRI, r1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  201284:	f44f 7196 	mov.w	r1, #300	; 0x12c
  201288:	2008      	movs	r0, #8
  20128a:	f7ff fb31 	bl	2008f0 <chSchGoSleepTimeoutS>
  20128e:	f386 8811 	msr	BASEPRI, r6
           char sym = sdGet(&SD7);
  201292:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201296:	4640      	mov	r0, r8
  201298:	f7ff fcaa 	bl	200bf0 <iqGetTimeout>
           if ((sym == 'w')||(sym == 'W'))
  20129c:	f000 06df 	and.w	r6, r0, #223	; 0xdf
               bright += 1000;
  2012a0:	f504 7c7a 	add.w	ip, r4, #1000	; 0x3e8
  2012a4:	f242 7e10 	movw	lr, #10000	; 0x2710
           if ((sym == 'w')||(sym == 'W'))
  2012a8:	2e57      	cmp	r6, #87	; 0x57
               sdWrite(&SD7, "Bright +10% \r\n", 16);
  2012aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2012ae:	f04f 0210 	mov.w	r2, #16
  2012b2:	492b      	ldr	r1, [pc, #172]	; (201360 <main+0x700>)
  2012b4:	4638      	mov	r0, r7
           if ((sym == 'w')||(sym == 'W'))
  2012b6:	d0d1      	beq.n	20125c <main+0x5fc>
           else if ((sym == 's')||(sym == 'S'))
  2012b8:	2e53      	cmp	r6, #83	; 0x53
               sdWrite(&SD7, "Bright -10% \r\n", 16);
  2012ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
               bright -= 1000;
  2012be:	f5a4 767a 	sub.w	r6, r4, #1000	; 0x3e8
               sdWrite(&SD7, "Bright -10% \r\n", 16);
  2012c2:	f04f 0210 	mov.w	r2, #16
  2012c6:	4649      	mov	r1, r9
  2012c8:	4638      	mov	r0, r7
           else if ((sym == 's')||(sym == 'S'))
  2012ca:	d1cd      	bne.n	201268 <main+0x608>
  2012cc:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
               sdWrite(&SD7, "Bright -10% \r\n", 16);
  2012d0:	f7ff fb6e 	bl	2009b0 <oqWriteTimeout>
  2012d4:	e7c8      	b.n	201268 <main+0x608>
  tp->state = CH_STATE_READY;
  2012d6:	f882 0020 	strb.w	r0, [r2, #32]
  2012da:	e7fe      	b.n	2012da <main+0x67a>
      rccEnableTIM3(FALSE);
  2012dc:	4a21      	ldr	r2, [pc, #132]	; (201364 <main+0x704>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2012de:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2012e2:	4f14      	ldr	r7, [pc, #80]	; (201334 <main+0x6d4>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  2012e4:	f646 0e68 	movw	lr, #26728	; 0x6868
      rccEnableTIM3(FALSE);
  2012e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
  2012ea:	f04f 0870 	mov.w	r8, #112	; 0x70
  2012ee:	f043 0302 	orr.w	r3, r3, #2
  2012f2:	6413      	str	r3, [r2, #64]	; 0x40
      rccResetTIM3();
  2012f4:	6a11      	ldr	r1, [r2, #32]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  2012f6:	69ab      	ldr	r3, [r5, #24]
      rccResetTIM3();
  2012f8:	f041 0102 	orr.w	r1, r1, #2
  2012fc:	6211      	str	r1, [r2, #32]
  2012fe:	6214      	str	r4, [r2, #32]
      pwmp->clock = STM32_TIMCLK1;
  201300:	4919      	ldr	r1, [pc, #100]	; (201368 <main+0x708>)
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  201302:	4a1a      	ldr	r2, [pc, #104]	; (20136c <main+0x70c>)
  201304:	f887 831d 	strb.w	r8, [r7, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201308:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
      pwmp->clock = STM32_TIMCLK1;
  20130c:	6169      	str	r1, [r5, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20130e:	f8c7 c000 	str.w	ip, [r7]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  201312:	f8c3 e018 	str.w	lr, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  201316:	f8c3 e01c 	str.w	lr, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  20131a:	655a      	str	r2, [r3, #84]	; 0x54
  20131c:	e74c      	b.n	2011b8 <main+0x558>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  20131e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  201320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  201324:	6403      	str	r3, [r0, #64]	; 0x40
  201326:	e700      	b.n	20112a <main+0x4ca>
  201328:	080016dc 	.word	0x080016dc
  20132c:	20000800 	.word	0x20000800
  201330:	40000400 	.word	0x40000400
  201334:	e000e100 	.word	0xe000e100
  201338:	00034bbf 	.word	0x00034bbf
  20133c:	00200311 	.word	0x00200311
  201340:	40007800 	.word	0x40007800
  201344:	0337f980 	.word	0x0337f980
  201348:	e000ed00 	.word	0xe000ed00
  20134c:	1b4e81b5 	.word	0x1b4e81b5
  201350:	40021000 	.word	0x40021000
  201354:	40020400 	.word	0x40020400
  201358:	20020000 	.word	0x20020000
  20135c:	0800162c 	.word	0x0800162c
  201360:	0800163c 	.word	0x0800163c
  201364:	40023800 	.word	0x40023800
  201368:	066ff300 	.word	0x066ff300
  20136c:	01016868 	.word	0x01016868
  201370:	3cccf000 	.word	0x3cccf000
  201374:	51155555 	.word	0x51155555
  201378:	00b0b000 	.word	0x00b0b000
  20137c:	55555550 	.word	0x55555550
  201380:	20000828 	.word	0x20000828
  201384:	0800164c 	.word	0x0800164c
	...

00201390 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  201390:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201392:	4b33      	ldr	r3, [pc, #204]	; (201460 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201394:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  201398:	4a32      	ldr	r2, [pc, #200]	; (201464 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20139a:	4c33      	ldr	r4, [pc, #204]	; (201468 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20139c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20139e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2013a0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2013a2:	681a      	ldr	r2, [r3, #0]
  2013a4:	f042 0201 	orr.w	r2, r2, #1
  2013a8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2013aa:	680b      	ldr	r3, [r1, #0]
  2013ac:	079b      	lsls	r3, r3, #30
  2013ae:	d5fc      	bpl.n	2013aa <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2013b0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2013b2:	4a2b      	ldr	r2, [pc, #172]	; (201460 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2013b4:	f023 0303 	bic.w	r3, r3, #3
  2013b8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  2013ba:	688b      	ldr	r3, [r1, #8]
  2013bc:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2013be:	6893      	ldr	r3, [r2, #8]
  2013c0:	f013 030c 	ands.w	r3, r3, #12
  2013c4:	d1fb      	bne.n	2013be <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2013c6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2013c8:	4925      	ldr	r1, [pc, #148]	; (201460 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2013ca:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2013ce:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2013d0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2013d2:	6813      	ldr	r3, [r2, #0]
  2013d4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2013d8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2013da:	680b      	ldr	r3, [r1, #0]
  2013dc:	039d      	lsls	r5, r3, #14
  2013de:	d5fc      	bpl.n	2013da <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2013e0:	4b22      	ldr	r3, [pc, #136]	; (20146c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2013e2:	4820      	ldr	r0, [pc, #128]	; (201464 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2013e4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  2013e6:	680b      	ldr	r3, [r1, #0]
  2013e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2013ec:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2013ee:	6843      	ldr	r3, [r0, #4]
  2013f0:	045c      	lsls	r4, r3, #17
  2013f2:	d5fc      	bpl.n	2013ee <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  2013f4:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2013f6:	4a1b      	ldr	r2, [pc, #108]	; (201464 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  2013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2013fc:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2013fe:	6853      	ldr	r3, [r2, #4]
  201400:	03d9      	lsls	r1, r3, #15
  201402:	d5fc      	bpl.n	2013fe <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201404:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201406:	4917      	ldr	r1, [pc, #92]	; (201464 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20140c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20140e:	684b      	ldr	r3, [r1, #4]
  201410:	039a      	lsls	r2, r3, #14
  201412:	d5fc      	bpl.n	20140e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201414:	4a12      	ldr	r2, [pc, #72]	; (201460 <__early_init+0xd0>)
  201416:	6813      	ldr	r3, [r2, #0]
  201418:	019b      	lsls	r3, r3, #6
  20141a:	d5fc      	bpl.n	201416 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20141c:	4b14      	ldr	r3, [pc, #80]	; (201470 <__early_init+0xe0>)
  20141e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201422:	4d14      	ldr	r5, [pc, #80]	; (201474 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201424:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201428:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20142a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20142c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201430:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201434:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201436:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201438:	4909      	ldr	r1, [pc, #36]	; (201460 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20143a:	f043 0302 	orr.w	r3, r3, #2
  20143e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201440:	688b      	ldr	r3, [r1, #8]
  201442:	f003 030c 	and.w	r3, r3, #12
  201446:	2b08      	cmp	r3, #8
  201448:	d1fa      	bne.n	201440 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20144a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201450:	644b      	str	r3, [r1, #68]	; 0x44
  201452:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201458:	bc30      	pop	{r4, r5}
  20145a:	664b      	str	r3, [r1, #100]	; 0x64
  20145c:	4770      	bx	lr
  20145e:	bf00      	nop
  201460:	40023800 	.word	0x40023800
  201464:	40007000 	.word	0x40007000
  201468:	10000400 	.word	0x10000400
  20146c:	09406c08 	.word	0x09406c08
  201470:	40023c00 	.word	0x40023c00
  201474:	30999400 	.word	0x30999400
	...

00201480 <chThdExit>:
void chThdExit(msg_t msg) {
  201480:	b538      	push	{r3, r4, r5, lr}
  201482:	2220      	movs	r2, #32
  201484:	4603      	mov	r3, r0
  201486:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20148a:	4a10      	ldr	r2, [pc, #64]	; (2014cc <chThdExit+0x4c>)
  20148c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20148e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201492:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201494:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201496:	4285      	cmp	r5, r0
  201498:	d006      	beq.n	2014a8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20149a:	6803      	ldr	r3, [r0, #0]
  20149c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20149e:	f7ff f8e7 	bl	200670 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  2014a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  2014a4:	42a8      	cmp	r0, r5
  2014a6:	d1f8      	bne.n	20149a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  2014a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  2014ac:	b943      	cbnz	r3, 2014c0 <chThdExit+0x40>
  2014ae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  2014b2:	079b      	lsls	r3, r3, #30
  2014b4:	d104      	bne.n	2014c0 <chThdExit+0x40>
    REG_REMOVE(tp);
  2014b6:	6922      	ldr	r2, [r4, #16]
  2014b8:	6963      	ldr	r3, [r4, #20]
  2014ba:	611a      	str	r2, [r3, #16]
  2014bc:	6922      	ldr	r2, [r4, #16]
  2014be:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  2014c0:	200f      	movs	r0, #15
}
  2014c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  2014c6:	f7ff b9fb 	b.w	2008c0 <chSchGoSleepS>
  2014ca:	bf00      	nop
  2014cc:	2000087c 	.word	0x2000087c

002014d0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2014d0:	4a0e      	ldr	r2, [pc, #56]	; (20150c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2014d2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2014d4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2014d6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2014d8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2014da:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2014dc:	6994      	ldr	r4, [r2, #24]
  2014de:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2014e0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  2014e2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  2014e6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  2014ea:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2014ec:	6190      	str	r0, [r2, #24]
  2014ee:	e000      	b.n	2014f2 <chSchDoReschedule+0x22>
  2014f0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  2014f2:	689a      	ldr	r2, [r3, #8]
  2014f4:	4291      	cmp	r1, r2
  2014f6:	d3fb      	bcc.n	2014f0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  2014f8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  2014fa:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  2014fc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2014fe:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201500:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201502:	605c      	str	r4, [r3, #4]
}
  201504:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201506:	f7fe bee5 	b.w	2002d4 <_port_switch>
  20150a:	bf00      	nop
  20150c:	2000087c 	.word	0x2000087c

00201510 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201510:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201512:	4f12      	ldr	r7, [pc, #72]	; (20155c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201514:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201516:	4d12      	ldr	r5, [pc, #72]	; (201560 <__init_ram_areas+0x50>)
  201518:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20151c:	4c11      	ldr	r4, [pc, #68]	; (201564 <__init_ram_areas+0x54>)
  20151e:	4b12      	ldr	r3, [pc, #72]	; (201568 <__init_ram_areas+0x58>)
  201520:	4912      	ldr	r1, [pc, #72]	; (20156c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201522:	429c      	cmp	r4, r3
  201524:	d911      	bls.n	20154a <__init_ram_areas+0x3a>
  201526:	3904      	subs	r1, #4
  201528:	461a      	mov	r2, r3
      *p = *tp;
  20152a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20152e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201532:	4294      	cmp	r4, r2
  201534:	d8f9      	bhi.n	20152a <__init_ram_areas+0x1a>
  201536:	43da      	mvns	r2, r3
  201538:	4414      	add	r4, r2
  20153a:	f024 0403 	bic.w	r4, r4, #3
  20153e:	3404      	adds	r4, #4
  201540:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201542:	429d      	cmp	r5, r3
  201544:	d903      	bls.n	20154e <__init_ram_areas+0x3e>
      *p = 0;
  201546:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20154a:	429d      	cmp	r5, r3
  20154c:	d8fb      	bhi.n	201546 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20154e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201550:	4577      	cmp	r7, lr
  201552:	d202      	bcs.n	20155a <__init_ram_areas+0x4a>
  201554:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201558:	e7e3      	b.n	201522 <__init_ram_areas+0x12>
  20155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20155c:	0800165c 	.word	0x0800165c
  201560:	20020044 	.word	0x20020044
  201564:	20020044 	.word	0x20020044
  201568:	20020044 	.word	0x20020044
  20156c:	08001740 	.word	0x08001740

00201570 <__default_exit>:
void __default_exit(void) {
  201570:	e7fe      	b.n	201570 <__default_exit>
  201572:	bf00      	nop
	...

00201580 <__late_init>:
void __late_init(void) {}
  201580:	4770      	bx	lr
  201582:	bf00      	nop
	...

00201590 <__core_init>:
void __core_init(void) {
  201590:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201596:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20159a:	4c1b      	ldr	r4, [pc, #108]	; (201608 <__core_init+0x78>)
  20159c:	2200      	movs	r2, #0
  20159e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2015a2:	6963      	ldr	r3, [r4, #20]
  2015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2015a8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2015aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2015ae:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2015b2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2015b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2015ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2015be:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2015c2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2015c6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2015ca:	07b7      	lsls	r7, r6, #30
  2015cc:	015d      	lsls	r5, r3, #5
  2015ce:	ea05 000e 	and.w	r0, r5, lr
  2015d2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2015d4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2015d6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2015da:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2015dc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2015e0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  2015e4:	1c53      	adds	r3, r2, #1
  2015e6:	d1f6      	bne.n	2015d6 <__core_init+0x46>
  2015e8:	3d20      	subs	r5, #32
    } while(sets--);
  2015ea:	f115 0f20 	cmn.w	r5, #32
  2015ee:	d1ee      	bne.n	2015ce <__core_init+0x3e>
  2015f0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  2015f4:	6963      	ldr	r3, [r4, #20]
  2015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2015fa:	6163      	str	r3, [r4, #20]
  2015fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201600:	f3bf 8f6f 	isb	sy
  201604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201606:	bf00      	nop
  201608:	e000ed00 	.word	0xe000ed00
