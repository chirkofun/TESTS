
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fd87 	bl	201d30 <__core_init>
  200222:	f001 f9c5 	bl	2015b0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fd21 	bl	201cb0 <__init_ram_areas>
  20026e:	f001 fd57 	bl	201d20 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f001 fd95 	bl	201db0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 bd3b 	b.w	201d10 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08002d98 	.word	0x08002d98
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020010 	.word	0x20020010
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000a20 	.word	0x20000a20
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 fcb6 	bl	201c60 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 f9fc 	bl	2016f0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_dmul>:
  20066c:	b570      	push	{r4, r5, r6, lr}
  20066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  20067a:	bf1d      	ittte	ne
  20067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200680:	ea94 0f0c 	teqne	r4, ip
  200684:	ea95 0f0c 	teqne	r5, ip
  200688:	f000 f8de 	bleq	200848 <__aeabi_dmul+0x1dc>
  20068c:	442c      	add	r4, r5
  20068e:	ea81 0603 	eor.w	r6, r1, r3
  200692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  200696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  20069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  20069e:	bf18      	it	ne
  2006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2006ac:	d038      	beq.n	200720 <__aeabi_dmul+0xb4>
  2006ae:	fba0 ce02 	umull	ip, lr, r0, r2
  2006b2:	f04f 0500 	mov.w	r5, #0
  2006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2006be:	fbe0 e503 	umlal	lr, r5, r0, r3
  2006c2:	f04f 0600 	mov.w	r6, #0
  2006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2006ca:	f09c 0f00 	teq	ip, #0
  2006ce:	bf18      	it	ne
  2006d0:	f04e 0e01 	orrne.w	lr, lr, #1
  2006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  2006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  2006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  2006e0:	d204      	bcs.n	2006ec <__aeabi_dmul+0x80>
  2006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  2006e6:	416d      	adcs	r5, r5
  2006e8:	eb46 0606 	adc.w	r6, r6, r6
  2006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  2006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  2006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  2006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  2006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200704:	bf88      	it	hi
  200706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20070a:	d81e      	bhi.n	20074a <__aeabi_dmul+0xde>
  20070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200710:	bf08      	it	eq
  200712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200716:	f150 0000 	adcs.w	r0, r0, #0
  20071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20071e:	bd70      	pop	{r4, r5, r6, pc}
  200720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200724:	ea46 0101 	orr.w	r1, r6, r1
  200728:	ea40 0002 	orr.w	r0, r0, r2
  20072c:	ea81 0103 	eor.w	r1, r1, r3
  200730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200734:	bfc2      	ittt	gt
  200736:	ebd4 050c 	rsbsgt	r5, r4, ip
  20073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20073e:	bd70      	popgt	{r4, r5, r6, pc}
  200740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200744:	f04f 0e00 	mov.w	lr, #0
  200748:	3c01      	subs	r4, #1
  20074a:	f300 80ab 	bgt.w	2008a4 <__aeabi_dmul+0x238>
  20074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200752:	bfde      	ittt	le
  200754:	2000      	movle	r0, #0
  200756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20075a:	bd70      	pople	{r4, r5, r6, pc}
  20075c:	f1c4 0400 	rsb	r4, r4, #0
  200760:	3c20      	subs	r4, #32
  200762:	da35      	bge.n	2007d0 <__aeabi_dmul+0x164>
  200764:	340c      	adds	r4, #12
  200766:	dc1b      	bgt.n	2007a0 <__aeabi_dmul+0x134>
  200768:	f104 0414 	add.w	r4, r4, #20
  20076c:	f1c4 0520 	rsb	r5, r4, #32
  200770:	fa00 f305 	lsl.w	r3, r0, r5
  200774:	fa20 f004 	lsr.w	r0, r0, r4
  200778:	fa01 f205 	lsl.w	r2, r1, r5
  20077c:	ea40 0002 	orr.w	r0, r0, r2
  200780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  200784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  20078c:	fa21 f604 	lsr.w	r6, r1, r4
  200790:	eb42 0106 	adc.w	r1, r2, r6
  200794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200798:	bf08      	it	eq
  20079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20079e:	bd70      	pop	{r4, r5, r6, pc}
  2007a0:	f1c4 040c 	rsb	r4, r4, #12
  2007a4:	f1c4 0520 	rsb	r5, r4, #32
  2007a8:	fa00 f304 	lsl.w	r3, r0, r4
  2007ac:	fa20 f005 	lsr.w	r0, r0, r5
  2007b0:	fa01 f204 	lsl.w	r2, r1, r4
  2007b4:	ea40 0002 	orr.w	r0, r0, r2
  2007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2007c0:	f141 0100 	adc.w	r1, r1, #0
  2007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2007c8:	bf08      	it	eq
  2007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2007ce:	bd70      	pop	{r4, r5, r6, pc}
  2007d0:	f1c4 0520 	rsb	r5, r4, #32
  2007d4:	fa00 f205 	lsl.w	r2, r0, r5
  2007d8:	ea4e 0e02 	orr.w	lr, lr, r2
  2007dc:	fa20 f304 	lsr.w	r3, r0, r4
  2007e0:	fa01 f205 	lsl.w	r2, r1, r5
  2007e4:	ea43 0302 	orr.w	r3, r3, r2
  2007e8:	fa21 f004 	lsr.w	r0, r1, r4
  2007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007f0:	fa21 f204 	lsr.w	r2, r1, r4
  2007f4:	ea20 0002 	bic.w	r0, r0, r2
  2007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  2007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200800:	bf08      	it	eq
  200802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200806:	bd70      	pop	{r4, r5, r6, pc}
  200808:	f094 0f00 	teq	r4, #0
  20080c:	d10f      	bne.n	20082e <__aeabi_dmul+0x1c2>
  20080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200812:	0040      	lsls	r0, r0, #1
  200814:	eb41 0101 	adc.w	r1, r1, r1
  200818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20081c:	bf08      	it	eq
  20081e:	3c01      	subeq	r4, #1
  200820:	d0f7      	beq.n	200812 <__aeabi_dmul+0x1a6>
  200822:	ea41 0106 	orr.w	r1, r1, r6
  200826:	f095 0f00 	teq	r5, #0
  20082a:	bf18      	it	ne
  20082c:	4770      	bxne	lr
  20082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200832:	0052      	lsls	r2, r2, #1
  200834:	eb43 0303 	adc.w	r3, r3, r3
  200838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20083c:	bf08      	it	eq
  20083e:	3d01      	subeq	r5, #1
  200840:	d0f7      	beq.n	200832 <__aeabi_dmul+0x1c6>
  200842:	ea43 0306 	orr.w	r3, r3, r6
  200846:	4770      	bx	lr
  200848:	ea94 0f0c 	teq	r4, ip
  20084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200850:	bf18      	it	ne
  200852:	ea95 0f0c 	teqne	r5, ip
  200856:	d00c      	beq.n	200872 <__aeabi_dmul+0x206>
  200858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20085c:	bf18      	it	ne
  20085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200862:	d1d1      	bne.n	200808 <__aeabi_dmul+0x19c>
  200864:	ea81 0103 	eor.w	r1, r1, r3
  200868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20086c:	f04f 0000 	mov.w	r0, #0
  200870:	bd70      	pop	{r4, r5, r6, pc}
  200872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200876:	bf06      	itte	eq
  200878:	4610      	moveq	r0, r2
  20087a:	4619      	moveq	r1, r3
  20087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200880:	d019      	beq.n	2008b6 <__aeabi_dmul+0x24a>
  200882:	ea94 0f0c 	teq	r4, ip
  200886:	d102      	bne.n	20088e <__aeabi_dmul+0x222>
  200888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  20088c:	d113      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  20088e:	ea95 0f0c 	teq	r5, ip
  200892:	d105      	bne.n	2008a0 <__aeabi_dmul+0x234>
  200894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  200898:	bf1c      	itt	ne
  20089a:	4610      	movne	r0, r2
  20089c:	4619      	movne	r1, r3
  20089e:	d10a      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  2008a0:	ea81 0103 	eor.w	r1, r1, r3
  2008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2008b0:	f04f 0000 	mov.w	r0, #0
  2008b4:	bd70      	pop	{r4, r5, r6, pc}
  2008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2008be:	bd70      	pop	{r4, r5, r6, pc}

002008c0 <__aeabi_ddiv>:
  2008c0:	b570      	push	{r4, r5, r6, lr}
  2008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2008ce:	bf1d      	ittte	ne
  2008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2008d4:	ea94 0f0c 	teqne	r4, ip
  2008d8:	ea95 0f0c 	teqne	r5, ip
  2008dc:	f000 f8a7 	bleq	200a2e <__aeabi_ddiv+0x16e>
  2008e0:	eba4 0405 	sub.w	r4, r4, r5
  2008e4:	ea81 0e03 	eor.w	lr, r1, r3
  2008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  2008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2008f0:	f000 8088 	beq.w	200a04 <__aeabi_ddiv+0x144>
  2008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  2008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200918:	429d      	cmp	r5, r3
  20091a:	bf08      	it	eq
  20091c:	4296      	cmpeq	r6, r2
  20091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200926:	d202      	bcs.n	20092e <__aeabi_ddiv+0x6e>
  200928:	085b      	lsrs	r3, r3, #1
  20092a:	ea4f 0232 	mov.w	r2, r2, rrx
  20092e:	1ab6      	subs	r6, r6, r2
  200930:	eb65 0503 	sbc.w	r5, r5, r3
  200934:	085b      	lsrs	r3, r3, #1
  200936:	ea4f 0232 	mov.w	r2, r2, rrx
  20093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200942:	ebb6 0e02 	subs.w	lr, r6, r2
  200946:	eb75 0e03 	sbcs.w	lr, r5, r3
  20094a:	bf22      	ittt	cs
  20094c:	1ab6      	subcs	r6, r6, r2
  20094e:	4675      	movcs	r5, lr
  200950:	ea40 000c 	orrcs.w	r0, r0, ip
  200954:	085b      	lsrs	r3, r3, #1
  200956:	ea4f 0232 	mov.w	r2, r2, rrx
  20095a:	ebb6 0e02 	subs.w	lr, r6, r2
  20095e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200962:	bf22      	ittt	cs
  200964:	1ab6      	subcs	r6, r6, r2
  200966:	4675      	movcs	r5, lr
  200968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20096c:	085b      	lsrs	r3, r3, #1
  20096e:	ea4f 0232 	mov.w	r2, r2, rrx
  200972:	ebb6 0e02 	subs.w	lr, r6, r2
  200976:	eb75 0e03 	sbcs.w	lr, r5, r3
  20097a:	bf22      	ittt	cs
  20097c:	1ab6      	subcs	r6, r6, r2
  20097e:	4675      	movcs	r5, lr
  200980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200984:	085b      	lsrs	r3, r3, #1
  200986:	ea4f 0232 	mov.w	r2, r2, rrx
  20098a:	ebb6 0e02 	subs.w	lr, r6, r2
  20098e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200992:	bf22      	ittt	cs
  200994:	1ab6      	subcs	r6, r6, r2
  200996:	4675      	movcs	r5, lr
  200998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  20099c:	ea55 0e06 	orrs.w	lr, r5, r6
  2009a0:	d018      	beq.n	2009d4 <__aeabi_ddiv+0x114>
  2009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2009be:	d1c0      	bne.n	200942 <__aeabi_ddiv+0x82>
  2009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009c4:	d10b      	bne.n	2009de <__aeabi_ddiv+0x11e>
  2009c6:	ea41 0100 	orr.w	r1, r1, r0
  2009ca:	f04f 0000 	mov.w	r0, #0
  2009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  2009d2:	e7b6      	b.n	200942 <__aeabi_ddiv+0x82>
  2009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009d8:	bf04      	itt	eq
  2009da:	4301      	orreq	r1, r0
  2009dc:	2000      	moveq	r0, #0
  2009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  2009e2:	bf88      	it	hi
  2009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  2009e8:	f63f aeaf 	bhi.w	20074a <__aeabi_dmul+0xde>
  2009ec:	ebb5 0c03 	subs.w	ip, r5, r3
  2009f0:	bf04      	itt	eq
  2009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  2009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  2009fa:	f150 0000 	adcs.w	r0, r0, #0
  2009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200a02:	bd70      	pop	{r4, r5, r6, pc}
  200a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200a10:	bfc2      	ittt	gt
  200a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  200a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200a1a:	bd70      	popgt	{r4, r5, r6, pc}
  200a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200a20:	f04f 0e00 	mov.w	lr, #0
  200a24:	3c01      	subs	r4, #1
  200a26:	e690      	b.n	20074a <__aeabi_dmul+0xde>
  200a28:	ea45 0e06 	orr.w	lr, r5, r6
  200a2c:	e68d      	b.n	20074a <__aeabi_dmul+0xde>
  200a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200a32:	ea94 0f0c 	teq	r4, ip
  200a36:	bf08      	it	eq
  200a38:	ea95 0f0c 	teqeq	r5, ip
  200a3c:	f43f af3b 	beq.w	2008b6 <__aeabi_dmul+0x24a>
  200a40:	ea94 0f0c 	teq	r4, ip
  200a44:	d10a      	bne.n	200a5c <__aeabi_ddiv+0x19c>
  200a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200a4a:	f47f af34 	bne.w	2008b6 <__aeabi_dmul+0x24a>
  200a4e:	ea95 0f0c 	teq	r5, ip
  200a52:	f47f af25 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a56:	4610      	mov	r0, r2
  200a58:	4619      	mov	r1, r3
  200a5a:	e72c      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a5c:	ea95 0f0c 	teq	r5, ip
  200a60:	d106      	bne.n	200a70 <__aeabi_ddiv+0x1b0>
  200a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a66:	f43f aefd 	beq.w	200864 <__aeabi_dmul+0x1f8>
  200a6a:	4610      	mov	r0, r2
  200a6c:	4619      	mov	r1, r3
  200a6e:	e722      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200a74:	bf18      	it	ne
  200a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200a7a:	f47f aec5 	bne.w	200808 <__aeabi_dmul+0x19c>
  200a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200a82:	f47f af0d 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200a8a:	f47f aeeb 	bne.w	200864 <__aeabi_dmul+0x1f8>
  200a8e:	e712      	b.n	2008b6 <__aeabi_dmul+0x24a>

00200a90 <__aeabi_d2f>:
  200a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  200a98:	bf24      	itt	cs
  200a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  200a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  200aa2:	d90d      	bls.n	200ac0 <__aeabi_d2f+0x30>
  200aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  200aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  200ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  200ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  200ab8:	bf08      	it	eq
  200aba:	f020 0001 	biceq.w	r0, r0, #1
  200abe:	4770      	bx	lr
  200ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  200ac4:	d121      	bne.n	200b0a <__aeabi_d2f+0x7a>
  200ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  200aca:	bfbc      	itt	lt
  200acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  200ad0:	4770      	bxlt	lr
  200ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  200ada:	f1c2 0218 	rsb	r2, r2, #24
  200ade:	f1c2 0c20 	rsb	ip, r2, #32
  200ae2:	fa10 f30c 	lsls.w	r3, r0, ip
  200ae6:	fa20 f002 	lsr.w	r0, r0, r2
  200aea:	bf18      	it	ne
  200aec:	f040 0001 	orrne.w	r0, r0, #1
  200af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  200af8:	fa03 fc0c 	lsl.w	ip, r3, ip
  200afc:	ea40 000c 	orr.w	r0, r0, ip
  200b00:	fa23 f302 	lsr.w	r3, r3, r2
  200b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
  200b08:	e7cc      	b.n	200aa4 <__aeabi_d2f+0x14>
  200b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  200b0e:	d107      	bne.n	200b20 <__aeabi_d2f+0x90>
  200b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  200b14:	bf1e      	ittt	ne
  200b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  200b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  200b1e:	4770      	bxne	lr
  200b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  200b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200b2c:	4770      	bx	lr
  200b2e:	bf00      	nop

00200b30 <__aeabi_frsub>:
  200b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  200b34:	e002      	b.n	200b3c <__addsf3>
  200b36:	bf00      	nop

00200b38 <__aeabi_fsub>:
  200b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00200b3c <__addsf3>:
  200b3c:	0042      	lsls	r2, r0, #1
  200b3e:	bf1f      	itttt	ne
  200b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  200b44:	ea92 0f03 	teqne	r2, r3
  200b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  200b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200b50:	d06a      	beq.n	200c28 <__addsf3+0xec>
  200b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
  200b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  200b5a:	bfc1      	itttt	gt
  200b5c:	18d2      	addgt	r2, r2, r3
  200b5e:	4041      	eorgt	r1, r0
  200b60:	4048      	eorgt	r0, r1
  200b62:	4041      	eorgt	r1, r0
  200b64:	bfb8      	it	lt
  200b66:	425b      	neglt	r3, r3
  200b68:	2b19      	cmp	r3, #25
  200b6a:	bf88      	it	hi
  200b6c:	4770      	bxhi	lr
  200b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  200b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  200b7a:	bf18      	it	ne
  200b7c:	4240      	negne	r0, r0
  200b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  200b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  200b8a:	bf18      	it	ne
  200b8c:	4249      	negne	r1, r1
  200b8e:	ea92 0f03 	teq	r2, r3
  200b92:	d03f      	beq.n	200c14 <__addsf3+0xd8>
  200b94:	f1a2 0201 	sub.w	r2, r2, #1
  200b98:	fa41 fc03 	asr.w	ip, r1, r3
  200b9c:	eb10 000c 	adds.w	r0, r0, ip
  200ba0:	f1c3 0320 	rsb	r3, r3, #32
  200ba4:	fa01 f103 	lsl.w	r1, r1, r3
  200ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  200bac:	d502      	bpl.n	200bb4 <__addsf3+0x78>
  200bae:	4249      	negs	r1, r1
  200bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  200bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  200bb8:	d313      	bcc.n	200be2 <__addsf3+0xa6>
  200bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  200bbe:	d306      	bcc.n	200bce <__addsf3+0x92>
  200bc0:	0840      	lsrs	r0, r0, #1
  200bc2:	ea4f 0131 	mov.w	r1, r1, rrx
  200bc6:	f102 0201 	add.w	r2, r2, #1
  200bca:	2afe      	cmp	r2, #254	; 0xfe
  200bcc:	d251      	bcs.n	200c72 <__addsf3+0x136>
  200bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  200bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200bd6:	bf08      	it	eq
  200bd8:	f020 0001 	biceq.w	r0, r0, #1
  200bdc:	ea40 0003 	orr.w	r0, r0, r3
  200be0:	4770      	bx	lr
  200be2:	0049      	lsls	r1, r1, #1
  200be4:	eb40 0000 	adc.w	r0, r0, r0
  200be8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  200bec:	f1a2 0201 	sub.w	r2, r2, #1
  200bf0:	d1ed      	bne.n	200bce <__addsf3+0x92>
  200bf2:	fab0 fc80 	clz	ip, r0
  200bf6:	f1ac 0c08 	sub.w	ip, ip, #8
  200bfa:	ebb2 020c 	subs.w	r2, r2, ip
  200bfe:	fa00 f00c 	lsl.w	r0, r0, ip
  200c02:	bfaa      	itet	ge
  200c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  200c08:	4252      	neglt	r2, r2
  200c0a:	4318      	orrge	r0, r3
  200c0c:	bfbc      	itt	lt
  200c0e:	40d0      	lsrlt	r0, r2
  200c10:	4318      	orrlt	r0, r3
  200c12:	4770      	bx	lr
  200c14:	f092 0f00 	teq	r2, #0
  200c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  200c1c:	bf06      	itte	eq
  200c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  200c22:	3201      	addeq	r2, #1
  200c24:	3b01      	subne	r3, #1
  200c26:	e7b5      	b.n	200b94 <__addsf3+0x58>
  200c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
  200c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  200c30:	bf18      	it	ne
  200c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200c36:	d021      	beq.n	200c7c <__addsf3+0x140>
  200c38:	ea92 0f03 	teq	r2, r3
  200c3c:	d004      	beq.n	200c48 <__addsf3+0x10c>
  200c3e:	f092 0f00 	teq	r2, #0
  200c42:	bf08      	it	eq
  200c44:	4608      	moveq	r0, r1
  200c46:	4770      	bx	lr
  200c48:	ea90 0f01 	teq	r0, r1
  200c4c:	bf1c      	itt	ne
  200c4e:	2000      	movne	r0, #0
  200c50:	4770      	bxne	lr
  200c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  200c56:	d104      	bne.n	200c62 <__addsf3+0x126>
  200c58:	0040      	lsls	r0, r0, #1
  200c5a:	bf28      	it	cs
  200c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  200c60:	4770      	bx	lr
  200c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  200c66:	bf3c      	itt	cc
  200c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  200c6c:	4770      	bxcc	lr
  200c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  200c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  200c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200c7a:	4770      	bx	lr
  200c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  200c80:	bf16      	itet	ne
  200c82:	4608      	movne	r0, r1
  200c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  200c88:	4601      	movne	r1, r0
  200c8a:	0242      	lsls	r2, r0, #9
  200c8c:	bf06      	itte	eq
  200c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  200c92:	ea90 0f01 	teqeq	r0, r1
  200c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  200c9a:	4770      	bx	lr

00200c9c <__aeabi_ui2f>:
  200c9c:	f04f 0300 	mov.w	r3, #0
  200ca0:	e004      	b.n	200cac <__aeabi_i2f+0x8>
  200ca2:	bf00      	nop

00200ca4 <__aeabi_i2f>:
  200ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  200ca8:	bf48      	it	mi
  200caa:	4240      	negmi	r0, r0
  200cac:	ea5f 0c00 	movs.w	ip, r0
  200cb0:	bf08      	it	eq
  200cb2:	4770      	bxeq	lr
  200cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  200cb8:	4601      	mov	r1, r0
  200cba:	f04f 0000 	mov.w	r0, #0
  200cbe:	e01c      	b.n	200cfa <__aeabi_l2f+0x2a>

00200cc0 <__aeabi_ul2f>:
  200cc0:	ea50 0201 	orrs.w	r2, r0, r1
  200cc4:	bf08      	it	eq
  200cc6:	4770      	bxeq	lr
  200cc8:	f04f 0300 	mov.w	r3, #0
  200ccc:	e00a      	b.n	200ce4 <__aeabi_l2f+0x14>
  200cce:	bf00      	nop

00200cd0 <__aeabi_l2f>:
  200cd0:	ea50 0201 	orrs.w	r2, r0, r1
  200cd4:	bf08      	it	eq
  200cd6:	4770      	bxeq	lr
  200cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  200cdc:	d502      	bpl.n	200ce4 <__aeabi_l2f+0x14>
  200cde:	4240      	negs	r0, r0
  200ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200ce4:	ea5f 0c01 	movs.w	ip, r1
  200ce8:	bf02      	ittt	eq
  200cea:	4684      	moveq	ip, r0
  200cec:	4601      	moveq	r1, r0
  200cee:	2000      	moveq	r0, #0
  200cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  200cf4:	bf08      	it	eq
  200cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  200cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  200cfe:	fabc f28c 	clz	r2, ip
  200d02:	3a08      	subs	r2, #8
  200d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  200d08:	db10      	blt.n	200d2c <__aeabi_l2f+0x5c>
  200d0a:	fa01 fc02 	lsl.w	ip, r1, r2
  200d0e:	4463      	add	r3, ip
  200d10:	fa00 fc02 	lsl.w	ip, r0, r2
  200d14:	f1c2 0220 	rsb	r2, r2, #32
  200d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200d1c:	fa20 f202 	lsr.w	r2, r0, r2
  200d20:	eb43 0002 	adc.w	r0, r3, r2
  200d24:	bf08      	it	eq
  200d26:	f020 0001 	biceq.w	r0, r0, #1
  200d2a:	4770      	bx	lr
  200d2c:	f102 0220 	add.w	r2, r2, #32
  200d30:	fa01 fc02 	lsl.w	ip, r1, r2
  200d34:	f1c2 0220 	rsb	r2, r2, #32
  200d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  200d3c:	fa21 f202 	lsr.w	r2, r1, r2
  200d40:	eb43 0002 	adc.w	r0, r3, r2
  200d44:	bf08      	it	eq
  200d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  200d4a:	4770      	bx	lr

00200d4c <__aeabi_fmul>:
  200d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  200d54:	bf1e      	ittt	ne
  200d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  200d5a:	ea92 0f0c 	teqne	r2, ip
  200d5e:	ea93 0f0c 	teqne	r3, ip
  200d62:	d06f      	beq.n	200e44 <__aeabi_fmul+0xf8>
  200d64:	441a      	add	r2, r3
  200d66:	ea80 0c01 	eor.w	ip, r0, r1
  200d6a:	0240      	lsls	r0, r0, #9
  200d6c:	bf18      	it	ne
  200d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  200d72:	d01e      	beq.n	200db2 <__aeabi_fmul+0x66>
  200d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  200d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  200d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  200d80:	fba0 3101 	umull	r3, r1, r0, r1
  200d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  200d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  200d8c:	bf3e      	ittt	cc
  200d8e:	0049      	lslcc	r1, r1, #1
  200d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  200d94:	005b      	lslcc	r3, r3, #1
  200d96:	ea40 0001 	orr.w	r0, r0, r1
  200d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  200d9e:	2afd      	cmp	r2, #253	; 0xfd
  200da0:	d81d      	bhi.n	200dde <__aeabi_fmul+0x92>
  200da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  200da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200daa:	bf08      	it	eq
  200dac:	f020 0001 	biceq.w	r0, r0, #1
  200db0:	4770      	bx	lr
  200db2:	f090 0f00 	teq	r0, #0
  200db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  200dba:	bf08      	it	eq
  200dbc:	0249      	lsleq	r1, r1, #9
  200dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  200dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  200dc6:	3a7f      	subs	r2, #127	; 0x7f
  200dc8:	bfc2      	ittt	gt
  200dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  200dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  200dd2:	4770      	bxgt	lr
  200dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200dd8:	f04f 0300 	mov.w	r3, #0
  200ddc:	3a01      	subs	r2, #1
  200dde:	dc5d      	bgt.n	200e9c <__aeabi_fmul+0x150>
  200de0:	f112 0f19 	cmn.w	r2, #25
  200de4:	bfdc      	itt	le
  200de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  200dea:	4770      	bxle	lr
  200dec:	f1c2 0200 	rsb	r2, r2, #0
  200df0:	0041      	lsls	r1, r0, #1
  200df2:	fa21 f102 	lsr.w	r1, r1, r2
  200df6:	f1c2 0220 	rsb	r2, r2, #32
  200dfa:	fa00 fc02 	lsl.w	ip, r0, r2
  200dfe:	ea5f 0031 	movs.w	r0, r1, rrx
  200e02:	f140 0000 	adc.w	r0, r0, #0
  200e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  200e0a:	bf08      	it	eq
  200e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  200e10:	4770      	bx	lr
  200e12:	f092 0f00 	teq	r2, #0
  200e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  200e1a:	bf02      	ittt	eq
  200e1c:	0040      	lsleq	r0, r0, #1
  200e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  200e22:	3a01      	subeq	r2, #1
  200e24:	d0f9      	beq.n	200e1a <__aeabi_fmul+0xce>
  200e26:	ea40 000c 	orr.w	r0, r0, ip
  200e2a:	f093 0f00 	teq	r3, #0
  200e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200e32:	bf02      	ittt	eq
  200e34:	0049      	lsleq	r1, r1, #1
  200e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  200e3a:	3b01      	subeq	r3, #1
  200e3c:	d0f9      	beq.n	200e32 <__aeabi_fmul+0xe6>
  200e3e:	ea41 010c 	orr.w	r1, r1, ip
  200e42:	e78f      	b.n	200d64 <__aeabi_fmul+0x18>
  200e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  200e48:	ea92 0f0c 	teq	r2, ip
  200e4c:	bf18      	it	ne
  200e4e:	ea93 0f0c 	teqne	r3, ip
  200e52:	d00a      	beq.n	200e6a <__aeabi_fmul+0x11e>
  200e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  200e58:	bf18      	it	ne
  200e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  200e5e:	d1d8      	bne.n	200e12 <__aeabi_fmul+0xc6>
  200e60:	ea80 0001 	eor.w	r0, r0, r1
  200e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  200e68:	4770      	bx	lr
  200e6a:	f090 0f00 	teq	r0, #0
  200e6e:	bf17      	itett	ne
  200e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  200e74:	4608      	moveq	r0, r1
  200e76:	f091 0f00 	teqne	r1, #0
  200e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  200e7e:	d014      	beq.n	200eaa <__aeabi_fmul+0x15e>
  200e80:	ea92 0f0c 	teq	r2, ip
  200e84:	d101      	bne.n	200e8a <__aeabi_fmul+0x13e>
  200e86:	0242      	lsls	r2, r0, #9
  200e88:	d10f      	bne.n	200eaa <__aeabi_fmul+0x15e>
  200e8a:	ea93 0f0c 	teq	r3, ip
  200e8e:	d103      	bne.n	200e98 <__aeabi_fmul+0x14c>
  200e90:	024b      	lsls	r3, r1, #9
  200e92:	bf18      	it	ne
  200e94:	4608      	movne	r0, r1
  200e96:	d108      	bne.n	200eaa <__aeabi_fmul+0x15e>
  200e98:	ea80 0001 	eor.w	r0, r0, r1
  200e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  200ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200ea8:	4770      	bx	lr
  200eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  200eb2:	4770      	bx	lr

00200eb4 <__aeabi_fdiv>:
  200eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  200ebc:	bf1e      	ittt	ne
  200ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  200ec2:	ea92 0f0c 	teqne	r2, ip
  200ec6:	ea93 0f0c 	teqne	r3, ip
  200eca:	d069      	beq.n	200fa0 <__aeabi_fdiv+0xec>
  200ecc:	eba2 0203 	sub.w	r2, r2, r3
  200ed0:	ea80 0c01 	eor.w	ip, r0, r1
  200ed4:	0249      	lsls	r1, r1, #9
  200ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
  200eda:	d037      	beq.n	200f4c <__aeabi_fdiv+0x98>
  200edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  200ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  200ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  200ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  200eec:	428b      	cmp	r3, r1
  200eee:	bf38      	it	cc
  200ef0:	005b      	lslcc	r3, r3, #1
  200ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  200ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  200efa:	428b      	cmp	r3, r1
  200efc:	bf24      	itt	cs
  200efe:	1a5b      	subcs	r3, r3, r1
  200f00:	ea40 000c 	orrcs.w	r0, r0, ip
  200f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  200f08:	bf24      	itt	cs
  200f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  200f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  200f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  200f16:	bf24      	itt	cs
  200f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  200f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  200f24:	bf24      	itt	cs
  200f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  200f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  200f2e:	011b      	lsls	r3, r3, #4
  200f30:	bf18      	it	ne
  200f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  200f36:	d1e0      	bne.n	200efa <__aeabi_fdiv+0x46>
  200f38:	2afd      	cmp	r2, #253	; 0xfd
  200f3a:	f63f af50 	bhi.w	200dde <__aeabi_fmul+0x92>
  200f3e:	428b      	cmp	r3, r1
  200f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200f44:	bf08      	it	eq
  200f46:	f020 0001 	biceq.w	r0, r0, #1
  200f4a:	4770      	bx	lr
  200f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  200f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  200f54:	327f      	adds	r2, #127	; 0x7f
  200f56:	bfc2      	ittt	gt
  200f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  200f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  200f60:	4770      	bxgt	lr
  200f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200f66:	f04f 0300 	mov.w	r3, #0
  200f6a:	3a01      	subs	r2, #1
  200f6c:	e737      	b.n	200dde <__aeabi_fmul+0x92>
  200f6e:	f092 0f00 	teq	r2, #0
  200f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  200f76:	bf02      	ittt	eq
  200f78:	0040      	lsleq	r0, r0, #1
  200f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  200f7e:	3a01      	subeq	r2, #1
  200f80:	d0f9      	beq.n	200f76 <__aeabi_fdiv+0xc2>
  200f82:	ea40 000c 	orr.w	r0, r0, ip
  200f86:	f093 0f00 	teq	r3, #0
  200f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200f8e:	bf02      	ittt	eq
  200f90:	0049      	lsleq	r1, r1, #1
  200f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  200f96:	3b01      	subeq	r3, #1
  200f98:	d0f9      	beq.n	200f8e <__aeabi_fdiv+0xda>
  200f9a:	ea41 010c 	orr.w	r1, r1, ip
  200f9e:	e795      	b.n	200ecc <__aeabi_fdiv+0x18>
  200fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  200fa4:	ea92 0f0c 	teq	r2, ip
  200fa8:	d108      	bne.n	200fbc <__aeabi_fdiv+0x108>
  200faa:	0242      	lsls	r2, r0, #9
  200fac:	f47f af7d 	bne.w	200eaa <__aeabi_fmul+0x15e>
  200fb0:	ea93 0f0c 	teq	r3, ip
  200fb4:	f47f af70 	bne.w	200e98 <__aeabi_fmul+0x14c>
  200fb8:	4608      	mov	r0, r1
  200fba:	e776      	b.n	200eaa <__aeabi_fmul+0x15e>
  200fbc:	ea93 0f0c 	teq	r3, ip
  200fc0:	d104      	bne.n	200fcc <__aeabi_fdiv+0x118>
  200fc2:	024b      	lsls	r3, r1, #9
  200fc4:	f43f af4c 	beq.w	200e60 <__aeabi_fmul+0x114>
  200fc8:	4608      	mov	r0, r1
  200fca:	e76e      	b.n	200eaa <__aeabi_fmul+0x15e>
  200fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  200fd0:	bf18      	it	ne
  200fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  200fd6:	d1ca      	bne.n	200f6e <__aeabi_fdiv+0xba>
  200fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  200fdc:	f47f af5c 	bne.w	200e98 <__aeabi_fmul+0x14c>
  200fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  200fe4:	f47f af3c 	bne.w	200e60 <__aeabi_fmul+0x114>
  200fe8:	e75f      	b.n	200eaa <__aeabi_fmul+0x15e>
  200fea:	bf00      	nop

00200fec <__aeabi_f2iz>:
  200fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
  200ff0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  200ff4:	d30f      	bcc.n	201016 <__aeabi_f2iz+0x2a>
  200ff6:	f04f 039e 	mov.w	r3, #158	; 0x9e
  200ffa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  200ffe:	d90d      	bls.n	20101c <__aeabi_f2iz+0x30>
  201000:	ea4f 2300 	mov.w	r3, r0, lsl #8
  201004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  201008:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  20100c:	fa23 f002 	lsr.w	r0, r3, r2
  201010:	bf18      	it	ne
  201012:	4240      	negne	r0, r0
  201014:	4770      	bx	lr
  201016:	f04f 0000 	mov.w	r0, #0
  20101a:	4770      	bx	lr
  20101c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  201020:	d101      	bne.n	201026 <__aeabi_f2iz+0x3a>
  201022:	0242      	lsls	r2, r0, #9
  201024:	d105      	bne.n	201032 <__aeabi_f2iz+0x46>
  201026:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  20102a:	bf08      	it	eq
  20102c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  201030:	4770      	bx	lr
  201032:	f04f 0000 	mov.w	r0, #0
  201036:	4770      	bx	lr
	...

00201040 <notify7.lto_priv.32>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  201040:	4a02      	ldr	r2, [pc, #8]	; (20104c <notify7.lto_priv.32+0xc>)
  201042:	6813      	ldr	r3, [r2, #0]
  201044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  201048:	6013      	str	r3, [r2, #0]
  20104a:	4770      	bx	lr
  20104c:	40007800 	.word	0x40007800

00201050 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201050:	2320      	movs	r3, #32
  201052:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201056:	4b11      	ldr	r3, [pc, #68]	; (20109c <_port_irq_epilogue+0x4c>)
  201058:	685b      	ldr	r3, [r3, #4]
  20105a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20105e:	d102      	bne.n	201066 <_port_irq_epilogue+0x16>
  201060:	f383 8811 	msr	BASEPRI, r3
  201064:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201066:	b480      	push	{r7}
  201068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20106a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20106e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201072:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201076:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20107a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20107e:	4a08      	ldr	r2, [pc, #32]	; (2010a0 <_port_irq_epilogue+0x50>)
  201080:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201082:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201084:	6889      	ldr	r1, [r1, #8]
  201086:	6892      	ldr	r2, [r2, #8]
  201088:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20108a:	bf8c      	ite	hi
  20108c:	4a05      	ldrhi	r2, [pc, #20]	; (2010a4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20108e:	4a06      	ldrls	r2, [pc, #24]	; (2010a8 <_port_irq_epilogue+0x58>)
  201090:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201094:	46bd      	mov	sp, r7
  201096:	bc80      	pop	{r7}
  201098:	4770      	bx	lr
  20109a:	bf00      	nop
  20109c:	e000ed00 	.word	0xe000ed00
  2010a0:	20000818 	.word	0x20000818
  2010a4:	002002f5 	.word	0x002002f5
  2010a8:	002002f8 	.word	0x002002f8
  2010ac:	00000000 	.word	0x00000000

002010b0 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  2010b0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  2010b2:	4b0b      	ldr	r3, [pc, #44]	; (2010e0 <VectorA4+0x30>)
  2010b4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  2010b6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  2010b8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  2010ba:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  2010bc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  2010be:	d107      	bne.n	2010d0 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  2010c0:	2002      	movs	r0, #2
  2010c2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2010c4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2010c6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  2010c8:	68d1      	ldr	r1, [r2, #12]
  2010ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  2010ce:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  2010d0:	685b      	ldr	r3, [r3, #4]
  2010d2:	4803      	ldr	r0, [pc, #12]	; (2010e0 <VectorA4+0x30>)
  2010d4:	685b      	ldr	r3, [r3, #4]
  2010d6:	4798      	blx	r3
}
  2010d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2010dc:	f7ff bfb8 	b.w	201050 <_port_irq_epilogue>
  2010e0:	20000808 	.word	0x20000808
	...

002010f0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  2010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2010f2:	2720      	movs	r7, #32
  2010f4:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  2010f8:	4d12      	ldr	r5, [pc, #72]	; (201144 <SysTick_Handler+0x54>)
  2010fa:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2010fc:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  2010fe:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201100:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  201104:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201106:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  201108:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20110a:	d013      	beq.n	201134 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20110c:	891c      	ldrh	r4, [r3, #8]
  20110e:	3c01      	subs	r4, #1
  201110:	b2a4      	uxth	r4, r4
  201112:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  201114:	b974      	cbnz	r4, 201134 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  201116:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  201118:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20111a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20111c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20111e:	61ea      	str	r2, [r5, #28]
  201120:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  201124:	6918      	ldr	r0, [r3, #16]
  201126:	4788      	blx	r1
  201128:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20112c:	69eb      	ldr	r3, [r5, #28]
  20112e:	891a      	ldrh	r2, [r3, #8]
  201130:	2a00      	cmp	r2, #0
  201132:	d0f0      	beq.n	201116 <SysTick_Handler+0x26>
  201134:	2300      	movs	r3, #0
  201136:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  20113a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20113e:	f7ff bf87 	b.w	201050 <_port_irq_epilogue>
  201142:	bf00      	nop
  201144:	20000818 	.word	0x20000818
	...

00201150 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  201150:	4a09      	ldr	r2, [pc, #36]	; (201178 <Vector4C+0x28>)
OSAL_IRQ_HANDLER(Vector4C) {
  201152:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201154:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
  201156:	6811      	ldr	r1, [r2, #0]
  201158:	400b      	ands	r3, r1
  20115a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
  20115e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
  201160:	b12b      	cbz	r3, 20116e <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  201162:	4806      	ldr	r0, [pc, #24]	; (20117c <Vector4C+0x2c>)
  201164:	2116      	movs	r1, #22
  201166:	6843      	ldr	r3, [r0, #4]
  201168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  20116c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
  20116e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201172:	f7ff bf6d 	b.w	201050 <_port_irq_epilogue>
  201176:	bf00      	nop
  201178:	40013c00 	.word	0x40013c00
  20117c:	20000800 	.word	0x20000800

00201180 <Vector48>:
  pr = EXTI->PR;
  201180:	4a09      	ldr	r2, [pc, #36]	; (2011a8 <Vector48+0x28>)
OSAL_IRQ_HANDLER(Vector48) {
  201182:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201184:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
  201186:	6811      	ldr	r1, [r2, #0]
  201188:	400b      	ands	r3, r1
  20118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
  20118e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
  201190:	b12b      	cbz	r3, 20119e <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  201192:	4806      	ldr	r0, [pc, #24]	; (2011ac <Vector48+0x2c>)
  201194:	2115      	movs	r1, #21
  201196:	6843      	ldr	r3, [r0, #4]
  201198:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
  20119c:	4798      	blx	r3
}
  20119e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011a2:	f7ff bf55 	b.w	201050 <_port_irq_epilogue>
  2011a6:	bf00      	nop
  2011a8:	40013c00 	.word	0x40013c00
  2011ac:	20000800 	.word	0x20000800

002011b0 <Vector170>:
  pr = EXTI->PR;
  2011b0:	4a09      	ldr	r2, [pc, #36]	; (2011d8 <Vector170+0x28>)
OSAL_IRQ_HANDLER(Vector170) {
  2011b2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2011b4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
  2011b6:	6811      	ldr	r1, [r2, #0]
  2011b8:	400b      	ands	r3, r1
  2011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
  2011be:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
  2011c0:	b12b      	cbz	r3, 2011ce <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
  2011c2:	4806      	ldr	r0, [pc, #24]	; (2011dc <Vector170+0x2c>)
  2011c4:	2114      	movs	r1, #20
  2011c6:	6843      	ldr	r3, [r0, #4]
  2011c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  2011cc:	4798      	blx	r3
}
  2011ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011d2:	f7ff bf3d 	b.w	201050 <_port_irq_epilogue>
  2011d6:	bf00      	nop
  2011d8:	40013c00 	.word	0x40013c00
  2011dc:	20000800 	.word	0x20000800

002011e0 <Vector138>:
  pr = EXTI->PR;
  2011e0:	4a09      	ldr	r2, [pc, #36]	; (201208 <Vector138+0x28>)
OSAL_IRQ_HANDLER(Vector138) {
  2011e2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2011e4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 19);
  2011e6:	6811      	ldr	r1, [r2, #0]
  2011e8:	400b      	ands	r3, r1
  2011ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  EXTI->PR = pr;
  2011ee:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 19))
  2011f0:	b12b      	cbz	r3, 2011fe <Vector138+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
  2011f2:	4806      	ldr	r0, [pc, #24]	; (20120c <Vector138+0x2c>)
  2011f4:	2113      	movs	r1, #19
  2011f6:	6843      	ldr	r3, [r0, #4]
  2011f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  2011fc:	4798      	blx	r3
}
  2011fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201202:	f7ff bf25 	b.w	201050 <_port_irq_epilogue>
  201206:	bf00      	nop
  201208:	40013c00 	.word	0x40013c00
  20120c:	20000800 	.word	0x20000800

00201210 <VectorE8>:
  pr = EXTI->PR;
  201210:	4a09      	ldr	r2, [pc, #36]	; (201238 <VectorE8+0x28>)
OSAL_IRQ_HANDLER(VectorE8) {
  201212:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201214:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
  201216:	6811      	ldr	r1, [r2, #0]
  201218:	400b      	ands	r3, r1
  20121a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
  20121e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
  201220:	b12b      	cbz	r3, 20122e <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
  201222:	4806      	ldr	r0, [pc, #24]	; (20123c <VectorE8+0x2c>)
  201224:	2112      	movs	r1, #18
  201226:	6843      	ldr	r3, [r0, #4]
  201228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  20122c:	4798      	blx	r3
}
  20122e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201232:	f7ff bf0d 	b.w	201050 <_port_irq_epilogue>
  201236:	bf00      	nop
  201238:	40013c00 	.word	0x40013c00
  20123c:	20000800 	.word	0x20000800

00201240 <VectorE4>:
  pr = EXTI->PR;
  201240:	4a09      	ldr	r2, [pc, #36]	; (201268 <VectorE4+0x28>)
OSAL_IRQ_HANDLER(VectorE4) {
  201242:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201244:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 17);
  201246:	6811      	ldr	r1, [r2, #0]
  201248:	400b      	ands	r3, r1
  20124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
  20124e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
  201250:	b12b      	cbz	r3, 20125e <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
  201252:	4806      	ldr	r0, [pc, #24]	; (20126c <VectorE4+0x2c>)
  201254:	2111      	movs	r1, #17
  201256:	6843      	ldr	r3, [r0, #4]
  201258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  20125c:	4798      	blx	r3
}
  20125e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201262:	f7ff bef5 	b.w	201050 <_port_irq_epilogue>
  201266:	bf00      	nop
  201268:	40013c00 	.word	0x40013c00
  20126c:	20000800 	.word	0x20000800

00201270 <Vector44>:
  pr = EXTI->PR;
  201270:	4a09      	ldr	r2, [pc, #36]	; (201298 <Vector44+0x28>)
OSAL_IRQ_HANDLER(Vector44) {
  201272:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201274:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 16);
  201276:	6811      	ldr	r1, [r2, #0]
  201278:	400b      	ands	r3, r1
  20127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
  20127e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
  201280:	b12b      	cbz	r3, 20128e <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
  201282:	4806      	ldr	r0, [pc, #24]	; (20129c <Vector44+0x2c>)
  201284:	2110      	movs	r1, #16
  201286:	6843      	ldr	r3, [r0, #4]
  201288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  20128c:	4798      	blx	r3
}
  20128e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201292:	f7ff bedd 	b.w	201050 <_port_irq_epilogue>
  201296:	bf00      	nop
  201298:	40013c00 	.word	0x40013c00
  20129c:	20000800 	.word	0x20000800

002012a0 <VectorE0>:
  pr = EXTI->PR;
  2012a0:	4b1d      	ldr	r3, [pc, #116]	; (201318 <VectorE0+0x78>)
OSAL_IRQ_HANDLER(VectorE0) {
  2012a2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  2012a4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  2012a6:	681a      	ldr	r2, [r3, #0]
  2012a8:	4014      	ands	r4, r2
  2012aa:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
  EXTI->PR = pr;
  2012ae:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
  2012b0:	0562      	lsls	r2, r4, #21
  2012b2:	d42a      	bmi.n	20130a <VectorE0+0x6a>
  if (pr & (1U << 11))
  2012b4:	0523      	lsls	r3, r4, #20
  2012b6:	d422      	bmi.n	2012fe <VectorE0+0x5e>
  if (pr & (1U << 12))
  2012b8:	04e0      	lsls	r0, r4, #19
  2012ba:	d41a      	bmi.n	2012f2 <VectorE0+0x52>
  if (pr & (1U << 13))
  2012bc:	04a1      	lsls	r1, r4, #18
  2012be:	d412      	bmi.n	2012e6 <VectorE0+0x46>
  if (pr & (1U << 14))
  2012c0:	0462      	lsls	r2, r4, #17
  2012c2:	d40a      	bmi.n	2012da <VectorE0+0x3a>
  if (pr & (1U << 15))
  2012c4:	0423      	lsls	r3, r4, #16
  2012c6:	d504      	bpl.n	2012d2 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
  2012c8:	4814      	ldr	r0, [pc, #80]	; (20131c <VectorE0+0x7c>)
  2012ca:	210f      	movs	r1, #15
  2012cc:	6843      	ldr	r3, [r0, #4]
  2012ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  2012d0:	4798      	blx	r3
}
  2012d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2012d6:	f7ff bebb 	b.w	201050 <_port_irq_epilogue>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  2012da:	4810      	ldr	r0, [pc, #64]	; (20131c <VectorE0+0x7c>)
  2012dc:	210e      	movs	r1, #14
  2012de:	6843      	ldr	r3, [r0, #4]
  2012e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  2012e2:	4798      	blx	r3
  2012e4:	e7ee      	b.n	2012c4 <VectorE0+0x24>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  2012e6:	480d      	ldr	r0, [pc, #52]	; (20131c <VectorE0+0x7c>)
  2012e8:	210d      	movs	r1, #13
  2012ea:	6843      	ldr	r3, [r0, #4]
  2012ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  2012ee:	4798      	blx	r3
  2012f0:	e7e6      	b.n	2012c0 <VectorE0+0x20>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  2012f2:	480a      	ldr	r0, [pc, #40]	; (20131c <VectorE0+0x7c>)
  2012f4:	210c      	movs	r1, #12
  2012f6:	6843      	ldr	r3, [r0, #4]
  2012f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  2012fa:	4798      	blx	r3
  2012fc:	e7de      	b.n	2012bc <VectorE0+0x1c>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  2012fe:	4807      	ldr	r0, [pc, #28]	; (20131c <VectorE0+0x7c>)
  201300:	210b      	movs	r1, #11
  201302:	6843      	ldr	r3, [r0, #4]
  201304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  201306:	4798      	blx	r3
  201308:	e7d6      	b.n	2012b8 <VectorE0+0x18>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  20130a:	4804      	ldr	r0, [pc, #16]	; (20131c <VectorE0+0x7c>)
  20130c:	210a      	movs	r1, #10
  20130e:	6843      	ldr	r3, [r0, #4]
  201310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  201312:	4798      	blx	r3
  201314:	e7ce      	b.n	2012b4 <VectorE0+0x14>
  201316:	bf00      	nop
  201318:	40013c00 	.word	0x40013c00
  20131c:	20000800 	.word	0x20000800

00201320 <Vector9C>:
  pr = EXTI->PR;
  201320:	4b19      	ldr	r3, [pc, #100]	; (201388 <Vector9C+0x68>)
OSAL_IRQ_HANDLER(Vector9C) {
  201322:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  201324:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  201326:	681a      	ldr	r2, [r3, #0]
  201328:	4014      	ands	r4, r2
  20132a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  20132e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
  201330:	06a3      	lsls	r3, r4, #26
  201332:	d422      	bmi.n	20137a <Vector9C+0x5a>
  if (pr & (1U << 6))
  201334:	0660      	lsls	r0, r4, #25
  201336:	d41a      	bmi.n	20136e <Vector9C+0x4e>
  if (pr & (1U << 7))
  201338:	0621      	lsls	r1, r4, #24
  20133a:	d412      	bmi.n	201362 <Vector9C+0x42>
  if (pr & (1U << 8))
  20133c:	05e2      	lsls	r2, r4, #23
  20133e:	d40a      	bmi.n	201356 <Vector9C+0x36>
  if (pr & (1U << 9))
  201340:	05a3      	lsls	r3, r4, #22
  201342:	d504      	bpl.n	20134e <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
  201344:	4811      	ldr	r0, [pc, #68]	; (20138c <Vector9C+0x6c>)
  201346:	2109      	movs	r1, #9
  201348:	6843      	ldr	r3, [r0, #4]
  20134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  20134c:	4798      	blx	r3
}
  20134e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201352:	f7ff be7d 	b.w	201050 <_port_irq_epilogue>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  201356:	480d      	ldr	r0, [pc, #52]	; (20138c <Vector9C+0x6c>)
  201358:	2108      	movs	r1, #8
  20135a:	6843      	ldr	r3, [r0, #4]
  20135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20135e:	4798      	blx	r3
  201360:	e7ee      	b.n	201340 <Vector9C+0x20>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  201362:	480a      	ldr	r0, [pc, #40]	; (20138c <Vector9C+0x6c>)
  201364:	2107      	movs	r1, #7
  201366:	6843      	ldr	r3, [r0, #4]
  201368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  20136a:	4798      	blx	r3
  20136c:	e7e6      	b.n	20133c <Vector9C+0x1c>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  20136e:	4807      	ldr	r0, [pc, #28]	; (20138c <Vector9C+0x6c>)
  201370:	2106      	movs	r1, #6
  201372:	6843      	ldr	r3, [r0, #4]
  201374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  201376:	4798      	blx	r3
  201378:	e7de      	b.n	201338 <Vector9C+0x18>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  20137a:	4804      	ldr	r0, [pc, #16]	; (20138c <Vector9C+0x6c>)
  20137c:	2105      	movs	r1, #5
  20137e:	6843      	ldr	r3, [r0, #4]
  201380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  201382:	4798      	blx	r3
  201384:	e7d6      	b.n	201334 <Vector9C+0x14>
  201386:	bf00      	nop
  201388:	40013c00 	.word	0x40013c00
  20138c:	20000800 	.word	0x20000800

00201390 <Vector68>:
  pr = EXTI->PR;
  201390:	4a08      	ldr	r2, [pc, #32]	; (2013b4 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
  201392:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201394:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  201396:	6811      	ldr	r1, [r2, #0]
  201398:	400b      	ands	r3, r1
  20139a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  20139e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
  2013a0:	b123      	cbz	r3, 2013ac <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
  2013a2:	4805      	ldr	r0, [pc, #20]	; (2013b8 <Vector68+0x28>)
  2013a4:	2104      	movs	r1, #4
  2013a6:	6843      	ldr	r3, [r0, #4]
  2013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2013aa:	4798      	blx	r3
}
  2013ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2013b0:	f7ff be4e 	b.w	201050 <_port_irq_epilogue>
  2013b4:	40013c00 	.word	0x40013c00
  2013b8:	20000800 	.word	0x20000800
  2013bc:	00000000 	.word	0x00000000

002013c0 <Vector64>:
  pr = EXTI->PR;
  2013c0:	4a08      	ldr	r2, [pc, #32]	; (2013e4 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
  2013c2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2013c4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  2013c6:	6811      	ldr	r1, [r2, #0]
  2013c8:	400b      	ands	r3, r1
  2013ca:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  2013ce:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
  2013d0:	b123      	cbz	r3, 2013dc <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
  2013d2:	4805      	ldr	r0, [pc, #20]	; (2013e8 <Vector64+0x28>)
  2013d4:	2103      	movs	r1, #3
  2013d6:	6843      	ldr	r3, [r0, #4]
  2013d8:	69db      	ldr	r3, [r3, #28]
  2013da:	4798      	blx	r3
}
  2013dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2013e0:	f7ff be36 	b.w	201050 <_port_irq_epilogue>
  2013e4:	40013c00 	.word	0x40013c00
  2013e8:	20000800 	.word	0x20000800
  2013ec:	00000000 	.word	0x00000000

002013f0 <Vector60>:
  pr = EXTI->PR;
  2013f0:	4a08      	ldr	r2, [pc, #32]	; (201414 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
  2013f2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2013f4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  2013f6:	6811      	ldr	r1, [r2, #0]
  2013f8:	400b      	ands	r3, r1
  2013fa:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  2013fe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
  201400:	b123      	cbz	r3, 20140c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
  201402:	4805      	ldr	r0, [pc, #20]	; (201418 <Vector60+0x28>)
  201404:	2102      	movs	r1, #2
  201406:	6843      	ldr	r3, [r0, #4]
  201408:	695b      	ldr	r3, [r3, #20]
  20140a:	4798      	blx	r3
}
  20140c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201410:	f7ff be1e 	b.w	201050 <_port_irq_epilogue>
  201414:	40013c00 	.word	0x40013c00
  201418:	20000800 	.word	0x20000800
  20141c:	00000000 	.word	0x00000000

00201420 <Vector5C>:
  pr = EXTI->PR;
  201420:	4a08      	ldr	r2, [pc, #32]	; (201444 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
  201422:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201424:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  201426:	6811      	ldr	r1, [r2, #0]
  201428:	400b      	ands	r3, r1
  20142a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  20142e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
  201430:	b123      	cbz	r3, 20143c <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
  201432:	4805      	ldr	r0, [pc, #20]	; (201448 <Vector5C+0x28>)
  201434:	2101      	movs	r1, #1
  201436:	6843      	ldr	r3, [r0, #4]
  201438:	68db      	ldr	r3, [r3, #12]
  20143a:	4798      	blx	r3
}
  20143c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201440:	f7ff be06 	b.w	201050 <_port_irq_epilogue>
  201444:	40013c00 	.word	0x40013c00
  201448:	20000800 	.word	0x20000800
  20144c:	00000000 	.word	0x00000000

00201450 <Vector58>:
  pr = EXTI->PR;
  201450:	4a08      	ldr	r2, [pc, #32]	; (201474 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
  201452:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201454:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  201456:	6811      	ldr	r1, [r2, #0]
  201458:	400b      	ands	r3, r1
  20145a:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  20145e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
  201460:	b123      	cbz	r3, 20146c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
  201462:	4805      	ldr	r0, [pc, #20]	; (201478 <Vector58+0x28>)
  201464:	2100      	movs	r1, #0
  201466:	6843      	ldr	r3, [r0, #4]
  201468:	685b      	ldr	r3, [r3, #4]
  20146a:	4798      	blx	r3
}
  20146c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201470:	f7ff bdee 	b.w	201050 <_port_irq_epilogue>
  201474:	40013c00 	.word	0x40013c00
  201478:	20000800 	.word	0x20000800
  20147c:	00000000 	.word	0x00000000

00201480 <SVC_Handler>:
void SVC_Handler(void) {
  201480:	b480      	push	{r7}
  201482:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201484:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  201488:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20148a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20148e:	2300      	movs	r3, #0
  201490:	f383 8811 	msr	BASEPRI, r3
}
  201494:	46bd      	mov	sp, r7
  201496:	bc80      	pop	{r7}
  201498:	4770      	bx	lr
  20149a:	bf00      	nop
  20149c:	0000      	movs	r0, r0
	...

002014a0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  2014a0:	b470      	push	{r4, r5, r6}
  2014a2:	2320      	movs	r3, #32
  2014a4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2014a8:	4e0d      	ldr	r6, [pc, #52]	; (2014e0 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  2014aa:	1e4a      	subs	r2, r1, #1
  2014ac:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  2014ae:	4c0d      	ldr	r4, [pc, #52]	; (2014e4 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2014b0:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  2014b2:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  2014b4:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2014b6:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  2014b8:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2014ba:	1858      	adds	r0, r3, r1
  2014bc:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  2014be:	1a23      	subs	r3, r4, r0
  2014c0:	429a      	cmp	r2, r3
  2014c2:	d806      	bhi.n	2014d2 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  2014c4:	4402      	add	r2, r0
  2014c6:	2300      	movs	r3, #0
  2014c8:	6032      	str	r2, [r6, #0]
  2014ca:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  2014ce:	bc70      	pop	{r4, r5, r6}
  2014d0:	4770      	bx	lr
    return NULL;
  2014d2:	2000      	movs	r0, #0
  2014d4:	2300      	movs	r3, #0
  2014d6:	f383 8811 	msr	BASEPRI, r3
}
  2014da:	bc70      	pop	{r4, r5, r6}
  2014dc:	4770      	bx	lr
  2014de:	bf00      	nop
  2014e0:	2000098c 	.word	0x2000098c
  2014e4:	20000988 	.word	0x20000988
	...

002014f0 <wakeup>:
  2014f0:	2320      	movs	r3, #32
  2014f2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  2014f6:	f890 3020 	ldrb.w	r3, [r0, #32]
  2014fa:	2b07      	cmp	r3, #7
  2014fc:	d80e      	bhi.n	20151c <wakeup+0x2c>
  2014fe:	e8df f003 	tbb	[pc, r3]
  201502:	0d28      	.short	0x0d28
  201504:	0408240d 	.word	0x0408240d
  201508:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20150a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20150c:	6893      	ldr	r3, [r2, #8]
  20150e:	3301      	adds	r3, #1
  201510:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201512:	e890 000c 	ldmia.w	r0, {r2, r3}
  201516:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201518:	6802      	ldr	r2, [r0, #0]
  20151a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20151c:	2200      	movs	r2, #0
  20151e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201520:	4b0e      	ldr	r3, [pc, #56]	; (20155c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201522:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201526:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201528:	f04f 34ff 	mov.w	r4, #4294967295
  20152c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20152e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201530:	689a      	ldr	r2, [r3, #8]
  201532:	428a      	cmp	r2, r1
  201534:	d2fb      	bcs.n	20152e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  201536:	685a      	ldr	r2, [r3, #4]
  201538:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20153a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20153c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20153e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  201540:	6058      	str	r0, [r3, #4]
  201542:	f381 8811 	msr	BASEPRI, r1
}
  201546:	bc10      	pop	{r4}
  201548:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20154a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20154c:	2200      	movs	r2, #0
  20154e:	601a      	str	r2, [r3, #0]
  201550:	e7e4      	b.n	20151c <wakeup+0x2c>
  201552:	2300      	movs	r3, #0
  201554:	f383 8811 	msr	BASEPRI, r3
  201558:	4770      	bx	lr
  20155a:	bf00      	nop
  20155c:	20000818 	.word	0x20000818

00201560 <_idle_thread.lto_priv.43>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  201560:	e7fe      	b.n	201560 <_idle_thread.lto_priv.43>
  201562:	bf00      	nop
	...

00201570 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  201570:	e7fe      	b.n	201570 <BusFault_Handler>
  201572:	bf00      	nop
	...

00201580 <chSchGoSleepS>:
  thread_t *otp = currp;
  201580:	4b08      	ldr	r3, [pc, #32]	; (2015a4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  201582:	681a      	ldr	r2, [r3, #0]
  201584:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  201586:	b430      	push	{r4, r5}
  otp->state = newstate;
  201588:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  20158c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  20158e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  201590:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  201592:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  201594:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  201596:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20159a:	619a      	str	r2, [r3, #24]
}
  20159c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  20159e:	f7fe be99 	b.w	2002d4 <_port_switch>
  2015a2:	bf00      	nop
  2015a4:	20000818 	.word	0x20000818
	...

002015b0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  2015b0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2015b2:	4b33      	ldr	r3, [pc, #204]	; (201680 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  2015b4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  2015b8:	4a32      	ldr	r2, [pc, #200]	; (201684 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2015ba:	4c33      	ldr	r4, [pc, #204]	; (201688 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2015bc:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2015be:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2015c0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2015c2:	681a      	ldr	r2, [r3, #0]
  2015c4:	f042 0201 	orr.w	r2, r2, #1
  2015c8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2015ca:	680b      	ldr	r3, [r1, #0]
  2015cc:	079b      	lsls	r3, r3, #30
  2015ce:	d5fc      	bpl.n	2015ca <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2015d0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2015d2:	4a2b      	ldr	r2, [pc, #172]	; (201680 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2015d4:	f023 0303 	bic.w	r3, r3, #3
  2015d8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  2015da:	688b      	ldr	r3, [r1, #8]
  2015dc:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2015de:	6893      	ldr	r3, [r2, #8]
  2015e0:	f013 030c 	ands.w	r3, r3, #12
  2015e4:	d1fb      	bne.n	2015de <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2015e6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2015e8:	4925      	ldr	r1, [pc, #148]	; (201680 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2015ea:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2015ee:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2015f0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2015f2:	6813      	ldr	r3, [r2, #0]
  2015f4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2015f8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2015fa:	680b      	ldr	r3, [r1, #0]
  2015fc:	039d      	lsls	r5, r3, #14
  2015fe:	d5fc      	bpl.n	2015fa <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201600:	4b22      	ldr	r3, [pc, #136]	; (20168c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201602:	4820      	ldr	r0, [pc, #128]	; (201684 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201604:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201606:	680b      	ldr	r3, [r1, #0]
  201608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20160c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20160e:	6843      	ldr	r3, [r0, #4]
  201610:	045c      	lsls	r4, r3, #17
  201612:	d5fc      	bpl.n	20160e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201614:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201616:	4a1b      	ldr	r2, [pc, #108]	; (201684 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20161c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20161e:	6853      	ldr	r3, [r2, #4]
  201620:	03d9      	lsls	r1, r3, #15
  201622:	d5fc      	bpl.n	20161e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201624:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201626:	4917      	ldr	r1, [pc, #92]	; (201684 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20162c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20162e:	684b      	ldr	r3, [r1, #4]
  201630:	039a      	lsls	r2, r3, #14
  201632:	d5fc      	bpl.n	20162e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201634:	4a12      	ldr	r2, [pc, #72]	; (201680 <__early_init+0xd0>)
  201636:	6813      	ldr	r3, [r2, #0]
  201638:	019b      	lsls	r3, r3, #6
  20163a:	d5fc      	bpl.n	201636 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20163c:	4b14      	ldr	r3, [pc, #80]	; (201690 <__early_init+0xe0>)
  20163e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201642:	4d14      	ldr	r5, [pc, #80]	; (201694 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201644:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201648:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20164a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20164c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201650:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201654:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201656:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201658:	4909      	ldr	r1, [pc, #36]	; (201680 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20165a:	f043 0302 	orr.w	r3, r3, #2
  20165e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201660:	688b      	ldr	r3, [r1, #8]
  201662:	f003 030c 	and.w	r3, r3, #12
  201666:	2b08      	cmp	r3, #8
  201668:	d1fa      	bne.n	201660 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20166a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201670:	644b      	str	r3, [r1, #68]	; 0x44
  201672:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201678:	bc30      	pop	{r4, r5}
  20167a:	664b      	str	r3, [r1, #100]	; 0x64
  20167c:	4770      	bx	lr
  20167e:	bf00      	nop
  201680:	40023800 	.word	0x40023800
  201684:	40007000 	.word	0x40007000
  201688:	10000400 	.word	0x10000400
  20168c:	09406c08 	.word	0x09406c08
  201690:	40023c00 	.word	0x40023c00
  201694:	30999400 	.word	0x30999400
	...

002016a0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  2016a0:	4b0e      	ldr	r3, [pc, #56]	; (2016dc <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  2016a2:	6882      	ldr	r2, [r0, #8]
  2016a4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2016a6:	490e      	ldr	r1, [pc, #56]	; (2016e0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  2016a8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  2016aa:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  2016ac:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2016ae:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2016b0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2016b2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2016b4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2016b6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2016b8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2016ba:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2016be:	18e4      	adds	r4, r4, r3
  2016c0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2016c4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2016c6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2016c8:	bf88      	it	hi
  2016ca:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2016cc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2016ce:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2016d2:	bf38      	it	cc
  2016d4:	6003      	strcc	r3, [r0, #0]
}
  2016d6:	bc30      	pop	{r4, r5}
  2016d8:	4770      	bx	lr
  2016da:	bf00      	nop
  2016dc:	e0001000 	.word	0xe0001000
  2016e0:	20000818 	.word	0x20000818
	...

002016f0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2016f0:	4a0e      	ldr	r2, [pc, #56]	; (20172c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2016f2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2016f4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2016f6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2016f8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2016fa:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2016fc:	6994      	ldr	r4, [r2, #24]
  2016fe:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201700:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201702:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201706:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20170a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20170c:	6190      	str	r0, [r2, #24]
  20170e:	e000      	b.n	201712 <chSchDoReschedule+0x22>
  201710:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201712:	689a      	ldr	r2, [r3, #8]
  201714:	4291      	cmp	r1, r2
  201716:	d3fb      	bcc.n	201710 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201718:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20171a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20171c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20171e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201720:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201722:	605c      	str	r4, [r3, #4]
}
  201724:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201726:	f7fe bdd5 	b.w	2002d4 <_port_switch>
  20172a:	bf00      	nop
  20172c:	20000818 	.word	0x20000818

00201730 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201730:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201734:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201736:	b5f0      	push	{r4, r5, r6, r7, lr}
  201738:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20173a:	d031      	beq.n	2017a0 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20173c:	4c1c      	ldr	r4, [pc, #112]	; (2017b0 <chSchGoSleepTimeoutS+0x80>)
  20173e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201740:	481c      	ldr	r0, [pc, #112]	; (2017b4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201742:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201744:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201746:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201748:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20174a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20174c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20174e:	d905      	bls.n	20175c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201750:	1a89      	subs	r1, r1, r2
    p = p->next;
  201752:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201754:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201756:	891a      	ldrh	r2, [r3, #8]
  201758:	428a      	cmp	r2, r1
  20175a:	d3f9      	bcc.n	201750 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20175c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20175e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201760:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201762:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201766:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201768:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20176a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20176c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20176e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201772:	891a      	ldrh	r2, [r3, #8]
  201774:	1a51      	subs	r1, r2, r1
  201776:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201778:	84a6      	strh	r6, [r4, #36]	; 0x24
  20177a:	f7ff ff01 	bl	201580 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20177e:	9b04      	ldr	r3, [sp, #16]
  201780:	b153      	cbz	r3, 201798 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201782:	9b01      	ldr	r3, [sp, #4]
  201784:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201788:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20178a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20178c:	4402      	add	r2, r0
  20178e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201790:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201792:	9b01      	ldr	r3, [sp, #4]
  201794:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201796:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201798:	69a3      	ldr	r3, [r4, #24]
}
  20179a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20179c:	b007      	add	sp, #28
  20179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2017a0:	4c03      	ldr	r4, [pc, #12]	; (2017b0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  2017a2:	f7ff feed 	bl	201580 <chSchGoSleepS>
  return currp->u.rdymsg;
  2017a6:	69a3      	ldr	r3, [r4, #24]
}
  2017a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2017aa:	b007      	add	sp, #28
  2017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2017ae:	bf00      	nop
  2017b0:	20000818 	.word	0x20000818
  2017b4:	002014f1 	.word	0x002014f1
	...

002017c0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
  2017c0:	b161      	cbz	r1, 2017dc <chThdEnqueueTimeoutS+0x1c>
  2017c2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  2017c4:	4b07      	ldr	r3, [pc, #28]	; (2017e4 <chThdEnqueueTimeoutS+0x24>)

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2017c6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  2017c8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  2017ca:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  2017cc:	6854      	ldr	r4, [r2, #4]
  2017ce:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  2017d2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  2017d4:	6053      	str	r3, [r2, #4]
}
  2017d6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2017d8:	f7ff bfaa 	b.w	201730 <chSchGoSleepTimeoutS>
}
  2017dc:	f04f 30ff 	mov.w	r0, #4294967295
  2017e0:	4770      	bx	lr
  2017e2:	bf00      	nop
  2017e4:	20000818 	.word	0x20000818
	...

002017f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  2017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2017f4:	4699      	mov	r9, r3
  2017f6:	b083      	sub	sp, #12
  2017f8:	4604      	mov	r4, r0
  2017fa:	460e      	mov	r6, r1
  2017fc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  2017fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201802:	2320      	movs	r3, #32
  201804:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201808:	4b26      	ldr	r3, [pc, #152]	; (2018a4 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20180a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20180e:	2700      	movs	r7, #0
  201810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201812:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201816:	fa19 f383 	uxtah	r3, r9, r3
  20181a:	b29b      	uxth	r3, r3
  20181c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20181e:	68a3      	ldr	r3, [r4, #8]
  201820:	b313      	cbz	r3, 201868 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201822:	6961      	ldr	r1, [r4, #20]
  201824:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201828:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20182a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20182c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20182e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201830:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201832:	7833      	ldrb	r3, [r6, #0]
  201834:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201836:	6961      	ldr	r1, [r4, #20]
  201838:	6923      	ldr	r3, [r4, #16]
  20183a:	4299      	cmp	r1, r3
  20183c:	d301      	bcc.n	201842 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20183e:	68e3      	ldr	r3, [r4, #12]
  201840:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201842:	f1b8 0f00 	cmp.w	r8, #0
  201846:	d001      	beq.n	20184c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201848:	4620      	mov	r0, r4
  20184a:	47c0      	blx	r8
  20184c:	2300      	movs	r3, #0
  20184e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201852:	3d01      	subs	r5, #1
    w++;
  201854:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201858:	d019      	beq.n	20188e <oqWriteTimeout+0x9e>
  20185a:	2320      	movs	r3, #32
  20185c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201860:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201862:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201864:	2b00      	cmp	r3, #0
  201866:	d1dc      	bne.n	201822 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201868:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20186c:	4592      	cmp	sl, r2
  20186e:	d812      	bhi.n	201896 <oqWriteTimeout+0xa6>
  201870:	4a0c      	ldr	r2, [pc, #48]	; (2018a4 <oqWriteTimeout+0xb4>)
  201872:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201874:	9a01      	ldr	r2, [sp, #4]
  201876:	1a51      	subs	r1, r2, r1
  201878:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20187a:	4589      	cmp	r9, r1
  20187c:	d305      	bcc.n	20188a <oqWriteTimeout+0x9a>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
  20187e:	4620      	mov	r0, r4
  201880:	f7ff ff9e 	bl	2017c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201884:	2800      	cmp	r0, #0
  201886:	d0ca      	beq.n	20181e <oqWriteTimeout+0x2e>
  201888:	2300      	movs	r3, #0
  20188a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  20188e:	4638      	mov	r0, r7
  201890:	b003      	add	sp, #12
  201892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201896:	4649      	mov	r1, r9
  201898:	4620      	mov	r0, r4
  20189a:	f7ff ff91 	bl	2017c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20189e:	2800      	cmp	r0, #0
  2018a0:	d0bd      	beq.n	20181e <oqWriteTimeout+0x2e>
  2018a2:	e7f1      	b.n	201888 <oqWriteTimeout+0x98>
  2018a4:	20000818 	.word	0x20000818
	...

002018b0 <_writet.lto_priv.41>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  2018b0:	3030      	adds	r0, #48	; 0x30
  2018b2:	f7ff bf9d 	b.w	2017f0 <oqWriteTimeout>
  2018b6:	bf00      	nop
	...

002018c0 <_write.lto_priv.35>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  2018c0:	3030      	adds	r0, #48	; 0x30
  2018c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2018c6:	f7ff bf93 	b.w	2017f0 <oqWriteTimeout>
  2018ca:	bf00      	nop
  2018cc:	0000      	movs	r0, r0
	...

002018d0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  2018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2018d2:	4604      	mov	r4, r0
  2018d4:	460f      	mov	r7, r1
  2018d6:	4616      	mov	r6, r2
  2018d8:	2320      	movs	r3, #32
  2018da:	f383 8811 	msr	BASEPRI, r3
  2018de:	e003      	b.n	2018e8 <oqPutTimeout+0x18>
  2018e0:	f7ff ff6e 	bl	2017c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  2018e4:	2800      	cmp	r0, #0
  2018e6:	db19      	blt.n	20191c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  2018e8:	68a5      	ldr	r5, [r4, #8]
  2018ea:	4631      	mov	r1, r6
  2018ec:	4620      	mov	r0, r4
  2018ee:	2d00      	cmp	r5, #0
  2018f0:	d0f6      	beq.n	2018e0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  2018f2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  2018f4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2018f6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  2018f8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  2018fa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  2018fc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2018fe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201900:	6962      	ldr	r2, [r4, #20]
  201902:	6923      	ldr	r3, [r4, #16]
  201904:	429a      	cmp	r2, r3
  201906:	d301      	bcc.n	20190c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201908:	68e3      	ldr	r3, [r4, #12]
  20190a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  20190c:	69e3      	ldr	r3, [r4, #28]
  20190e:	b10b      	cbz	r3, 201914 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201910:	4620      	mov	r0, r4
  201912:	4798      	blx	r3
  201914:	2000      	movs	r0, #0
  201916:	f380 8811 	msr	BASEPRI, r0
}
  20191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20191c:	f385 8811 	msr	BASEPRI, r5
  201920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201922:	bf00      	nop
	...

00201930 <_putt.lto_priv.39>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201930:	3030      	adds	r0, #48	; 0x30
  201932:	f7ff bfcd 	b.w	2018d0 <oqPutTimeout>
  201936:	bf00      	nop
	...

00201940 <_put.lto_priv.37>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201940:	3030      	adds	r0, #48	; 0x30
  201942:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201946:	f7ff bfc3 	b.w	2018d0 <oqPutTimeout>
  20194a:	bf00      	nop
  20194c:	0000      	movs	r0, r0
	...

00201950 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201954:	4699      	mov	r9, r3
  201956:	b083      	sub	sp, #12
  201958:	4604      	mov	r4, r0
  20195a:	460e      	mov	r6, r1
  20195c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  20195e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201962:	2320      	movs	r3, #32
  201964:	f383 8811 	msr	BASEPRI, r3
  201968:	4b26      	ldr	r3, [pc, #152]	; (201a04 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20196a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  20196e:	2700      	movs	r7, #0
  201970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201972:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201976:	fa19 f383 	uxtah	r3, r9, r3
  20197a:	b29b      	uxth	r3, r3
  20197c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  20197e:	68a3      	ldr	r3, [r4, #8]
  201980:	b313      	cbz	r3, 2019c8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201982:	69a1      	ldr	r1, [r4, #24]
  201984:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201988:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  20198a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  20198c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  20198e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201990:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201992:	780b      	ldrb	r3, [r1, #0]
  201994:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201996:	69a1      	ldr	r1, [r4, #24]
  201998:	6923      	ldr	r3, [r4, #16]
  20199a:	4299      	cmp	r1, r3
  20199c:	d301      	bcc.n	2019a2 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  20199e:	68e3      	ldr	r3, [r4, #12]
  2019a0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  2019a2:	f1b8 0f00 	cmp.w	r8, #0
  2019a6:	d001      	beq.n	2019ac <iqReadTimeout+0x5c>
      nfy(iqp);
  2019a8:	4620      	mov	r0, r4
  2019aa:	47c0      	blx	r8
  2019ac:	2300      	movs	r3, #0
  2019ae:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  2019b2:	3d01      	subs	r5, #1
    r++;
  2019b4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2019b8:	d019      	beq.n	2019ee <iqReadTimeout+0x9e>
  2019ba:	2320      	movs	r3, #32
  2019bc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  2019c0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2019c2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  2019c4:	2b00      	cmp	r3, #0
  2019c6:	d1dc      	bne.n	201982 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2019c8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2019cc:	4592      	cmp	sl, r2
  2019ce:	d812      	bhi.n	2019f6 <iqReadTimeout+0xa6>
  2019d0:	4a0c      	ldr	r2, [pc, #48]	; (201a04 <iqReadTimeout+0xb4>)
  2019d2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2019d4:	9a01      	ldr	r2, [sp, #4]
  2019d6:	1a51      	subs	r1, r2, r1
  2019d8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2019da:	4589      	cmp	r9, r1
  2019dc:	d305      	bcc.n	2019ea <iqReadTimeout+0x9a>
  2019de:	4620      	mov	r0, r4
  2019e0:	f7ff feee 	bl	2017c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2019e4:	2800      	cmp	r0, #0
  2019e6:	d0ca      	beq.n	20197e <iqReadTimeout+0x2e>
  2019e8:	2300      	movs	r3, #0
  2019ea:	f383 8811 	msr	BASEPRI, r3
}
  2019ee:	4638      	mov	r0, r7
  2019f0:	b003      	add	sp, #12
  2019f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2019f6:	4649      	mov	r1, r9
  2019f8:	4620      	mov	r0, r4
  2019fa:	f7ff fee1 	bl	2017c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2019fe:	2800      	cmp	r0, #0
  201a00:	d0bd      	beq.n	20197e <iqReadTimeout+0x2e>
  201a02:	e7f1      	b.n	2019e8 <iqReadTimeout+0x98>
  201a04:	20000818 	.word	0x20000818
	...

00201a10 <_readt.lto_priv.42>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201a10:	300c      	adds	r0, #12
  201a12:	f7ff bf9d 	b.w	201950 <iqReadTimeout>
  201a16:	bf00      	nop
	...

00201a20 <_read.lto_priv.36>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201a20:	300c      	adds	r0, #12
  201a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201a26:	f7ff bf93 	b.w	201950 <iqReadTimeout>
  201a2a:	bf00      	nop
  201a2c:	0000      	movs	r0, r0
	...

00201a30 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201a30:	b570      	push	{r4, r5, r6, lr}
  201a32:	2320      	movs	r3, #32
  201a34:	4604      	mov	r4, r0
  201a36:	460e      	mov	r6, r1
  201a38:	f383 8811 	msr	BASEPRI, r3
  201a3c:	e003      	b.n	201a46 <iqGetTimeout+0x16>
  201a3e:	f7ff febf 	bl	2017c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201a42:	2800      	cmp	r0, #0
  201a44:	db19      	blt.n	201a7a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201a46:	68a5      	ldr	r5, [r4, #8]
  201a48:	4631      	mov	r1, r6
  201a4a:	4620      	mov	r0, r4
  201a4c:	2d00      	cmp	r5, #0
  201a4e:	d0f6      	beq.n	201a3e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201a50:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201a52:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201a54:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201a56:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201a58:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201a5a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201a5c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  201a5e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201a60:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201a62:	d301      	bcc.n	201a68 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201a64:	68e3      	ldr	r3, [r4, #12]
  201a66:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201a68:	69e3      	ldr	r3, [r4, #28]
  201a6a:	b10b      	cbz	r3, 201a70 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201a6c:	4620      	mov	r0, r4
  201a6e:	4798      	blx	r3
  201a70:	2300      	movs	r3, #0
  201a72:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201a76:	4628      	mov	r0, r5
}
  201a78:	bd70      	pop	{r4, r5, r6, pc}
  201a7a:	f385 8811 	msr	BASEPRI, r5
  201a7e:	bd70      	pop	{r4, r5, r6, pc}

00201a80 <_gett.lto_priv.40>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201a80:	300c      	adds	r0, #12
  201a82:	f7ff bfd5 	b.w	201a30 <iqGetTimeout>
  201a86:	bf00      	nop
	...

00201a90 <_get.lto_priv.38>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201a90:	300c      	adds	r0, #12
  201a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201a96:	f7ff bfcb 	b.w	201a30 <iqGetTimeout>
  201a9a:	bf00      	nop
  201a9c:	0000      	movs	r0, r0
	...

00201aa0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201aa0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201aa2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201aa4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201aa6:	4b08      	ldr	r3, [pc, #32]	; (201ac8 <chSchReadyI+0x28>)
  201aa8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  201aaa:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  201aae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201ab0:	689a      	ldr	r2, [r3, #8]
  201ab2:	428a      	cmp	r2, r1
  201ab4:	d2fb      	bcs.n	201aae <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201ab6:	685a      	ldr	r2, [r3, #4]
}
  201ab8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  201aba:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  201abc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201abe:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201ac0:	605c      	str	r4, [r3, #4]
}
  201ac2:	bc10      	pop	{r4}
  201ac4:	4770      	bx	lr
  201ac6:	bf00      	nop
  201ac8:	20000818 	.word	0x20000818
  201acc:	00000000 	.word	0x00000000

00201ad0 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  201ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  201ad4:	4c5f      	ldr	r4, [pc, #380]	; (201c54 <Vector188+0x184>)
  201ad6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  201ad8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  201ada:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  201adc:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  201ade:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  201ae0:	d152      	bne.n	201b88 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  201ae2:	05eb      	lsls	r3, r5, #23
  201ae4:	d445      	bmi.n	201b72 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  201ae6:	06a8      	lsls	r0, r5, #26
  201ae8:	d417      	bmi.n	201b1a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  201aea:	0639      	lsls	r1, r7, #24
  201aec:	d501      	bpl.n	201af2 <Vector188+0x22>
  201aee:	062a      	lsls	r2, r5, #24
  201af0:	d465      	bmi.n	201bbe <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  201af2:	066b      	lsls	r3, r5, #25
  201af4:	d50d      	bpl.n	201b12 <Vector188+0x42>
  201af6:	2320      	movs	r3, #32
  201af8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  201afc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  201afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201b00:	429a      	cmp	r2, r3
  201b02:	f000 8086 	beq.w	201c12 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  201b06:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  201b0a:	2300      	movs	r3, #0
  201b0c:	6037      	str	r7, [r6, #0]
  201b0e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  201b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  201b16:	f7ff ba9b 	b.w	201050 <_port_irq_epilogue>
  201b1a:	2320      	movs	r3, #32
  201b1c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  201b20:	6a72      	ldr	r2, [r6, #36]	; 0x24
  201b22:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  201b26:	6963      	ldr	r3, [r4, #20]
  201b28:	ea01 0802 	and.w	r8, r1, r2
  201b2c:	2b00      	cmp	r3, #0
  201b2e:	d078      	beq.n	201c22 <Vector188+0x152>
  if (iqIsFullI(iqp)) {
  201b30:	6a23      	ldr	r3, [r4, #32]
  201b32:	6a62      	ldr	r2, [r4, #36]	; 0x24
  201b34:	4293      	cmp	r3, r2
  201b36:	d078      	beq.n	201c2a <Vector188+0x15a>
  iqp->q_counter++;
  201b38:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  201b3a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  201b3c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  201b3e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  201b40:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  201b42:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  201b46:	6a22      	ldr	r2, [r4, #32]
  201b48:	69e3      	ldr	r3, [r4, #28]
  201b4a:	429a      	cmp	r2, r3
  201b4c:	d25e      	bcs.n	201c0c <Vector188+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  201b4e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  201b50:	4a41      	ldr	r2, [pc, #260]	; (201c58 <Vector188+0x188>)
  201b52:	4293      	cmp	r3, r2
  201b54:	d009      	beq.n	201b6a <Vector188+0x9a>
  tqp->next             = tp->queue.next;
  201b56:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  201b58:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  201b5c:	4618      	mov	r0, r3
  201b5e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201b60:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  201b62:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201b66:	f7ff ff9b 	bl	201aa0 <chSchReadyI>
  201b6a:	2300      	movs	r3, #0
  201b6c:	f383 8811 	msr	BASEPRI, r3
  201b70:	e7bb      	b.n	201aea <Vector188+0x1a>
  201b72:	2320      	movs	r3, #32
  201b74:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201b78:	f44f 7000 	mov.w	r0, #512	; 0x200
  201b7c:	f000 fd90 	bl	2026a0 <chEvtBroadcastFlagsI.constprop.22>
  201b80:	2300      	movs	r3, #0
  201b82:	f383 8811 	msr	BASEPRI, r3
  201b86:	e7ae      	b.n	201ae6 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  201b88:	f015 0f08 	tst.w	r5, #8
  201b8c:	bf0c      	ite	eq
  201b8e:	2000      	moveq	r0, #0
  201b90:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  201b92:	07eb      	lsls	r3, r5, #31
  201b94:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  201b98:	bf48      	it	mi
  201b9a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  201b9e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  201ba0:	bf48      	it	mi
  201ba2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  201ba6:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  201ba8:	bf48      	it	mi
  201baa:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  201bae:	f383 8811 	msr	BASEPRI, r3
  201bb2:	f000 fd75 	bl	2026a0 <chEvtBroadcastFlagsI.constprop.22>
  201bb6:	2300      	movs	r3, #0
  201bb8:	f383 8811 	msr	BASEPRI, r3
  201bbc:	e791      	b.n	201ae2 <Vector188+0x12>
  201bbe:	2320      	movs	r3, #32
  201bc0:	f383 8811 	msr	BASEPRI, r3
  if (oqIsEmptyI(oqp)) {
  201bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201bc6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  201bc8:	429a      	cmp	r2, r3
  201bca:	d036      	beq.n	201c3a <Vector188+0x16a>
  oqp->q_counter++;
  201bcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  201bce:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  201bd0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  201bd2:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  201bd4:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  201bd6:	4288      	cmp	r0, r1
  oqp->q_counter++;
  201bd8:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  201bda:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  201bde:	d301      	bcc.n	201be4 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  201be0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  201be2:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  201be4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  201be6:	4a1d      	ldr	r2, [pc, #116]	; (201c5c <Vector188+0x18c>)
  201be8:	4293      	cmp	r3, r2
  201bea:	d009      	beq.n	201c00 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  201bec:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  201bee:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  201bf2:	4618      	mov	r0, r3
  201bf4:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  201bf6:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  201bf8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201bfc:	f7ff ff50 	bl	201aa0 <chSchReadyI>
      u->TDR = b;
  201c00:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  201c04:	2300      	movs	r3, #0
  201c06:	f383 8811 	msr	BASEPRI, r3
  201c0a:	e772      	b.n	201af2 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  201c0c:	69a3      	ldr	r3, [r4, #24]
  201c0e:	6223      	str	r3, [r4, #32]
  201c10:	e79d      	b.n	201b4e <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  201c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  201c14:	2b00      	cmp	r3, #0
  201c16:	f43f af76 	beq.w	201b06 <Vector188+0x36>
  201c1a:	2010      	movs	r0, #16
  201c1c:	f000 fd40 	bl	2026a0 <chEvtBroadcastFlagsI.constprop.22>
  201c20:	e771      	b.n	201b06 <Vector188+0x36>
  201c22:	2004      	movs	r0, #4
  201c24:	f000 fd3c 	bl	2026a0 <chEvtBroadcastFlagsI.constprop.22>
  201c28:	e782      	b.n	201b30 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  201c2a:	6962      	ldr	r2, [r4, #20]
  201c2c:	2a00      	cmp	r2, #0
  201c2e:	d083      	beq.n	201b38 <Vector188+0x68>
  201c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
  201c34:	f000 fd34 	bl	2026a0 <chEvtBroadcastFlagsI.constprop.22>
  201c38:	e797      	b.n	201b6a <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  201c3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  201c3c:	2a00      	cmp	r2, #0
  201c3e:	d0c5      	beq.n	201bcc <Vector188+0xfc>
  201c40:	2008      	movs	r0, #8
  201c42:	f000 fd2d 	bl	2026a0 <chEvtBroadcastFlagsI.constprop.22>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  201c46:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  201c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  201c4e:	6033      	str	r3, [r6, #0]
  201c50:	e7d8      	b.n	201c04 <Vector188+0x134>
  201c52:	bf00      	nop
  201c54:	200009b0 	.word	0x200009b0
  201c58:	200009bc 	.word	0x200009bc
  201c5c:	200009e0 	.word	0x200009e0

00201c60 <chThdExit>:
void chThdExit(msg_t msg) {
  201c60:	b538      	push	{r3, r4, r5, lr}
  201c62:	2220      	movs	r2, #32
  201c64:	4603      	mov	r3, r0
  201c66:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  201c6a:	4a10      	ldr	r2, [pc, #64]	; (201cac <chThdExit+0x4c>)
  201c6c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  201c6e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201c72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201c74:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201c76:	4285      	cmp	r5, r0
  201c78:	d006      	beq.n	201c88 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  201c7a:	6803      	ldr	r3, [r0, #0]
  201c7c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  201c7e:	f7ff ff0f 	bl	201aa0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201c82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201c84:	42a8      	cmp	r0, r5
  201c86:	d1f8      	bne.n	201c7a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201c88:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  201c8c:	b943      	cbnz	r3, 201ca0 <chThdExit+0x40>
  201c8e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201c92:	079b      	lsls	r3, r3, #30
  201c94:	d104      	bne.n	201ca0 <chThdExit+0x40>
    REG_REMOVE(tp);
  201c96:	6922      	ldr	r2, [r4, #16]
  201c98:	6963      	ldr	r3, [r4, #20]
  201c9a:	611a      	str	r2, [r3, #16]
  201c9c:	6922      	ldr	r2, [r4, #16]
  201c9e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201ca0:	200f      	movs	r0, #15
}
  201ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201ca6:	f7ff bc6b 	b.w	201580 <chSchGoSleepS>
  201caa:	bf00      	nop
  201cac:	20000818 	.word	0x20000818

00201cb0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201cb2:	4f12      	ldr	r7, [pc, #72]	; (201cfc <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201cb4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201cb6:	4d12      	ldr	r5, [pc, #72]	; (201d00 <__init_ram_areas+0x50>)
  201cb8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  201cbc:	4c11      	ldr	r4, [pc, #68]	; (201d04 <__init_ram_areas+0x54>)
  201cbe:	4b12      	ldr	r3, [pc, #72]	; (201d08 <__init_ram_areas+0x58>)
  201cc0:	4912      	ldr	r1, [pc, #72]	; (201d0c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201cc2:	429c      	cmp	r4, r3
  201cc4:	d911      	bls.n	201cea <__init_ram_areas+0x3a>
  201cc6:	3904      	subs	r1, #4
  201cc8:	461a      	mov	r2, r3
      *p = *tp;
  201cca:	f851 0f04 	ldr.w	r0, [r1, #4]!
  201cce:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201cd2:	4294      	cmp	r4, r2
  201cd4:	d8f9      	bhi.n	201cca <__init_ram_areas+0x1a>
  201cd6:	43da      	mvns	r2, r3
  201cd8:	4414      	add	r4, r2
  201cda:	f024 0403 	bic.w	r4, r4, #3
  201cde:	3404      	adds	r4, #4
  201ce0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201ce2:	429d      	cmp	r5, r3
  201ce4:	d903      	bls.n	201cee <__init_ram_areas+0x3e>
      *p = 0;
  201ce6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  201cea:	429d      	cmp	r5, r3
  201cec:	d8fb      	bhi.n	201ce6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  201cee:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201cf0:	4577      	cmp	r7, lr
  201cf2:	d202      	bcs.n	201cfa <__init_ram_areas+0x4a>
  201cf4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201cf8:	e7e3      	b.n	201cc2 <__init_ram_areas+0x12>
  201cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201cfc:	08002bdc 	.word	0x08002bdc
  201d00:	20020010 	.word	0x20020010
  201d04:	20020010 	.word	0x20020010
  201d08:	20020010 	.word	0x20020010
  201d0c:	08002da8 	.word	0x08002da8

00201d10 <__default_exit>:
void __default_exit(void) {
  201d10:	e7fe      	b.n	201d10 <__default_exit>
  201d12:	bf00      	nop
	...

00201d20 <__late_init>:
void __late_init(void) {}
  201d20:	4770      	bx	lr
  201d22:	bf00      	nop
	...

00201d30 <__core_init>:
void __core_init(void) {
  201d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201d32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201d36:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  201d3a:	4c1b      	ldr	r4, [pc, #108]	; (201da8 <__core_init+0x78>)
  201d3c:	2200      	movs	r2, #0
  201d3e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201d42:	6963      	ldr	r3, [r4, #20]
  201d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201d48:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  201d4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201d4e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201d52:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201d56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  201d5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  201d5e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201d62:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201d66:	f3c3 334e 	ubfx	r3, r3, #13, #15
  201d6a:	07b7      	lsls	r7, r6, #30
  201d6c:	015d      	lsls	r5, r3, #5
  201d6e:	ea05 000e 	and.w	r0, r5, lr
  201d72:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201d74:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201d76:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  201d7a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201d7c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201d80:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201d84:	1c53      	adds	r3, r2, #1
  201d86:	d1f6      	bne.n	201d76 <__core_init+0x46>
  201d88:	3d20      	subs	r5, #32
    } while(sets--);
  201d8a:	f115 0f20 	cmn.w	r5, #32
  201d8e:	d1ee      	bne.n	201d6e <__core_init+0x3e>
  201d90:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201d94:	6963      	ldr	r3, [r4, #20]
  201d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201d9a:	6163      	str	r3, [r4, #20]
  201d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201da0:	f3bf 8f6f 	isb	sy
  201da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201da6:	bf00      	nop
  201da8:	e000ed00 	.word	0xe000ed00
  201dac:	00000000 	.word	0x00000000

00201db0 <main>:
  tqp->next = (thread_t *)tqp;
  201db0:	4cbe      	ldr	r4, [pc, #760]	; (2020ac <main+0x2fc>)
  ch.rlist.prio = NOPRIO;
  201db2:	2500      	movs	r5, #0
  ch.vtlist.delta = (systime_t)-1;
  201db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  201db8:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201dbc:	f104 031c 	add.w	r3, r4, #28
  tmp->cumulative = (rttime_t)0;
  201dc0:	2600      	movs	r6, #0
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201dc2:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX

}

int main(void)
{
  201dc6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  201dca:	b089      	sub	sp, #36	; 0x24
  201dcc:	2700      	movs	r7, #0
  201dce:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  201dd0:	a802      	add	r0, sp, #8
  tqp->prev = (thread_t *)tqp;
  201dd2:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  201dd4:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201dd6:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201dd8:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  201dda:	9202      	str	r2, [sp, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  201ddc:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  201dde:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  201de0:	60a5      	str	r5, [r4, #8]
  ch.vtlist.systime = (systime_t)0;
  201de2:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201de4:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  201de6:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  201de8:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
  201dea:	9505      	str	r5, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  201dec:	e9cd 6706 	strd	r6, r7, [sp, #24]
  chTMStartMeasurementX(&tm);
  201df0:	f000 fc4e 	bl	202690 <chTMStartMeasurementX.constprop.26>
  chTMStopMeasurementX(&tm);
  201df4:	a802      	add	r0, sp, #8
  201df6:	f7ff fc53 	bl	2016a0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  201dfa:	4bad      	ldr	r3, [pc, #692]	; (2020b0 <main+0x300>)
  201dfc:	49ad      	ldr	r1, [pc, #692]	; (2020b4 <main+0x304>)
  tp->prio      = prio;
  201dfe:	f04f 0e80 	mov.w	lr, #128	; 0x80
  nextmem = __heap_base__;
  201e02:	4aad      	ldr	r2, [pc, #692]	; (2020b8 <main+0x308>)
  REG_INSERT(tp);
  201e04:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  201e08:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  201e0a:	f103 0c10 	add.w	ip, r3, #16
  201e0e:	49ab      	ldr	r1, [pc, #684]	; (2020bc <main+0x30c>)
  endmem  = __heap_end__;
  201e10:	4fab      	ldr	r7, [pc, #684]	; (2020c0 <main+0x310>)
  nextmem = __heap_base__;
  201e12:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  201e14:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  201e16:	49ab      	ldr	r1, [pc, #684]	; (2020c4 <main+0x314>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  201e18:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  201e1c:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  201e1e:	49aa      	ldr	r1, [pc, #680]	; (2020c8 <main+0x318>)
  ch.tm.offset = tm.last;
  201e20:	9804      	ldr	r0, [sp, #16]
  201e22:	68cf      	ldr	r7, [r1, #12]
  201e24:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201e26:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  201e2a:	48a8      	ldr	r0, [pc, #672]	; (2020cc <main+0x31c>)
  tp->prio      = prio;
  201e2c:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  201e30:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  201e34:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201e36:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 202110 <main+0x360>
  REG_INSERT(tp);
  201e3a:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  201e3c:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 202114 <main+0x364>
  tp->epending  = (eventmask_t)0;
  201e40:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  201e42:	619d      	str	r5, [r3, #24]
  201e44:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  201e48:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  201e4c:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  201e50:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  201e52:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  201e56:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  201e58:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  201e5a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  201e5e:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  201e60:	f104 0758 	add.w	r7, r4, #88	; 0x58
  SCB->AIRCR =  reg_value;
  201e64:	60c8      	str	r0, [r1, #12]
  201e66:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  201e6a:	609d      	str	r5, [r3, #8]
  201e6c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  201e70:	60dd      	str	r5, [r3, #12]
  201e72:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  201e74:	61a6      	str	r6, [r4, #24]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  201e76:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  201e78:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  201e7c:	f04f 0c10 	mov.w	ip, #16
  DWT->LAR = 0xC5ACCE55U;
  201e80:	4b93      	ldr	r3, [pc, #588]	; (2020d0 <main+0x320>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201e82:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201e84:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201e88:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  201e8c:	4891      	ldr	r0, [pc, #580]	; (2020d4 <main+0x324>)
  tqp->next = (thread_t *)tqp;
  201e8e:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201e90:	65e7      	str	r7, [r4, #92]	; 0x5c
  201e92:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201e96:	6818      	ldr	r0, [r3, #0]
  201e98:	4310      	orrs	r0, r2
  201e9a:	6018      	str	r0, [r3, #0]
  201e9c:	f881 c01f 	strb.w	ip, [r1, #31]
  201ea0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201ea4:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  201ea8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201eaa:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  201eae:	4b8a      	ldr	r3, [pc, #552]	; (2020d8 <main+0x328>)
  tp->state     = CH_STATE_WTSTART;
  201eb0:	2602      	movs	r6, #2
  REG_INSERT(tp);
  201eb2:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
  201eb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201eb8:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  201ebc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  201ec0:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  201ec4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ec8:	4a84      	ldr	r2, [pc, #528]	; (2020dc <main+0x32c>)
  201eca:	f8df e24c 	ldr.w	lr, [pc, #588]	; 202118 <main+0x368>
  201ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  201ed2:	4a83      	ldr	r2, [pc, #524]	; (2020e0 <main+0x330>)
  tp->state     = CH_STATE_WTSTART;
  201ed4:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  201ed8:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  201edc:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201ee0:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201ee4:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ee8:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  201eec:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  201ef0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ef4:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  201ef6:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  201efa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  201efe:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201f02:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  201f06:	6101      	str	r1, [r0, #16]
  thread_t *otp = currp;
  201f08:	69a2      	ldr	r2, [r4, #24]
  ntp->u.rdymsg = msg;
  201f0a:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  201f0e:	6890      	ldr	r0, [r2, #8]
  201f10:	6161      	str	r1, [r4, #20]
  201f12:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  201f16:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  201f1a:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  201f1e:	2800      	cmp	r0, #0
  201f20:	f000 82cd 	beq.w	2024be <main+0x70e>
  tp->state = CH_STATE_READY;
  201f24:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  201f28:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  201f2a:	68a2      	ldr	r2, [r4, #8]
  201f2c:	2a00      	cmp	r2, #0
  201f2e:	d1fb      	bne.n	201f28 <main+0x178>
  tp->queue.next             = cp;
  201f30:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  201f34:	6860      	ldr	r0, [r4, #4]
  201f36:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  201f3a:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  201f3c:	6061      	str	r1, [r4, #4]
  201f3e:	f382 8811 	msr	BASEPRI, r2
  rccResetAHB1(~0);
  201f42:	4b68      	ldr	r3, [pc, #416]	; (2020e4 <main+0x334>)
  201f44:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  201f48:	4c67      	ldr	r4, [pc, #412]	; (2020e8 <main+0x338>)
  rccResetAHB1(~0);
  201f4a:	6918      	ldr	r0, [r3, #16]
  201f4c:	6119      	str	r1, [r3, #16]
  201f4e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  201f50:	6958      	ldr	r0, [r3, #20]
  201f52:	6159      	str	r1, [r3, #20]
  201f54:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  201f56:	6a18      	ldr	r0, [r3, #32]
  201f58:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  201f5c:	6218      	str	r0, [r3, #32]
  201f5e:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  201f60:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201f62:	6259      	str	r1, [r3, #36]	; 0x24
  201f64:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  201f66:	6821      	ldr	r1, [r4, #0]
  201f68:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  201f6c:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  201f6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  201f70:	f401 7140 	and.w	r1, r1, #768	; 0x300
  201f74:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  201f78:	d003      	beq.n	201f82 <main+0x1d2>
    RCC->BDCR = RCC_BDCR_BDRST;
  201f7a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  201f7e:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201f80:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201f82:	4b58      	ldr	r3, [pc, #352]	; (2020e4 <main+0x334>)
  201f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201f86:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201f88:	f042 0219 	orr.w	r2, r2, #25
  201f8c:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201f8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  201f90:	0799      	lsls	r1, r3, #30
  201f92:	d5fc      	bpl.n	201f8e <main+0x1de>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201f94:	4c54      	ldr	r4, [pc, #336]	; (2020e8 <main+0x338>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201f96:	f240 7cff 	movw	ip, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  201f9a:	2300      	movs	r3, #0
  gpiop->OSPEEDR = config->ospeedr;
  201f9c:	f04f 37ff 	mov.w	r7, #4294967295
  201fa0:	6861      	ldr	r1, [r4, #4]
  gpiop->ODR     = config->odr;
  201fa2:	f64b 797e 	movw	r9, #49022	; 0xbf7e
  gpiop->OSPEEDR = config->ospeedr;
  201fa6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  gpiop->MODER   = config->moder;
  201faa:	f640 2a08 	movw	sl, #2568	; 0xa08
  201fae:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  sdp->vmt = &vmt;
  201fb2:	4a4e      	ldr	r2, [pc, #312]	; (2020ec <main+0x33c>)
  iqp->q_buffer  = bp;
  201fb4:	f8df e164 	ldr.w	lr, [pc, #356]	; 20211c <main+0x36c>
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  201fb8:	f04f 0b07 	mov.w	fp, #7
  201fbc:	6061      	str	r1, [r4, #4]
  gpiop->ODR     = config->odr;
  201fbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201fc2:	6b04      	ldr	r4, [r0, #48]	; 0x30
  oqp->q_buffer  = bp;
  201fc4:	4e4a      	ldr	r6, [pc, #296]	; (2020f0 <main+0x340>)
  201fc6:	ea44 040c 	orr.w	r4, r4, ip
  201fca:	6304      	str	r4, [r0, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201fcc:	6d05      	ldr	r5, [r0, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
  201fce:	4c49      	ldr	r4, [pc, #292]	; (2020f4 <main+0x344>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201fd0:	ea45 050c 	orr.w	r5, r5, ip
  gpiop->PUPDR   = config->pupdr;
  201fd4:	f8df c148 	ldr.w	ip, [pc, #328]	; 202120 <main+0x370>
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201fd8:	6505      	str	r5, [r0, #80]	; 0x50
  gpiop->AFRH    = config->afrh;
  201fda:	f44f 0530 	mov.w	r5, #11534336	; 0xb00000
  gpiop->OTYPER  = config->otyper;
  201fde:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201fe0:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201fe2:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->AFRL    = config->afrl;
  201fe6:	f8df c13c 	ldr.w	ip, [pc, #316]	; 202124 <main+0x374>
  gpiop->ODR     = config->odr;
  201fea:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201fec:	f8c4 c020 	str.w	ip, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201ff0:	f8df c134 	ldr.w	ip, [pc, #308]	; 202128 <main+0x378>
  201ff4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201ff8:	f8df c130 	ldr.w	ip, [pc, #304]	; 20212c <main+0x37c>
  201ffc:	f8c4 c000 	str.w	ip, [r4]
  gpiop->OSPEEDR = config->ospeedr;
  202000:	f46f 1c40 	mvn.w	ip, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  202004:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  202008:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  20200c:	f107 478a 	add.w	r7, r7, #1157627904	; 0x45000000
  202010:	f107 1755 	add.w	r7, r7, #5570645	; 0x550055
  202014:	f507 57a8 	add.w	r7, r7, #5376	; 0x1500
  202018:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  20201c:	f8c4 9414 	str.w	r9, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202020:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202024:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202028:	4d33      	ldr	r5, [pc, #204]	; (2020f8 <main+0x348>)
  gpiop->PUPDR   = config->pupdr;
  20202a:	4f34      	ldr	r7, [pc, #208]	; (2020fc <main+0x34c>)
  gpiop->MODER   = config->moder;
  20202c:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  202030:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  gpiop->AFRH    = config->afrh;
  202034:	2577      	movs	r5, #119	; 0x77
  gpiop->OTYPER  = config->otyper;
  202036:	6063      	str	r3, [r4, #4]
  gpiop->PUPDR   = config->pupdr;
  202038:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 202130 <main+0x380>
  gpiop->OSPEEDR = config->ospeedr;
  20203c:	f8c4 8008 	str.w	r8, [r4, #8]
  gpiop->MODER   = config->moder;
  202040:	f44f 2820 	mov.w	r8, #655360	; 0xa0000
  gpiop->PUPDR   = config->pupdr;
  202044:	60e7      	str	r7, [r4, #12]
  gpiop->AFRL    = config->afrl;
  202046:	4f2e      	ldr	r7, [pc, #184]	; (202100 <main+0x350>)
  gpiop->ODR     = config->odr;
  202048:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  20204a:	6227      	str	r7, [r4, #32]
  gpiop->PUPDR   = config->pupdr;
  20204c:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->AFRH    = config->afrh;
  202050:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202052:	f8c4 a000 	str.w	sl, [r4]
  tqp->next = (thread_t *)tqp;
  202056:	f102 0a0c 	add.w	sl, r2, #12
  gpiop->OTYPER  = config->otyper;
  20205a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20205e:	f8c4 c408 	str.w	ip, [r4, #1032]	; 0x408
  gpiop->MODER   = config->moder;
  202062:	f04f 6c08 	mov.w	ip, #142606336	; 0x8800000
  gpiop->PUPDR   = config->pupdr;
  202066:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  gpiop->OSPEEDR = config->ospeedr;
  20206a:	f04f 090f 	mov.w	r9, #15
  gpiop->ODR     = config->odr;
  20206e:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202072:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202076:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
  gpiop->OSPEEDR = config->ospeedr;
  20207a:	4d22      	ldr	r5, [pc, #136]	; (202104 <main+0x354>)
  gpiop->MODER   = config->moder;
  20207c:	f8c4 8400 	str.w	r8, [r4, #1024]	; 0x400
  iqp->q_top     = bp + size;
  202080:	f10e 0810 	add.w	r8, lr, #16
  gpiop->OTYPER  = config->otyper;
  202084:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  202088:	f8c4 5808 	str.w	r5, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  20208c:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  202090:	4d1d      	ldr	r5, [pc, #116]	; (202108 <main+0x358>)
  gpiop->ODR     = config->odr;
  202092:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  202096:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  20209a:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20209e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  2020a2:	4c1a      	ldr	r4, [pc, #104]	; (20210c <main+0x35c>)
  gpiop->OTYPER  = config->otyper;
  2020a4:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2020a6:	60ac      	str	r4, [r5, #8]
  2020a8:	e044      	b.n	202134 <main+0x384>
  2020aa:	bf00      	nop
  2020ac:	20000818 	.word	0x20000818
  2020b0:	20000968 	.word	0x20000968
  2020b4:	002014a1 	.word	0x002014a1
  2020b8:	2000098c 	.word	0x2000098c
  2020bc:	20020010 	.word	0x20020010
  2020c0:	20080000 	.word	0x20080000
  2020c4:	20000988 	.word	0x20000988
  2020c8:	e000ed00 	.word	0xe000ed00
  2020cc:	05fa0300 	.word	0x05fa0300
  2020d0:	e0001000 	.word	0xe0001000
  2020d4:	c5acce55 	.word	0xc5acce55
  2020d8:	20000890 	.word	0x20000890
  2020dc:	002002e5 	.word	0x002002e5
  2020e0:	08002d34 	.word	0x08002d34
  2020e4:	40023800 	.word	0x40023800
  2020e8:	40007000 	.word	0x40007000
  2020ec:	200009b0 	.word	0x200009b0
  2020f0:	200009a0 	.word	0x200009a0
  2020f4:	40020000 	.word	0x40020000
  2020f8:	18004001 	.word	0x18004001
  2020fc:	01555051 	.word	0x01555051
  202100:	00bb00b0 	.word	0x00bb00b0
  202104:	cffffff3 	.word	0xcffffff3
  202108:	40021400 	.word	0x40021400
  20210c:	003fcfff 	.word	0x003fcfff
  202110:	e000edf0 	.word	0xe000edf0
  202114:	08002d1c 	.word	0x08002d1c
  202118:	00201561 	.word	0x00201561
  20211c:	20000990 	.word	0x20000990
  202120:	40005551 	.word	0x40005551
  202124:	b0000bb0 	.word	0xb0000bb0
  202128:	000aaa0a 	.word	0x000aaa0a
  20212c:	2aae8028 	.word	0x2aae8028
  202130:	55505555 	.word	0x55505555
  gpiop->OTYPER  = config->otyper;
  202134:	4c68      	ldr	r4, [pc, #416]	; (2022d8 <main+0x528>)
  gpiop->PUPDR   = config->pupdr;
  202136:	60ef      	str	r7, [r5, #12]
  gpiop->ODR     = config->odr;
  202138:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
  20213a:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  20213c:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20213e:	602b      	str	r3, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
  202140:	4d66      	ldr	r5, [pc, #408]	; (2022dc <main+0x52c>)
  gpiop->OTYPER  = config->otyper;
  202142:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202144:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  202146:	4d66      	ldr	r5, [pc, #408]	; (2022e0 <main+0x530>)
  202148:	60e5      	str	r5, [r4, #12]
  gpiop->AFRH    = config->afrh;
  20214a:	4d66      	ldr	r5, [pc, #408]	; (2022e4 <main+0x534>)
  gpiop->ODR     = config->odr;
  20214c:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  20214e:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  202150:	6265      	str	r5, [r4, #36]	; 0x24
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  202152:	2501      	movs	r5, #1
  gpiop->MODER   = config->moder;
  202154:	f8c4 c000 	str.w	ip, [r4]
  202158:	4694      	mov	ip, r2
  gpiop->OTYPER  = config->otyper;
  20215a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20215e:	f8c4 9408 	str.w	r9, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  202162:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 202314 <main+0x564>
  202166:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  oqp->q_counter = size;
  20216a:	f04f 0910 	mov.w	r9, #16
  gpiop->ODR     = config->odr;
  20216e:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202172:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202176:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  20217a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20217e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  202182:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202184:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  202186:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
  202188:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  20218a:	6223      	str	r3, [r4, #32]
  iqp->q_buffer  = bp;
  20218c:	f8c2 e018 	str.w	lr, [r2, #24]
  gpiop->AFRH    = config->afrh;
  202190:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_rdptr   = bp;
  202192:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202196:	6023      	str	r3, [r4, #0]
  iqp->q_wrptr   = bp;
  202198:	f8c2 e020 	str.w	lr, [r2, #32]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20219c:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  gpiop->OTYPER  = config->otyper;
  2021a0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  iqp->q_top     = bp + size;
  2021a4:	f8c2 801c 	str.w	r8, [r2, #28]
  gpiop->OSPEEDR = config->ospeedr;
  2021a8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  sdp->state = SD_STOP;
  2021ac:	7215      	strb	r5, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  2021ae:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  2021b2:	f8c2 a00c 	str.w	sl, [r2, #12]
  gpiop->ODR     = config->odr;
  2021b6:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  tqp->prev = (thread_t *)tqp;
  2021ba:	f8c2 a010 	str.w	sl, [r2, #16]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2021be:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  gpiop->AFRL    = config->afrl;
  2021c2:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2021c6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2021ca:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2021ce:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2021d2:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2021d6:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  2021da:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  sdp->vmt = &vmt;
  2021de:	4942      	ldr	r1, [pc, #264]	; (2022e8 <main+0x538>)
  gpiop->AFRL    = config->afrl;
  2021e0:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  GPTD1.tim = STM32_TIM1;
  2021e4:	4f41      	ldr	r7, [pc, #260]	; (2022ec <main+0x53c>)
  gpiop->AFRH    = config->afrh;
  2021e6:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2021ea:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  tqp->next = (thread_t *)tqp;
  2021ee:	f102 0430 	add.w	r4, r2, #48	; 0x30
  2021f2:	f84c 1b04 	str.w	r1, [ip], #4
  2021f6:	493e      	ldr	r1, [pc, #248]	; (2022f0 <main+0x540>)
  2021f8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 202318 <main+0x568>
  2021fc:	60f9      	str	r1, [r7, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2021fe:	493d      	ldr	r1, [pc, #244]	; (2022f4 <main+0x544>)
  iqp->q_counter = 0;
  202200:	6153      	str	r3, [r2, #20]
  extp->config = NULL;
  202202:	f8c8 3004 	str.w	r3, [r8, #4]
  extp->state  = EXT_STOP;
  202206:	f888 5000 	strb.w	r5, [r8]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  20220a:	703d      	strb	r5, [r7, #0]
  oqp->q_top     = bp + size;
  20220c:	eb06 0509 	add.w	r5, r6, r9
  gptp->config = NULL;
  202210:	607b      	str	r3, [r7, #4]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  202212:	f8c2 c004 	str.w	ip, [r2, #4]
  iqp->q_notify  = infy;
  202216:	6293      	str	r3, [r2, #40]	; 0x28
  oqp->q_buffer  = bp;
  202218:	63d6      	str	r6, [r2, #60]	; 0x3c
  iqp->q_link    = link;
  20221a:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  20221c:	6512      	str	r2, [r2, #80]	; 0x50
  oqp->q_counter = size;
  20221e:	f8c2 9038 	str.w	r9, [r2, #56]	; 0x38
  202222:	f881 e352 	strb.w	lr, [r1, #850]	; 0x352
  oqp->q_rdptr   = bp;
  202226:	6496      	str	r6, [r2, #72]	; 0x48
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202228:	f8c1 a188 	str.w	sl, [r1, #392]	; 0x188
  oqp->q_wrptr   = bp;
  20222c:	6456      	str	r6, [r2, #68]	; 0x44
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  20222e:	4e32      	ldr	r6, [pc, #200]	; (2022f8 <main+0x548>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202230:	f8c1 a008 	str.w	sl, [r1, #8]
  oqp->q_top     = bp + size;
  202234:	6415      	str	r5, [r2, #64]	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  202236:	2580      	movs	r5, #128	; 0x80
  202238:	f841 6cec 	str.w	r6, [r1, #-236]
  20223c:	6314      	str	r4, [r2, #48]	; 0x30
  SysTick->VAL = 0;
  20223e:	f841 3ce8 	str.w	r3, [r1, #-232]
  202242:	2320      	movs	r3, #32
  tqp->prev = (thread_t *)tqp;
  202244:	6354      	str	r4, [r2, #52]	; 0x34
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  202246:	f841 bcf0 	str.w	fp, [r1, #-240]
  oqp->q_notify  = onfy;
  20224a:	4c2c      	ldr	r4, [pc, #176]	; (2022fc <main+0x54c>)

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  20224c:	492c      	ldr	r1, [pc, #176]	; (202300 <main+0x550>)
  20224e:	64d4      	str	r4, [r2, #76]	; 0x4c
  202250:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  202252:	4c2c      	ldr	r4, [pc, #176]	; (202304 <main+0x554>)
  202254:	492c      	ldr	r1, [pc, #176]	; (202308 <main+0x558>)
  202256:	6594      	str	r4, [r2, #88]	; 0x58
  202258:	f881 5023 	strb.w	r5, [r1, #35]	; 0x23
  20225c:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  202260:	7a13      	ldrb	r3, [r2, #8]
  202262:	2b01      	cmp	r3, #1
  202264:	f000 81b4 	beq.w	2025d0 <main+0x820>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  202268:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20226a:	2440      	movs	r4, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20226c:	4827      	ldr	r0, [pc, #156]	; (20230c <main+0x55c>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20226e:	f04f 0e01 	mov.w	lr, #1
  USART_TypeDef *u = sdp->usart;
  202272:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  202274:	f240 162d 	movw	r6, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  202278:	fba0 0101 	umull	r0, r1, r0, r1
  sdp->state = SD_READY;
  20227c:	2502      	movs	r5, #2
  u->ICR = 0xFFFFFFFFU;
  20227e:	f04f 30ff 	mov.w	r0, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  202282:	0a89      	lsrs	r1, r1, #10
  202284:	60d9      	str	r1, [r3, #12]
  202286:	2100      	movs	r1, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  202288:	605c      	str	r4, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20228a:	f8c3 e008 	str.w	lr, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20228e:	601e      	str	r6, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
  202290:	6218      	str	r0, [r3, #32]
  202292:	7215      	strb	r5, [r2, #8]
    sdp->rxmask = 0xFF;
  202294:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  202298:	f381 8811 	msr	BASEPRI, r1
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  20229c:	f44f 7080 	mov.w	r0, #256	; 0x100
  2022a0:	f000 fa36 	bl	202710 <_pal_lld_setgroupmode.constprop.4>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  2022a4:	2080      	movs	r0, #128	; 0x80
  2022a6:	f000 fa33 	bl	202710 <_pal_lld_setgroupmode.constprop.4>
  2022aa:	2320      	movs	r3, #32
  2022ac:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
  expchannel_t line;

  if (extp->state == EXT_STOP)
  2022b0:	f898 3000 	ldrb.w	r3, [r8]
  osalDbgCheck((extp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
                "invalid state");
  extp->config = config;
  2022b4:	f8df c064 	ldr.w	ip, [pc, #100]	; 20231c <main+0x56c>
  2022b8:	2b01      	cmp	r3, #1
  2022ba:	f8c8 c004 	str.w	ip, [r8, #4]
  2022be:	f000 811f 	beq.w	202500 <main+0x750>
  cp = (thread_t *)&ch.rlist.queue;
  2022c2:	f04f 0e00 	mov.w	lr, #0
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
  2022c6:	f04f 0a01 	mov.w	sl, #1
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
  2022ca:	4b11      	ldr	r3, [pc, #68]	; (202310 <main+0x560>)
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  2022cc:	f04f 0b0f 	mov.w	fp, #15
  2022d0:	4671      	mov	r1, lr
  2022d2:	4674      	mov	r4, lr
  2022d4:	e039      	b.n	20234a <main+0x59a>
  2022d6:	bf00      	nop
  2022d8:	40021800 	.word	0x40021800
  2022dc:	3cccf000 	.word	0x3cccf000
  2022e0:	51155555 	.word	0x51155555
  2022e4:	00b0b000 	.word	0x00b0b000
  2022e8:	08002d70 	.word	0x08002d70
  2022ec:	20000808 	.word	0x20000808
  2022f0:	40010000 	.word	0x40010000
  2022f4:	e000e100 	.word	0xe000e100
  2022f8:	00034bbf 	.word	0x00034bbf
  2022fc:	00201041 	.word	0x00201041
  202300:	40007800 	.word	0x40007800
  202304:	0337f980 	.word	0x0337f980
  202308:	e000ed00 	.word	0xe000ed00
  20230c:	1b4e81b5 	.word	0x1b4e81b5
  202310:	40013c00 	.word	0x40013c00
  202314:	55555550 	.word	0x55555550
  202318:	20000800 	.word	0x20000800
  20231c:	08002c5c 	.word	0x08002c5c
  uint32_t cmask = (1 << (channel & 0x1F));
  202320:	fa0a f001 	lsl.w	r0, sl, r1
    EXTI->IMR  &= ~cmask;
  202324:	681c      	ldr	r4, [r3, #0]
  202326:	43c2      	mvns	r2, r0
  202328:	4014      	ands	r4, r2
  20232a:	601c      	str	r4, [r3, #0]
    EXTI->EMR  &= ~cmask;
  20232c:	685c      	ldr	r4, [r3, #4]
  20232e:	4014      	ands	r4, r2
  202330:	605c      	str	r4, [r3, #4]
    EXTI->RTSR &= ~cmask;
  202332:	689c      	ldr	r4, [r3, #8]
  202334:	4014      	ands	r4, r2
  202336:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~cmask;
  202338:	68dc      	ldr	r4, [r3, #12]
  20233a:	4022      	ands	r2, r4
  20233c:	60da      	str	r2, [r3, #12]
    EXTI->PR    =  cmask;
  20233e:	6158      	str	r0, [r3, #20]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  202340:	3101      	adds	r1, #1
  202342:	2918      	cmp	r1, #24
  202344:	d03b      	beq.n	2023be <main+0x60e>
  202346:	f85c 4031 	ldr.w	r4, [ip, r1, lsl #3]
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
  20234a:	0762      	lsls	r2, r4, #29
  20234c:	d5e8      	bpl.n	202320 <main+0x570>
  if (channel < 16) {
  20234e:	290f      	cmp	r1, #15
  uint32_t cmask = (1 << (channel & 0x1F));
  202350:	fa0a f201 	lsl.w	r2, sl, r1
  if (channel < 16) {
  202354:	d814      	bhi.n	202380 <main+0x5d0>
  202356:	f021 0503 	bic.w	r5, r1, #3
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  20235a:	f001 0903 	and.w	r9, r1, #3
                      EXT_MODE_GPIO_MASK) >>
  20235e:	f3c4 1003 	ubfx	r0, r4, #4, #4
  202362:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  202366:	ea4f 0989 	mov.w	r9, r9, lsl #2
  20236a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
  20236e:	fa0b fe09 	lsl.w	lr, fp, r9
    uint32_t port = ((extp->config->channels[channel].mode &
  202372:	fa00 f009 	lsl.w	r0, r0, r9
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
  202376:	68ae      	ldr	r6, [r5, #8]
  202378:	ea26 060e 	bic.w	r6, r6, lr
  20237c:	4330      	orrs	r0, r6
  20237e:	60a8      	str	r0, [r5, #8]
      EXTI->RTSR |= cmask;
  202380:	689d      	ldr	r5, [r3, #8]
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
  202382:	07e6      	lsls	r6, r4, #31
  202384:	ea6f 0002 	mvn.w	r0, r2
      EXTI->RTSR |= cmask;
  202388:	bf4c      	ite	mi
  20238a:	4315      	orrmi	r5, r2
      EXTI->RTSR &= ~cmask;
  20238c:	4005      	andpl	r5, r0
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
  20238e:	f014 0f02 	tst.w	r4, #2
      EXTI->RTSR &= ~cmask;
  202392:	609d      	str	r5, [r3, #8]
      EXTI->FTSR |= cmask;
  202394:	68dc      	ldr	r4, [r3, #12]
  202396:	bf14      	ite	ne
  202398:	4314      	orrne	r4, r2
      EXTI->FTSR &= ~cmask;
  20239a:	4004      	andeq	r4, r0
  20239c:	60dc      	str	r4, [r3, #12]
    if (extp->config->channels[channel].cb != NULL) {
  20239e:	eb0c 04c1 	add.w	r4, ip, r1, lsl #3
  2023a2:	6864      	ldr	r4, [r4, #4]
  2023a4:	2c00      	cmp	r4, #0
  2023a6:	f000 808d 	beq.w	2024c4 <main+0x714>
      EXTI->IMR |= cmask;
  2023aa:	681c      	ldr	r4, [r3, #0]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  2023ac:	3101      	adds	r1, #1
      EXTI->IMR |= cmask;
  2023ae:	4322      	orrs	r2, r4
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  2023b0:	2918      	cmp	r1, #24
      EXTI->IMR |= cmask;
  2023b2:	601a      	str	r2, [r3, #0]
      EXTI->EMR &= ~cmask;
  2023b4:	685a      	ldr	r2, [r3, #4]
  2023b6:	ea00 0002 	and.w	r0, r0, r2
  2023ba:	6058      	str	r0, [r3, #4]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  2023bc:	d1c3      	bne.n	202346 <main+0x596>
  ext_lld_start(extp);
  extp->state = EXT_ACTIVE;
  2023be:	2302      	movs	r3, #2
  2023c0:	2500      	movs	r5, #0
  2023c2:	f888 3000 	strb.w	r3, [r8]
  2023c6:	f385 8811 	msr	BASEPRI, r5
  2023ca:	2320      	movs	r3, #32
  2023cc:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  2023d0:	783b      	ldrb	r3, [r7, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  2023d2:	4e85      	ldr	r6, [pc, #532]	; (2025e8 <main+0x838>)
  2023d4:	2b01      	cmp	r3, #1
  2023d6:	607e      	str	r6, [r7, #4]
  2023d8:	d07b      	beq.n	2024d2 <main+0x722>
  2023da:	68bb      	ldr	r3, [r7, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  2023dc:	6835      	ldr	r5, [r6, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2023de:	2200      	movs	r2, #0
  2023e0:	68f9      	ldr	r1, [r7, #12]
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  2023e2:	2402      	movs	r4, #2
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  2023e4:	68f0      	ldr	r0, [r6, #12]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2023e6:	600a      	str	r2, [r1, #0]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  2023e8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  2023ec:	703c      	strb	r4, [r7, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  2023ee:	68b4      	ldr	r4, [r6, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  2023f0:	fbb3 f3f5 	udiv	r3, r3, r5
  2023f4:	3b01      	subs	r3, #1
  gptp->tim->CR2 = gptp->config->cr2;
  2023f6:	604c      	str	r4, [r1, #4]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  2023f8:	b29b      	uxth	r3, r3
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  2023fa:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2023fc:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  2023fe:	60c8      	str	r0, [r1, #12]
  202400:	f382 8811 	msr	BASEPRI, r2
#define TMR_TICKS_2_OVRFLOW   (GPT1cfg.frequency/100)

void GPT_Init (void)
{
    gptStart( GPT_Driver, &GPT1cfg );
    gptStartContinuous( GPT_Driver, TMR_TICKS_2_OVRFLOW );
  202404:	4979      	ldr	r1, [pc, #484]	; (2025ec <main+0x83c>)
  202406:	2020      	movs	r0, #32
  202408:	6833      	ldr	r3, [r6, #0]
  20240a:	fba1 1303 	umull	r1, r3, r1, r3
  20240e:	0959      	lsrs	r1, r3, #5
  202410:	f380 8811 	msr	BASEPRI, r0
  if (NULL != gptp->config->callback)
  202414:	6878      	ldr	r0, [r7, #4]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202416:	2401      	movs	r4, #1
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  202418:	68fb      	ldr	r3, [r7, #12]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  20241a:	2503      	movs	r5, #3
  if (NULL != gptp->config->callback)
  20241c:	6840      	ldr	r0, [r0, #4]
  20241e:	703d      	strb	r5, [r7, #0]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  202420:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202422:	615c      	str	r4, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  202424:	625a      	str	r2, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  202426:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  202428:	b110      	cbz	r0, 202430 <main+0x680>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  20242a:	68da      	ldr	r2, [r3, #12]
  20242c:	4322      	orrs	r2, r4
  20242e:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202430:	2185      	movs	r1, #133	; 0x85
  202432:	2200      	movs	r2, #0
  202434:	6019      	str	r1, [r3, #0]
  202436:	f382 8811 	msr	BASEPRI, r2
  20243a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 202604 <main+0x854>
  20243e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 202608 <main+0x858>
}

float get_turnover(void)
{
    float turnover = enc_ticks;
    turnover /= 360;
  202442:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 20260c <main+0x85c>
    float distance = 0, speed = 0;

    while(1)
    {

        ticks = get_ticks();
  202446:	f000 fbc3 	bl	202bd0 <get_ticks>
  20244a:	4604      	mov	r4, r0
    float turnover = enc_ticks;
  20244c:	f8da 0000 	ldr.w	r0, [sl]
  202450:	f7fe fc28 	bl	200ca4 <__aeabi_i2f>
    turnover /= 360;
  202454:	4641      	mov	r1, r8
  202456:	f7fe fd2d 	bl	200eb4 <__aeabi_fdiv>
}

float get_speed (void)
{
    float delta_time;
    delta_time = (GPT1cfg.frequency)/(TMR_TICKS_2_OVRFLOW);
  20245a:	6837      	ldr	r7, [r6, #0]
  20245c:	4683      	mov	fp, r0
        turnover = get_turnover();
        distance = get_distance();
        speed = get_speed();


        chprintf(((BaseSequentialStream *)&SD7), "Ticks:(%d)\tTurnover:(%d)\tDistance:(%d)\tSpeed:(%d)\n\r",
  20245e:	f7fe fdc5 	bl	200fec <__aeabi_f2iz>
  202462:	4b62      	ldr	r3, [pc, #392]	; (2025ec <main+0x83c>)
  202464:	4605      	mov	r5, r0
  202466:	fba3 3007 	umull	r3, r0, r3, r7
  20246a:	0940      	lsrs	r0, r0, #5
  20246c:	fbb7 f0f0 	udiv	r0, r7, r0
  202470:	f7fe fc14 	bl	200c9c <__aeabi_ui2f>
    float speed = delta_dist*delta_time;
  202474:	f8d9 1000 	ldr.w	r1, [r9]
  202478:	f7fe fc68 	bl	200d4c <__aeabi_fmul>
  20247c:	f7fe fdb6 	bl	200fec <__aeabi_f2iz>
  202480:	9001      	str	r0, [sp, #4]
    float distance = get_turnover()*(2*M_PI*RADIUS)/TRANSMITION_RATIO;
  202482:	4658      	mov	r0, fp
  202484:	f7fe f89e 	bl	2005c4 <__aeabi_f2d>
  202488:	a355      	add	r3, pc, #340	; (adr r3, 2025e0 <main+0x830>)
  20248a:	e9d3 2300 	ldrd	r2, r3, [r3]
  20248e:	f7fe f8ed 	bl	20066c <__aeabi_dmul>
  202492:	f7fe fafd 	bl	200a90 <__aeabi_d2f>
  202496:	f7fe fda9 	bl	200fec <__aeabi_f2iz>
  20249a:	462b      	mov	r3, r5
  20249c:	9000      	str	r0, [sp, #0]
  20249e:	4622      	mov	r2, r4
  2024a0:	4953      	ldr	r1, [pc, #332]	; (2025f0 <main+0x840>)
  2024a2:	4854      	ldr	r0, [pc, #336]	; (2025f4 <main+0x844>)
  2024a4:	f000 f984 	bl	2027b0 <chprintf.constprop.0>
  2024a8:	2320      	movs	r3, #32
  2024aa:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  2024ae:	2164      	movs	r1, #100	; 0x64
  2024b0:	2008      	movs	r0, #8
  2024b2:	f7ff f93d 	bl	201730 <chSchGoSleepTimeoutS>
  2024b6:	2300      	movs	r3, #0
  2024b8:	f383 8811 	msr	BASEPRI, r3
  2024bc:	e7c3      	b.n	202446 <main+0x696>
  tp->state = CH_STATE_READY;
  2024be:	f882 0020 	strb.w	r0, [r2, #32]
  2024c2:	e7fe      	b.n	2024c2 <main+0x712>
      EXTI->EMR |= cmask;
  2024c4:	685c      	ldr	r4, [r3, #4]
  2024c6:	4322      	orrs	r2, r4
  2024c8:	605a      	str	r2, [r3, #4]
      EXTI->IMR &= ~cmask;
  2024ca:	681a      	ldr	r2, [r3, #0]
  2024cc:	4010      	ands	r0, r2
  2024ce:	6018      	str	r0, [r3, #0]
  2024d0:	e736      	b.n	202340 <main+0x590>
      rccEnableTIM1(FALSE);
  2024d2:	4a49      	ldr	r2, [pc, #292]	; (2025f8 <main+0x848>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2024d4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
      gptp->clock = STM32_TIMCLK2;
  2024d8:	4b48      	ldr	r3, [pc, #288]	; (2025fc <main+0x84c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2024da:	f04f 0e70 	mov.w	lr, #112	; 0x70
      rccEnableTIM1(FALSE);
  2024de:	6c50      	ldr	r0, [r2, #68]	; 0x44
      gptp->clock = STM32_TIMCLK2;
  2024e0:	60bb      	str	r3, [r7, #8]
      rccEnableTIM1(FALSE);
  2024e2:	f040 0001 	orr.w	r0, r0, #1
  2024e6:	4946      	ldr	r1, [pc, #280]	; (202600 <main+0x850>)
  2024e8:	6450      	str	r0, [r2, #68]	; 0x44
      rccResetTIM1();
  2024ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
  2024ec:	f040 0001 	orr.w	r0, r0, #1
  2024f0:	6250      	str	r0, [r2, #36]	; 0x24
  2024f2:	6255      	str	r5, [r2, #36]	; 0x24
  2024f4:	f881 e319 	strb.w	lr, [r1, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2024f8:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2024fc:	600c      	str	r4, [r1, #0]
  2024fe:	e76d      	b.n	2023dc <main+0x62c>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202500:	4b3f      	ldr	r3, [pc, #252]	; (202600 <main+0x850>)
  202502:	2260      	movs	r2, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202504:	f44f 7680 	mov.w	r6, #256	; 0x100
  202508:	f44f 7000 	mov.w	r0, #512	; 0x200
  20250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  202510:	f04f 0a80 	mov.w	sl, #128	; 0x80
  202514:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202518:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  20251c:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202520:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  202524:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202528:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20252a:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20252e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  202532:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202536:	f8c3 a000 	str.w	sl, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20253a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20253e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202542:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202546:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202548:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20254c:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202550:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202552:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202556:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20255a:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20255c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202560:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202564:	f8c3 9000 	str.w	r9, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202568:	f04f 0904 	mov.w	r9, #4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20256c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202570:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202574:	605e      	str	r6, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202576:	2608      	movs	r6, #8
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202578:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20257c:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202580:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202582:	f883 e329 	strb.w	lr, [r3, #809]	; 0x329
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202586:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20258a:	6058      	str	r0, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20258c:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202590:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202594:	6059      	str	r1, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202596:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20259a:	f8c3 b184 	str.w	fp, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20259e:	f8c3 b004 	str.w	fp, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025a2:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025a6:	f8c3 a188 	str.w	sl, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025aa:	f8c3 a008 	str.w	sl, [r3, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025ae:	f883 e302 	strb.w	lr, [r3, #770]	; 0x302
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025b2:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025b6:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025ba:	f883 e303 	strb.w	lr, [r3, #771]	; 0x303
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025be:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025c2:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025c4:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025c8:	f8c3 4188 	str.w	r4, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025cc:	609c      	str	r4, [r3, #8]
  2025ce:	e678      	b.n	2022c2 <main+0x512>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  2025d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  2025d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  2025d6:	6403      	str	r3, [r0, #64]	; 0x40
  2025d8:	e646      	b.n	202268 <main+0x4b8>
  2025da:	bf00      	nop
  2025dc:	f3af 8000 	nop.w
  2025e0:	54442d18 	.word	0x54442d18
  2025e4:	3ff921fb 	.word	0x3ff921fb
  2025e8:	20020000 	.word	0x20020000
  2025ec:	51eb851f 	.word	0x51eb851f
  2025f0:	08002d3c 	.word	0x08002d3c
  2025f4:	200009b0 	.word	0x200009b0
  2025f8:	40023800 	.word	0x40023800
  2025fc:	0cdfe600 	.word	0x0cdfe600
  202600:	e000e100 	.word	0xe000e100
  202604:	20000a18 	.word	0x20000a18
  202608:	20000a10 	.word	0x20000a10
  20260c:	43b40000 	.word	0x43b40000

00202610 <GPT_CB.lto_priv.33>:
{
  202610:	b570      	push	{r4, r5, r6, lr}
    prev_dist = dist;
  202612:	4c0f      	ldr	r4, [pc, #60]	; (202650 <GPT_CB.lto_priv.33+0x40>)
  202614:	4a0f      	ldr	r2, [pc, #60]	; (202654 <GPT_CB.lto_priv.33+0x44>)
    float turnover = enc_ticks;
  202616:	4b10      	ldr	r3, [pc, #64]	; (202658 <GPT_CB.lto_priv.33+0x48>)
  202618:	6825      	ldr	r5, [r4, #0]
  20261a:	6818      	ldr	r0, [r3, #0]
  20261c:	6015      	str	r5, [r2, #0]
  20261e:	f7fe fb41 	bl	200ca4 <__aeabi_i2f>
    turnover /= 360;
  202622:	490e      	ldr	r1, [pc, #56]	; (20265c <GPT_CB.lto_priv.33+0x4c>)
  202624:	f7fe fc46 	bl	200eb4 <__aeabi_fdiv>
    delta_dist = dist - prev_dist;
  202628:	4e0d      	ldr	r6, [pc, #52]	; (202660 <GPT_CB.lto_priv.33+0x50>)
    float distance = get_turnover()*(2*M_PI*RADIUS)/TRANSMITION_RATIO;
  20262a:	f7fd ffcb 	bl	2005c4 <__aeabi_f2d>
  20262e:	a306      	add	r3, pc, #24	; (adr r3, 202648 <GPT_CB.lto_priv.33+0x38>)
  202630:	e9d3 2300 	ldrd	r2, r3, [r3]
  202634:	f7fe f81a 	bl	20066c <__aeabi_dmul>
  202638:	f7fe fa2a 	bl	200a90 <__aeabi_d2f>
    delta_dist = dist - prev_dist;
  20263c:	4629      	mov	r1, r5
    dist = get_distance();
  20263e:	6020      	str	r0, [r4, #0]
    delta_dist = dist - prev_dist;
  202640:	f7fe fa7a 	bl	200b38 <__aeabi_fsub>
  202644:	6030      	str	r0, [r6, #0]
  202646:	bd70      	pop	{r4, r5, r6, pc}
  202648:	54442d18 	.word	0x54442d18
  20264c:	3ff921fb 	.word	0x3ff921fb
  202650:	20000a14 	.word	0x20000a14
  202654:	20000a1c 	.word	0x20000a1c
  202658:	20000a18 	.word	0x20000a18
  20265c:	43b40000 	.word	0x43b40000
  202660:	20000a10 	.word	0x20000a10
	...

00202670 <EXT_CB_A.lto_priv.34>:
    if(palReadPad(GPIOB, 4))
  202670:	4b05      	ldr	r3, [pc, #20]	; (202688 <EXT_CB_A.lto_priv.34+0x18>)
        enc_ticks++;
  202672:	4a06      	ldr	r2, [pc, #24]	; (20268c <EXT_CB_A.lto_priv.34+0x1c>)
    if(palReadPad(GPIOB, 4))
  202674:	691b      	ldr	r3, [r3, #16]
  202676:	f013 0f10 	tst.w	r3, #16
        enc_ticks++;
  20267a:	6813      	ldr	r3, [r2, #0]
  20267c:	bf14      	ite	ne
  20267e:	3301      	addne	r3, #1
        enc_ticks--;
  202680:	f103 33ff 	addeq.w	r3, r3, #4294967295
  202684:	6013      	str	r3, [r2, #0]
  202686:	4770      	bx	lr
  202688:	40020400 	.word	0x40020400
  20268c:	20000a18 	.word	0x20000a18

00202690 <chTMStartMeasurementX.constprop.26>:
  return DWT->CYCCNT;
  202690:	4b01      	ldr	r3, [pc, #4]	; (202698 <chTMStartMeasurementX.constprop.26+0x8>)
  202692:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  202694:	6083      	str	r3, [r0, #8]
  202696:	4770      	bx	lr
  202698:	e0001000 	.word	0xe0001000
  20269c:	00000000 	.word	0x00000000

002026a0 <chEvtBroadcastFlagsI.constprop.22>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2026a2:	4f17      	ldr	r7, [pc, #92]	; (202700 <chEvtBroadcastFlagsI.constprop.22+0x60>)
  2026a4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2026a8:	42bc      	cmp	r4, r7
  2026aa:	d021      	beq.n	2026f0 <chEvtBroadcastFlagsI.constprop.22+0x50>
  2026ac:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2026ae:	2600      	movs	r6, #0
  2026b0:	e002      	b.n	2026b8 <chEvtBroadcastFlagsI.constprop.22+0x18>
    elp = elp->next;
  2026b2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2026b4:	42bc      	cmp	r4, r7
  2026b6:	d01b      	beq.n	2026f0 <chEvtBroadcastFlagsI.constprop.22+0x50>
    elp->flags |= flags;
  2026b8:	68e3      	ldr	r3, [r4, #12]
  2026ba:	432b      	orrs	r3, r5
  2026bc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2026be:	b115      	cbz	r5, 2026c6 <chEvtBroadcastFlagsI.constprop.22+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2026c0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2026c2:	4213      	tst	r3, r2
  2026c4:	d0f5      	beq.n	2026b2 <chEvtBroadcastFlagsI.constprop.22+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2026c6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2026c8:	68a3      	ldr	r3, [r4, #8]
  2026ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2026cc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2026d0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2026d2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2026d4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2026d6:	d00c      	beq.n	2026f2 <chEvtBroadcastFlagsI.constprop.22+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2026d8:	2a0b      	cmp	r2, #11
  2026da:	d1ea      	bne.n	2026b2 <chEvtBroadcastFlagsI.constprop.22+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2026dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2026de:	ea32 0303 	bics.w	r3, r2, r3
  2026e2:	d1e6      	bne.n	2026b2 <chEvtBroadcastFlagsI.constprop.22+0x12>
    tp->u.rdymsg = MSG_OK;
  2026e4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2026e6:	f7ff f9db 	bl	201aa0 <chSchReadyI>
    elp = elp->next;
  2026ea:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2026ec:	42bc      	cmp	r4, r7
  2026ee:	d1e3      	bne.n	2026b8 <chEvtBroadcastFlagsI.constprop.22+0x18>
  2026f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2026f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  2026f4:	4213      	tst	r3, r2
  2026f6:	d0dc      	beq.n	2026b2 <chEvtBroadcastFlagsI.constprop.22+0x12>
    tp->u.rdymsg = MSG_OK;
  2026f8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2026fa:	f7ff f9d1 	bl	201aa0 <chSchReadyI>
  2026fe:	e7f4      	b.n	2026ea <chEvtBroadcastFlagsI.constprop.22+0x4a>
  202700:	200009b0 	.word	0x200009b0
	...

00202710 <_pal_lld_setgroupmode.constprop.4>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  202710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  202714:	2100      	movs	r1, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  202716:	2502      	movs	r5, #2
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  202718:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  20271c:	f04f 0c0f 	mov.w	ip, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  202720:	4c1f      	ldr	r4, [pc, #124]	; (2027a0 <_pal_lld_setgroupmode.constprop.4+0x90>)
      m1 = 1 << bit;
  202722:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  202726:	2703      	movs	r7, #3
  202728:	e00f      	b.n	20274a <_pal_lld_setgroupmode.constprop.4+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  20272a:	6a26      	ldr	r6, [r4, #32]
  20272c:	ea26 0202 	bic.w	r2, r6, r2
  202730:	ea42 0209 	orr.w	r2, r2, r9
  202734:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  202736:	6822      	ldr	r2, [r4, #0]
  202738:	4013      	ands	r3, r2
  20273a:	432b      	orrs	r3, r5
  20273c:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20273e:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  202740:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  202744:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  202748:	d027      	beq.n	20279a <_pal_lld_setgroupmode.constprop.4+0x8a>
      m2 = 3 << (bit * 2);
  20274a:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  20274c:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  202750:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  202754:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  202758:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20275c:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  202760:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  202764:	d0eb      	beq.n	20273e <_pal_lld_setgroupmode.constprop.4+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  202766:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  20276a:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  20276c:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  202770:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  202774:	ea2a 0606 	bic.w	r6, sl, r6
  202778:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20277a:	68a6      	ldr	r6, [r4, #8]
  20277c:	ea06 0603 	and.w	r6, r6, r3
  202780:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  202782:	68e6      	ldr	r6, [r4, #12]
  202784:	ea06 0603 	and.w	r6, r6, r3
  202788:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  20278a:	d9ce      	bls.n	20272a <_pal_lld_setgroupmode.constprop.4+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20278c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  20278e:	ea26 0202 	bic.w	r2, r6, r2
  202792:	ea42 0209 	orr.w	r2, r2, r9
  202796:	6262      	str	r2, [r4, #36]	; 0x24
  202798:	e7cd      	b.n	202736 <_pal_lld_setgroupmode.constprop.4+0x26>
  }
}
  20279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20279e:	bf00      	nop
  2027a0:	40021000 	.word	0x40021000
	...

002027b0 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  2027b0:	b40e      	push	{r1, r2, r3}
  2027b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2027b6:	b086      	sub	sp, #24
  int n = 0;
  2027b8:	2300      	movs	r3, #0
    c = *fmt++;
  2027ba:	f04f 0954 	mov.w	r9, #84	; 0x54
  2027be:	f8df a280 	ldr.w	sl, [pc, #640]	; 202a40 <chprintf.constprop.0+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  2027c2:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  2027c4:	4c9d      	ldr	r4, [pc, #628]	; (202a3c <chprintf.constprop.0+0x28c>)
  int n = 0;
  2027c6:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  2027c8:	9502      	str	r5, [sp, #8]
  2027ca:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  2027ce:	9a00      	ldr	r2, [sp, #0]
  2027d0:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  2027d2:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  2027d6:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  2027d8:	9901      	ldr	r1, [sp, #4]
  2027da:	689b      	ldr	r3, [r3, #8]
  2027dc:	4898      	ldr	r0, [pc, #608]	; (202a40 <chprintf.constprop.0+0x290>)
      n++;
  2027de:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  2027e0:	4798      	blx	r3
  2027e2:	7823      	ldrb	r3, [r4, #0]
  2027e4:	9301      	str	r3, [sp, #4]
    if (c == 0)
  2027e6:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  2027e8:	1c74      	adds	r4, r6, #1
    if (c == 0)
  2027ea:	2b00      	cmp	r3, #0
  2027ec:	f000 8120 	beq.w	202a30 <chprintf.constprop.0+0x280>
    if (c != '%') {
  2027f0:	2b25      	cmp	r3, #37	; 0x25
  2027f2:	d1ec      	bne.n	2027ce <chprintf.constprop.0+0x1e>
    if (*fmt == '-') {
  2027f4:	7871      	ldrb	r1, [r6, #1]
  2027f6:	292d      	cmp	r1, #45	; 0x2d
  2027f8:	f000 814b 	beq.w	202a92 <chprintf.constprop.0+0x2e2>
    left_align = FALSE;
  2027fc:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  202800:	2930      	cmp	r1, #48	; 0x30
  202802:	f000 8141 	beq.w	202a88 <chprintf.constprop.0+0x2d8>
    filler = ' ';
  202806:	f04f 0820 	mov.w	r8, #32
  20280a:	1c62      	adds	r2, r4, #1
    width = 0;
  20280c:	2400      	movs	r4, #0
  20280e:	e005      	b.n	20281c <chprintf.constprop.0+0x6c>
        c = va_arg(ap, int);
  202810:	782b      	ldrb	r3, [r5, #0]
  202812:	3504      	adds	r5, #4
  202814:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  202818:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  20281c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  202820:	4616      	mov	r6, r2
      width = width * 10 + c;
  202822:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  202826:	b2db      	uxtb	r3, r3
  202828:	2b09      	cmp	r3, #9
  20282a:	d9f3      	bls.n	202814 <chprintf.constprop.0+0x64>
      else if (c == '*')
  20282c:	292a      	cmp	r1, #42	; 0x2a
  20282e:	d0ef      	beq.n	202810 <chprintf.constprop.0+0x60>
    if (c == '.') {
  202830:	292e      	cmp	r1, #46	; 0x2e
  202832:	f04f 0200 	mov.w	r2, #0
  202836:	d04a      	beq.n	2028ce <chprintf.constprop.0+0x11e>
    if (c == 'l' || c == 'L') {
  202838:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  20283c:	2b4c      	cmp	r3, #76	; 0x4c
  20283e:	d155      	bne.n	2028ec <chprintf.constprop.0+0x13c>
      if (*fmt)
  202840:	7833      	ldrb	r3, [r6, #0]
  202842:	9301      	str	r3, [sp, #4]
  202844:	b11b      	cbz	r3, 20284e <chprintf.constprop.0+0x9e>
        c = *fmt++;
  202846:	4619      	mov	r1, r3
  202848:	3601      	adds	r6, #1
  20284a:	7833      	ldrb	r3, [r6, #0]
  20284c:	9301      	str	r3, [sp, #4]
    switch (c) {
  20284e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  202852:	2b34      	cmp	r3, #52	; 0x34
  202854:	f200 810c 	bhi.w	202a70 <chprintf.constprop.0+0x2c0>
  202858:	e8df f013 	tbh	[pc, r3, lsl #1]
  20285c:	010a018f 	.word	0x010a018f
  202860:	010a010a 	.word	0x010a010a
  202864:	018f010a 	.word	0x018f010a
  202868:	010a010a 	.word	0x010a010a
  20286c:	010a010a 	.word	0x010a010a
  202870:	014d010a 	.word	0x014d010a
  202874:	010a010a 	.word	0x010a010a
  202878:	010a010a 	.word	0x010a010a
  20287c:	0152010a 	.word	0x0152010a
  202880:	010a010a 	.word	0x010a010a
  202884:	010a0187 	.word	0x010a0187
  202888:	010a010a 	.word	0x010a010a
  20288c:	010a010a 	.word	0x010a010a
  202890:	010a010a 	.word	0x010a010a
  202894:	010a010a 	.word	0x010a010a
  202898:	00f6010a 	.word	0x00f6010a
  20289c:	010a018f 	.word	0x010a018f
  2028a0:	010a010a 	.word	0x010a010a
  2028a4:	018f010a 	.word	0x018f010a
  2028a8:	010a010a 	.word	0x010a010a
  2028ac:	010a010a 	.word	0x010a010a
  2028b0:	014d010a 	.word	0x014d010a
  2028b4:	010a010a 	.word	0x010a010a
  2028b8:	0089010a 	.word	0x0089010a
  2028bc:	0152010a 	.word	0x0152010a
  2028c0:	010a010a 	.word	0x010a010a
  2028c4:	0187      	.short	0x0187
          c = va_arg(ap, int);
  2028c6:	782b      	ldrb	r3, [r5, #0]
  2028c8:	3504      	adds	r5, #4
        precision += c;
  2028ca:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  2028ce:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  2028d2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  2028d6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  2028da:	b2db      	uxtb	r3, r3
  2028dc:	2b09      	cmp	r3, #9
  2028de:	d9f4      	bls.n	2028ca <chprintf.constprop.0+0x11a>
        else if (c == '*')
  2028e0:	292a      	cmp	r1, #42	; 0x2a
  2028e2:	d0f0      	beq.n	2028c6 <chprintf.constprop.0+0x116>
    if (c == 'l' || c == 'L') {
  2028e4:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2028e8:	2b4c      	cmp	r3, #76	; 0x4c
  2028ea:	d0a9      	beq.n	202840 <chprintf.constprop.0+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  2028ec:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  2028f0:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  2028f4:	b2db      	uxtb	r3, r3
    switch (c) {
  2028f6:	2834      	cmp	r0, #52	; 0x34
  2028f8:	f200 80b8 	bhi.w	202a6c <chprintf.constprop.0+0x2bc>
  2028fc:	e8df f010 	tbh	[pc, r0, lsl #1]
  202900:	00b6010a 	.word	0x00b6010a
  202904:	00b600b6 	.word	0x00b600b6
  202908:	010a00b6 	.word	0x010a00b6
  20290c:	00b600b6 	.word	0x00b600b6
  202910:	00b600b6 	.word	0x00b600b6
  202914:	010300b6 	.word	0x010300b6
  202918:	00b600b6 	.word	0x00b600b6
  20291c:	00b600b6 	.word	0x00b600b6
  202920:	00ce00b6 	.word	0x00ce00b6
  202924:	00b600b6 	.word	0x00b600b6
  202928:	00b60138 	.word	0x00b60138
  20292c:	00b600b6 	.word	0x00b600b6
  202930:	00b600b6 	.word	0x00b600b6
  202934:	00b600b6 	.word	0x00b600b6
  202938:	00b600b6 	.word	0x00b600b6
  20293c:	00a200b6 	.word	0x00a200b6
  202940:	00b6010a 	.word	0x00b6010a
  202944:	00b600b6 	.word	0x00b600b6
  202948:	010a00b6 	.word	0x010a00b6
  20294c:	00b600b6 	.word	0x00b600b6
  202950:	00b600b6 	.word	0x00b600b6
  202954:	010300b6 	.word	0x010300b6
  202958:	00b600b6 	.word	0x00b600b6
  20295c:	003500b6 	.word	0x003500b6
  202960:	00ce00b6 	.word	0x00ce00b6
  202964:	00b600b6 	.word	0x00b600b6
  202968:	0138      	.short	0x0138
  20296a:	7833      	ldrb	r3, [r6, #0]
  20296c:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  20296e:	682f      	ldr	r7, [r5, #0]
  202970:	3504      	adds	r5, #4
  202972:	2f00      	cmp	r7, #0
  202974:	f000 8111 	beq.w	202b9a <chprintf.constprop.0+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  202978:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  20297a:	2a00      	cmp	r2, #0
  20297c:	f040 810a 	bne.w	202b94 <chprintf.constprop.0+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  202980:	2b00      	cmp	r3, #0
  202982:	f000 811c 	beq.w	202bbe <chprintf.constprop.0+0x40e>
  202986:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  20298a:	463a      	mov	r2, r7
  20298c:	e001      	b.n	202992 <chprintf.constprop.0+0x1e2>
  20298e:	3b01      	subs	r3, #1
  202990:	d403      	bmi.n	20299a <chprintf.constprop.0+0x1ea>
  202992:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  202996:	2900      	cmp	r1, #0
  202998:	d1f9      	bne.n	20298e <chprintf.constprop.0+0x1de>
  20299a:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  20299c:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  2029a0:	1aa4      	subs	r4, r4, r2
  2029a2:	f102 39ff 	add.w	r9, r2, #4294967295
  2029a6:	d45b      	bmi.n	202a60 <chprintf.constprop.0+0x2b0>
    if (left_align == FALSE)
  2029a8:	f1bc 0f00 	cmp.w	ip, #0
  2029ac:	d168      	bne.n	202a80 <chprintf.constprop.0+0x2d0>
  2029ae:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  2029b2:	2c00      	cmp	r4, #0
  2029b4:	d063      	beq.n	202a7e <chprintf.constprop.0+0x2ce>
      if (*s == '-' && filler == '0') {
  2029b6:	783b      	ldrb	r3, [r7, #0]
  2029b8:	2b2d      	cmp	r3, #45	; 0x2d
  2029ba:	d103      	bne.n	2029c4 <chprintf.constprop.0+0x214>
  2029bc:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  2029c0:	f000 80f0 	beq.w	202ba4 <chprintf.constprop.0+0x3f4>
        streamPut(chp, (uint8_t)filler);
  2029c4:	f8da 3000 	ldr.w	r3, [sl]
  2029c8:	4641      	mov	r1, r8
  2029ca:	4650      	mov	r0, sl
  2029cc:	689b      	ldr	r3, [r3, #8]
  2029ce:	4798      	blx	r3
      } while (++width != 0);
  2029d0:	f11b 0b01 	adds.w	fp, fp, #1
  2029d4:	d1f6      	bne.n	2029c4 <chprintf.constprop.0+0x214>
  2029d6:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  2029d8:	f1b9 0f00 	cmp.w	r9, #0
  2029dc:	4423      	add	r3, r4
  2029de:	9300      	str	r3, [sp, #0]
  2029e0:	f6ff af01 	blt.w	2027e6 <chprintf.constprop.0+0x36>
  2029e4:	465c      	mov	r4, fp
  2029e6:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  2029e8:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  2029ec:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  2029f0:	f817 1b01 	ldrb.w	r1, [r7], #1
  2029f4:	4650      	mov	r0, sl
  2029f6:	689b      	ldr	r3, [r3, #8]
  2029f8:	4798      	blx	r3
    while (--i >= 0) {
  2029fa:	f1bb 3fff 	cmp.w	fp, #4294967295
  2029fe:	d1f3      	bne.n	2029e8 <chprintf.constprop.0+0x238>
  202a00:	9b00      	ldr	r3, [sp, #0]
  202a02:	3301      	adds	r3, #1
  202a04:	444b      	add	r3, r9
  202a06:	9300      	str	r3, [sp, #0]
    while (width) {
  202a08:	2c00      	cmp	r4, #0
  202a0a:	f43f aeec 	beq.w	2027e6 <chprintf.constprop.0+0x36>
  202a0e:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  202a10:	f8da 3000 	ldr.w	r3, [sl]
  202a14:	4641      	mov	r1, r8
  202a16:	4650      	mov	r0, sl
  202a18:	689b      	ldr	r3, [r3, #8]
  202a1a:	4798      	blx	r3
    while (width) {
  202a1c:	3f01      	subs	r7, #1
  202a1e:	d1f7      	bne.n	202a10 <chprintf.constprop.0+0x260>
  202a20:	9b00      	ldr	r3, [sp, #0]
  202a22:	4423      	add	r3, r4
    c = *fmt++;
  202a24:	1c74      	adds	r4, r6, #1
  202a26:	9300      	str	r3, [sp, #0]
    if (c == 0)
  202a28:	9b01      	ldr	r3, [sp, #4]
  202a2a:	2b00      	cmp	r3, #0
  202a2c:	f47f aee0 	bne.w	2027f0 <chprintf.constprop.0+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  202a30:	9800      	ldr	r0, [sp, #0]
  202a32:	b006      	add	sp, #24
  202a34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202a38:	b003      	add	sp, #12
  202a3a:	4770      	bx	lr
  202a3c:	08002d3d 	.word	0x08002d3d
  202a40:	200009b0 	.word	0x200009b0
  202a44:	7833      	ldrb	r3, [r6, #0]
  202a46:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  202a48:	682b      	ldr	r3, [r5, #0]
  202a4a:	af06      	add	r7, sp, #24
  202a4c:	3504      	adds	r5, #4
  202a4e:	f04f 0900 	mov.w	r9, #0
  202a52:	2201      	movs	r2, #1
      filler = ' ';
  202a54:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  202a58:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  202a5c:	1aa4      	subs	r4, r4, r2
  202a5e:	d5a3      	bpl.n	2029a8 <chprintf.constprop.0+0x1f8>
    while (--i >= 0) {
  202a60:	f1b9 0f00 	cmp.w	r9, #0
  202a64:	f6ff aebf 	blt.w	2027e6 <chprintf.constprop.0+0x36>
      width = 0;
  202a68:	2400      	movs	r4, #0
  202a6a:	e7bc      	b.n	2029e6 <chprintf.constprop.0+0x236>
  202a6c:	7833      	ldrb	r3, [r6, #0]
  202a6e:	9301      	str	r3, [sp, #4]
      *p++ = c;
  202a70:	af06      	add	r7, sp, #24
  202a72:	f04f 0900 	mov.w	r9, #0
  202a76:	2201      	movs	r2, #1
  202a78:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  202a7c:	e7ee      	b.n	202a5c <chprintf.constprop.0+0x2ac>
    if (width < 0) {
  202a7e:	465c      	mov	r4, fp
    while (--i >= 0) {
  202a80:	f1b9 0f00 	cmp.w	r9, #0
  202a84:	daaf      	bge.n	2029e6 <chprintf.constprop.0+0x236>
  202a86:	e7bf      	b.n	202a08 <chprintf.constprop.0+0x258>
  202a88:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  202a8a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  202a8e:	3401      	adds	r4, #1
  202a90:	e6bb      	b.n	20280a <chprintf.constprop.0+0x5a>
      fmt++;
  202a92:	1cb4      	adds	r4, r6, #2
  202a94:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  202a96:	f04f 0c01 	mov.w	ip, #1
  202a9a:	e6b1      	b.n	202800 <chprintf.constprop.0+0x50>
    switch (c) {
  202a9c:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  202aa0:	2b19      	cmp	r3, #25
  202aa2:	d934      	bls.n	202b0e <chprintf.constprop.0+0x35e>
        l = va_arg(ap, unsigned int);
  202aa4:	682f      	ldr	r7, [r5, #0]
  202aa6:	3504      	adds	r5, #4
  202aa8:	7833      	ldrb	r3, [r6, #0]
  202aaa:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  202aac:	f10d 0117 	add.w	r1, sp, #23
  202ab0:	e000      	b.n	202ab4 <chprintf.constprop.0+0x304>
  } while ((ll /= radix) != 0);
  202ab2:	4601      	mov	r1, r0
    *--q = i;
  202ab4:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  202ab6:	fbb7 f2fe 	udiv	r2, r7, lr
  202aba:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  202abe:	4617      	mov	r7, r2
    i += '0';
  202ac0:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  202ac4:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  202ac6:	bfc8      	it	gt
  202ac8:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  202acc:	b2db      	uxtb	r3, r3
  202ace:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  202ad2:	2a00      	cmp	r2, #0
  202ad4:	d1ed      	bne.n	202ab2 <chprintf.constprop.0+0x302>
  i = (int)(p + MAX_FILLER - q);
  202ad6:	f10d 0217 	add.w	r2, sp, #23
  202ada:	af03      	add	r7, sp, #12
  202adc:	1a12      	subs	r2, r2, r0
  202ade:	46be      	mov	lr, r7
  202ae0:	4410      	add	r0, r2
  202ae2:	e001      	b.n	202ae8 <chprintf.constprop.0+0x338>
  202ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  202ae8:	4288      	cmp	r0, r1
    *p++ = *q++;
  202aea:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  202aee:	d1f9      	bne.n	202ae4 <chprintf.constprop.0+0x334>
  202af0:	f102 39ff 	add.w	r9, r2, #4294967295
  202af4:	e7b2      	b.n	202a5c <chprintf.constprop.0+0x2ac>
    switch (c) {
  202af6:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  202afa:	682f      	ldr	r7, [r5, #0]
  202afc:	3504      	adds	r5, #4
  202afe:	e7d5      	b.n	202aac <chprintf.constprop.0+0x2fc>
    switch (c) {
  202b00:	f04f 0e0a 	mov.w	lr, #10
  202b04:	e7f9      	b.n	202afa <chprintf.constprop.0+0x34a>
      if (is_long)
  202b06:	2b19      	cmp	r3, #25
    switch (c) {
  202b08:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  202b0c:	d8ca      	bhi.n	202aa4 <chprintf.constprop.0+0x2f4>
  202b0e:	7833      	ldrb	r3, [r6, #0]
  202b10:	9301      	str	r3, [sp, #4]
  202b12:	e7f2      	b.n	202afa <chprintf.constprop.0+0x34a>
      if (is_long)
  202b14:	2b19      	cmp	r3, #25
  202b16:	d92e      	bls.n	202b76 <chprintf.constprop.0+0x3c6>
        l = va_arg(ap, int);
  202b18:	6829      	ldr	r1, [r5, #0]
  202b1a:	3504      	adds	r5, #4
  202b1c:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  202b1e:	2900      	cmp	r1, #0
  202b20:	9301      	str	r3, [sp, #4]
  202b22:	db2e      	blt.n	202b82 <chprintf.constprop.0+0x3d2>
    p = tmpbuf;
  202b24:	af03      	add	r7, sp, #12
  202b26:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  202b28:	f102 0b0b 	add.w	fp, r2, #11
  202b2c:	4658      	mov	r0, fp
    i = (int)(l % radix);
  202b2e:	4b26      	ldr	r3, [pc, #152]	; (202bc8 <chprintf.constprop.0+0x418>)
  202b30:	fba3 e301 	umull	lr, r3, r3, r1
  202b34:	08db      	lsrs	r3, r3, #3
  202b36:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  202b3a:	469e      	mov	lr, r3
  202b3c:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  202b40:	4671      	mov	r1, lr
    i += '0';
  202b42:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  202b44:	b2db      	uxtb	r3, r3
  202b46:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  202b4a:	2900      	cmp	r1, #0
  202b4c:	d1ef      	bne.n	202b2e <chprintf.constprop.0+0x37e>
  i = (int)(p + MAX_FILLER - q);
  202b4e:	ebab 0100 	sub.w	r1, fp, r0
  202b52:	4411      	add	r1, r2
  202b54:	e001      	b.n	202b5a <chprintf.constprop.0+0x3aa>
  202b56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  202b5a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  202b5e:	428a      	cmp	r2, r1
  202b60:	d1f9      	bne.n	202b56 <chprintf.constprop.0+0x3a6>
  202b62:	1bd2      	subs	r2, r2, r7
  202b64:	f102 39ff 	add.w	r9, r2, #4294967295
  202b68:	e778      	b.n	202a5c <chprintf.constprop.0+0x2ac>
    switch (c) {
  202b6a:	f04f 0e10 	mov.w	lr, #16
  202b6e:	e7c4      	b.n	202afa <chprintf.constprop.0+0x34a>
  202b70:	f04f 0e10 	mov.w	lr, #16
  202b74:	e794      	b.n	202aa0 <chprintf.constprop.0+0x2f0>
  202b76:	7833      	ldrb	r3, [r6, #0]
  202b78:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  202b7a:	6829      	ldr	r1, [r5, #0]
  202b7c:	3504      	adds	r5, #4
      if (l < 0) {
  202b7e:	2900      	cmp	r1, #0
  202b80:	dad0      	bge.n	202b24 <chprintf.constprop.0+0x374>
        *p++ = '-';
  202b82:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  202b86:	4249      	negs	r1, r1
        *p++ = '-';
  202b88:	f10d 020d 	add.w	r2, sp, #13
  202b8c:	af03      	add	r7, sp, #12
  202b8e:	f88d 300c 	strb.w	r3, [sp, #12]
  202b92:	e7c9      	b.n	202b28 <chprintf.constprop.0+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  202b94:	b19b      	cbz	r3, 202bbe <chprintf.constprop.0+0x40e>
  202b96:	1e53      	subs	r3, r2, #1
  202b98:	e6f7      	b.n	20298a <chprintf.constprop.0+0x1da>
      if (precision == 0)
  202b9a:	b90a      	cbnz	r2, 202ba0 <chprintf.constprop.0+0x3f0>
        precision = 32767;
  202b9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  202ba0:	4f0a      	ldr	r7, [pc, #40]	; (202bcc <chprintf.constprop.0+0x41c>)
  202ba2:	e7f8      	b.n	202b96 <chprintf.constprop.0+0x3e6>
        n++;
  202ba4:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  202ba6:	212d      	movs	r1, #45	; 0x2d
  202ba8:	f8da 3000 	ldr.w	r3, [sl]
  202bac:	4650      	mov	r0, sl
        n++;
  202bae:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  202bb0:	3701      	adds	r7, #1
  202bb2:	689b      	ldr	r3, [r3, #8]
  202bb4:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  202bb8:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  202bba:	4798      	blx	r3
  202bbc:	e702      	b.n	2029c4 <chprintf.constprop.0+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  202bbe:	f04f 39ff 	mov.w	r9, #4294967295
  202bc2:	f04f 0820 	mov.w	r8, #32
  202bc6:	e6ef      	b.n	2029a8 <chprintf.constprop.0+0x1f8>
  202bc8:	cccccccd 	.word	0xcccccccd
  202bcc:	08002d90 	.word	0x08002d90

00202bd0 <get_ticks>:
    return(enc_ticks);
  202bd0:	4b01      	ldr	r3, [pc, #4]	; (202bd8 <get_ticks+0x8>)
}
  202bd2:	6818      	ldr	r0, [r3, #0]
  202bd4:	4770      	bx	lr
  202bd6:	bf00      	nop
  202bd8:	20000a18 	.word	0x20000a18
