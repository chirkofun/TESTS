
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fa87 	bl	201730 <__core_init>
  200222:	f000 fcfd 	bl	200c20 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fa21 	bl	2016b0 <__init_ram_areas>
  20026e:	f001 fa57 	bl	201720 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 f92d 	bl	2004e0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 ba3b 	b.w	201710 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08001ea8 	.word	0x08001ea8
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000a14 	.word	0x20000a14
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 f9ae 	bl	201650 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 ffbc 	bl	201270 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200300:	4a02      	ldr	r2, [pc, #8]	; (20030c <notify7+0xc>)
  200302:	6813      	ldr	r3, [r2, #0]
  200304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200308:	6013      	str	r3, [r2, #0]
  20030a:	4770      	bx	lr
  20030c:	40007800 	.word	0x40007800

00200310 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  200310:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200312:	4b0b      	ldr	r3, [pc, #44]	; (200340 <VectorA4+0x30>)
  200314:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200316:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200318:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20031a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20031c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20031e:	d107      	bne.n	200330 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200320:	2002      	movs	r0, #2
  200322:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200324:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200326:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200328:	68d1      	ldr	r1, [r2, #12]
  20032a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20032e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200330:	685b      	ldr	r3, [r3, #4]
  200332:	4803      	ldr	r0, [pc, #12]	; (200340 <VectorA4+0x30>)
  200334:	685b      	ldr	r3, [r3, #4]
  200336:	4798      	blx	r3
}
  200338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20033c:	f000 bd78 	b.w	200e30 <_port_irq_epilogue>
  200340:	20000808 	.word	0x20000808
	...

00200350 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  200350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200354:	4c5f      	ldr	r4, [pc, #380]	; (2004d4 <Vector188+0x184>)
  200356:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200358:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20035a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20035c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20035e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200360:	d152      	bne.n	200408 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  200362:	05eb      	lsls	r3, r5, #23
  200364:	d445      	bmi.n	2003f2 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  200366:	06a8      	lsls	r0, r5, #26
  200368:	d417      	bmi.n	20039a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20036a:	0639      	lsls	r1, r7, #24
  20036c:	d501      	bpl.n	200372 <Vector188+0x22>
  20036e:	062a      	lsls	r2, r5, #24
  200370:	d465      	bmi.n	20043e <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  200372:	066b      	lsls	r3, r5, #25
  200374:	d50d      	bpl.n	200392 <Vector188+0x42>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200376:	2320      	movs	r3, #32
  200378:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20037c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  20037e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200380:	429a      	cmp	r2, r3
  200382:	f000 8086 	beq.w	200492 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200386:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20038a:	2300      	movs	r3, #0
  20038c:	6037      	str	r7, [r6, #0]
  20038e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  200392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  200396:	f000 bd4b 	b.w	200e30 <_port_irq_epilogue>
  20039a:	2320      	movs	r3, #32
  20039c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2003a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
  2003a2:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  2003a6:	6963      	ldr	r3, [r4, #20]
  2003a8:	ea01 0802 	and.w	r8, r1, r2
  2003ac:	2b00      	cmp	r3, #0
  2003ae:	d078      	beq.n	2004a2 <Vector188+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  2003b0:	6a23      	ldr	r3, [r4, #32]
  2003b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  2003b4:	4293      	cmp	r3, r2
  2003b6:	d078      	beq.n	2004aa <Vector188+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  2003b8:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2003ba:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  2003bc:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  2003be:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  2003c0:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2003c2:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  2003c6:	6a22      	ldr	r2, [r4, #32]
  2003c8:	69e3      	ldr	r3, [r4, #28]
  2003ca:	429a      	cmp	r2, r3
  2003cc:	d25e      	bcs.n	20048c <Vector188+0x13c>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
  2003ce:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  2003d0:	4a41      	ldr	r2, [pc, #260]	; (2004d8 <Vector188+0x188>)
  2003d2:	4293      	cmp	r3, r2
  2003d4:	d009      	beq.n	2003ea <Vector188+0x9a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
  2003d6:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  2003d8:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2003dc:	4618      	mov	r0, r3
  2003de:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2003e0:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2003e2:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2003e6:	f001 f91b 	bl	201620 <chSchReadyI>
  2003ea:	2300      	movs	r3, #0
  2003ec:	f383 8811 	msr	BASEPRI, r3
  2003f0:	e7bb      	b.n	20036a <Vector188+0x1a>
  2003f2:	2320      	movs	r3, #32
  2003f4:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2003f8:	f44f 7000 	mov.w	r0, #512	; 0x200
  2003fc:	f001 f9f0 	bl	2017e0 <chEvtBroadcastFlagsI.constprop.21>
  200400:	2300      	movs	r3, #0
  200402:	f383 8811 	msr	BASEPRI, r3
  200406:	e7ae      	b.n	200366 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  200408:	f015 0f08 	tst.w	r5, #8
  20040c:	bf0c      	ite	eq
  20040e:	2000      	moveq	r0, #0
  200410:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  200412:	07eb      	lsls	r3, r5, #31
  200414:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  200418:	bf48      	it	mi
  20041a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20041e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  200420:	bf48      	it	mi
  200422:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  200426:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  200428:	bf48      	it	mi
  20042a:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  20042e:	f383 8811 	msr	BASEPRI, r3
  200432:	f001 f9d5 	bl	2017e0 <chEvtBroadcastFlagsI.constprop.21>
  200436:	2300      	movs	r3, #0
  200438:	f383 8811 	msr	BASEPRI, r3
  20043c:	e791      	b.n	200362 <Vector188+0x12>
  20043e:	2320      	movs	r3, #32
  200440:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200444:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200446:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200448:	429a      	cmp	r2, r3
  20044a:	d036      	beq.n	2004ba <Vector188+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  20044c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20044e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200450:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200452:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200454:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200456:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200458:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20045a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  20045e:	d301      	bcc.n	200464 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  200460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200462:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200464:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200466:	4a1d      	ldr	r2, [pc, #116]	; (2004dc <Vector188+0x18c>)
  200468:	4293      	cmp	r3, r2
  20046a:	d009      	beq.n	200480 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  20046c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  20046e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200472:	4618      	mov	r0, r3
  200474:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  200476:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200478:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  20047c:	f001 f8d0 	bl	201620 <chSchReadyI>
      u->TDR = b;
  200480:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200484:	2300      	movs	r3, #0
  200486:	f383 8811 	msr	BASEPRI, r3
  20048a:	e772      	b.n	200372 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  20048c:	69a3      	ldr	r3, [r4, #24]
  20048e:	6223      	str	r3, [r4, #32]
  200490:	e79d      	b.n	2003ce <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  200492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  200494:	2b00      	cmp	r3, #0
  200496:	f43f af76 	beq.w	200386 <Vector188+0x36>
  20049a:	2010      	movs	r0, #16
  20049c:	f001 f9a0 	bl	2017e0 <chEvtBroadcastFlagsI.constprop.21>
  2004a0:	e771      	b.n	200386 <Vector188+0x36>
  2004a2:	2004      	movs	r0, #4
  2004a4:	f001 f99c 	bl	2017e0 <chEvtBroadcastFlagsI.constprop.21>
  2004a8:	e782      	b.n	2003b0 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  2004aa:	6962      	ldr	r2, [r4, #20]
  2004ac:	2a00      	cmp	r2, #0
  2004ae:	d083      	beq.n	2003b8 <Vector188+0x68>
  2004b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  2004b4:	f001 f994 	bl	2017e0 <chEvtBroadcastFlagsI.constprop.21>
  2004b8:	e797      	b.n	2003ea <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  2004ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2004bc:	2a00      	cmp	r2, #0
  2004be:	d0c5      	beq.n	20044c <Vector188+0xfc>
  2004c0:	2008      	movs	r0, #8
  2004c2:	f001 f98d 	bl	2017e0 <chEvtBroadcastFlagsI.constprop.21>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  2004c6:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  2004ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  2004ce:	6033      	str	r3, [r6, #0]
  2004d0:	e7d8      	b.n	200484 <Vector188+0x134>
  2004d2:	bf00      	nop
  2004d4:	200009b0 	.word	0x200009b0
  2004d8:	200009bc 	.word	0x200009bc
  2004dc:	200009e0 	.word	0x200009e0

002004e0 <main>:
  tqp->next = (thread_t *)tqp;
  2004e0:	4cbf      	ldr	r4, [pc, #764]	; (2007e0 <main+0x300>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
  2004e2:	2500      	movs	r5, #0
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
  2004e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  2004e8:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  2004ec:	f104 031c 	add.w	r3, r4, #28
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
  2004f0:	2600      	movs	r6, #0
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2004f2:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
#include <ext.h>
#include <Serial_Init.h>


int main(void)
{
  2004f6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  2004fa:	b087      	sub	sp, #28
  2004fc:	2700      	movs	r7, #0
  2004fe:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  200500:	4668      	mov	r0, sp
  tqp->prev = (thread_t *)tqp;
  200502:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  200504:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200506:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200508:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  20050a:	9200      	str	r2, [sp, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20050c:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  20050e:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  200510:	60a5      	str	r5, [r4, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
  200512:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200514:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200516:	9501      	str	r5, [sp, #4]
  tmp->last       = (rtcnt_t)0;
  200518:	9502      	str	r5, [sp, #8]
  tmp->n          = (ucnt_t)0;
  20051a:	9503      	str	r5, [sp, #12]
  tmp->cumulative = (rttime_t)0;
  20051c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  chTMStartMeasurementX(&tm);
  200520:	f001 f956 	bl	2017d0 <chTMStartMeasurementX.constprop.25>
  chTMStopMeasurementX(&tm);
  200524:	4668      	mov	r0, sp
  200526:	f000 fe7b 	bl	201220 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  20052a:	4bae      	ldr	r3, [pc, #696]	; (2007e4 <main+0x304>)
  20052c:	49ae      	ldr	r1, [pc, #696]	; (2007e8 <main+0x308>)
  tp->prio      = prio;
  20052e:	f04f 0e80 	mov.w	lr, #128	; 0x80
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  200532:	4aae      	ldr	r2, [pc, #696]	; (2007ec <main+0x30c>)
  REG_INSERT(tp);
  200534:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  200538:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  20053a:	f103 0c10 	add.w	ip, r3, #16
  20053e:	49ac      	ldr	r1, [pc, #688]	; (2007f0 <main+0x310>)
  endmem  = __heap_end__;
  200540:	4fac      	ldr	r7, [pc, #688]	; (2007f4 <main+0x314>)
  nextmem = __heap_base__;
  200542:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200544:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  200546:	49ac      	ldr	r1, [pc, #688]	; (2007f8 <main+0x318>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200548:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  20054c:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  20054e:	49ab      	ldr	r1, [pc, #684]	; (2007fc <main+0x31c>)
  ch.tm.offset = tm.last;
  200550:	9802      	ldr	r0, [sp, #8]
  200552:	68cf      	ldr	r7, [r1, #12]
  200554:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200556:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  20055a:	48a9      	ldr	r0, [pc, #676]	; (200800 <main+0x320>)
  tp->prio      = prio;
  20055c:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  200560:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  200564:	4338      	orrs	r0, r7

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200566:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 200848 <main+0x368>
  REG_INSERT(tp);
  20056a:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  20056c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 20084c <main+0x36c>
  tp->epending  = (eventmask_t)0;
  200570:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200572:	619d      	str	r5, [r3, #24]
  200574:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  200578:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  20057c:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  200580:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  200582:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  200586:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  200588:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  20058a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  20058e:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  200590:	f104 0758 	add.w	r7, r4, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  200594:	60c8      	str	r0, [r1, #12]
  200596:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  20059a:	609d      	str	r5, [r3, #8]
  20059c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  2005a0:	60dd      	str	r5, [r3, #12]
  2005a2:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  2005a4:	61a6      	str	r6, [r4, #24]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2005a6:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  2005a8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  2005ac:	f04f 0c10 	mov.w	ip, #16
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  2005b0:	4b94      	ldr	r3, [pc, #592]	; (200804 <main+0x324>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  2005b2:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  2005b4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2005b8:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  2005bc:	4892      	ldr	r0, [pc, #584]	; (200808 <main+0x328>)
  tqp->next = (thread_t *)tqp;
  2005be:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  2005c0:	65e7      	str	r7, [r4, #92]	; 0x5c
  2005c2:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  2005c6:	6818      	ldr	r0, [r3, #0]
  2005c8:	4310      	orrs	r0, r2
  2005ca:	6018      	str	r0, [r3, #0]
  2005cc:	f881 c01f 	strb.w	ip, [r1, #31]
  2005d0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  2005d4:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  2005d8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2005da:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  2005de:	4b8b      	ldr	r3, [pc, #556]	; (20080c <main+0x32c>)
  tp->state     = CH_STATE_WTSTART;
  2005e0:	2602      	movs	r6, #2
  REG_INSERT(tp);
  2005e2:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
  2005e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2005e8:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  2005ec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  2005f0:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  2005f4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2005f8:	4a85      	ldr	r2, [pc, #532]	; (200810 <main+0x330>)
  2005fa:	f8df e254 	ldr.w	lr, [pc, #596]	; 200850 <main+0x370>
  2005fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  200602:	4a84      	ldr	r2, [pc, #528]	; (200814 <main+0x334>)
  tp->state     = CH_STATE_WTSTART;
  200604:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  200608:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  20060c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200610:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200614:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200618:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  20061c:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  200620:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200624:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200626:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  20062a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  20062e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200632:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  200636:	6101      	str	r1, [r0, #16]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
  200638:	69a2      	ldr	r2, [r4, #24]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
  20063a:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
  20063e:	6890      	ldr	r0, [r2, #8]
  200640:	6161      	str	r1, [r4, #20]
  200642:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200646:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  20064a:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  20064e:	2800      	cmp	r0, #0
  200650:	f000 823e 	beq.w	200ad0 <main+0x5f0>
  tp->state = CH_STATE_READY;
  200654:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200658:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  20065a:	68a2      	ldr	r2, [r4, #8]
  20065c:	2a00      	cmp	r2, #0
  20065e:	d1fb      	bne.n	200658 <main+0x178>
  tp->queue.next             = cp;
  200660:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200664:	6860      	ldr	r0, [r4, #4]
  200666:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  20066a:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  20066c:	6061      	str	r1, [r4, #4]
  20066e:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200672:	4b69      	ldr	r3, [pc, #420]	; (200818 <main+0x338>)
  200674:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  200678:	4c68      	ldr	r4, [pc, #416]	; (20081c <main+0x33c>)
  rccResetAHB1(~0);
  20067a:	6918      	ldr	r0, [r3, #16]
  20067c:	6119      	str	r1, [r3, #16]
  20067e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200680:	6958      	ldr	r0, [r3, #20]
  200682:	6159      	str	r1, [r3, #20]
  200684:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200686:	6a18      	ldr	r0, [r3, #32]
  200688:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  20068c:	6218      	str	r0, [r3, #32]
  20068e:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200690:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200692:	6259      	str	r1, [r3, #36]	; 0x24
  200694:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200696:	6821      	ldr	r1, [r4, #0]
  200698:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  20069c:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  20069e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  2006a0:	f401 7140 	and.w	r1, r1, #768	; 0x300
  2006a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  2006a8:	d003      	beq.n	2006b2 <main+0x1d2>
    RCC->BDCR = RCC_BDCR_BDRST;
  2006aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  2006ae:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2006b0:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006b2:	4b59      	ldr	r3, [pc, #356]	; (200818 <main+0x338>)
  2006b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006b6:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006b8:	f042 0219 	orr.w	r2, r2, #25
  2006bc:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006be:	6f03      	ldr	r3, [r0, #112]	; 0x70
  2006c0:	079e      	lsls	r6, r3, #30
  2006c2:	d5fc      	bpl.n	2006be <main+0x1de>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  2006c4:	4c55      	ldr	r4, [pc, #340]	; (20081c <main+0x33c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2006c6:	f240 7cff 	movw	ip, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  2006ca:	2300      	movs	r3, #0
  gpiop->OSPEEDR = config->ospeedr;
  2006cc:	f04f 37ff 	mov.w	r7, #4294967295
  2006d0:	6861      	ldr	r1, [r4, #4]
  gpiop->ODR     = config->odr;
  2006d2:	f64b 797e 	movw	r9, #49022	; 0xbf7e
  gpiop->OSPEEDR = config->ospeedr;
  2006d6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  gpiop->MODER   = config->moder;
  2006da:	f640 2a08 	movw	sl, #2568	; 0xa08
  2006de:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  sdp->vmt = &vmt;
  2006e2:	4a4f      	ldr	r2, [pc, #316]	; (200820 <main+0x340>)
  iqp->q_buffer  = bp;
  2006e4:	f8df e16c 	ldr.w	lr, [pc, #364]	; 200854 <main+0x374>
  2006e8:	6061      	str	r1, [r4, #4]
  gpiop->ODR     = config->odr;
  2006ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2006ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
  oqp->q_buffer  = bp;
  2006f0:	4e4c      	ldr	r6, [pc, #304]	; (200824 <main+0x344>)
  2006f2:	ea44 040c 	orr.w	r4, r4, ip
  2006f6:	6304      	str	r4, [r0, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2006f8:	6d05      	ldr	r5, [r0, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
  2006fa:	4c4b      	ldr	r4, [pc, #300]	; (200828 <main+0x348>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2006fc:	ea45 050c 	orr.w	r5, r5, ip
  gpiop->PUPDR   = config->pupdr;
  200700:	f8df c154 	ldr.w	ip, [pc, #340]	; 200858 <main+0x378>
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200704:	6505      	str	r5, [r0, #80]	; 0x50
  gpiop->AFRH    = config->afrh;
  200706:	f44f 0530 	mov.w	r5, #11534336	; 0xb00000
  gpiop->OTYPER  = config->otyper;
  20070a:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20070c:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  20070e:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200712:	f8df c148 	ldr.w	ip, [pc, #328]	; 20085c <main+0x37c>
  gpiop->ODR     = config->odr;
  200716:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200718:	f8c4 c020 	str.w	ip, [r4, #32]
  gpiop->AFRH    = config->afrh;
  20071c:	f8df c140 	ldr.w	ip, [pc, #320]	; 200860 <main+0x380>
  200720:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200724:	f8df c13c 	ldr.w	ip, [pc, #316]	; 200864 <main+0x384>
  200728:	f8c4 c000 	str.w	ip, [r4]
  gpiop->OSPEEDR = config->ospeedr;
  20072c:	f46f 1c40 	mvn.w	ip, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  200730:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200734:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200738:	f107 478a 	add.w	r7, r7, #1157627904	; 0x45000000
  20073c:	f107 1755 	add.w	r7, r7, #5570645	; 0x550055
  200740:	f507 57a8 	add.w	r7, r7, #5376	; 0x1500
  200744:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  200748:	f8c4 9414 	str.w	r9, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20074c:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200750:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200754:	4d35      	ldr	r5, [pc, #212]	; (20082c <main+0x34c>)
  gpiop->PUPDR   = config->pupdr;
  200756:	4f36      	ldr	r7, [pc, #216]	; (200830 <main+0x350>)
  gpiop->MODER   = config->moder;
  200758:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20075c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  gpiop->AFRH    = config->afrh;
  200760:	2577      	movs	r5, #119	; 0x77
  gpiop->OTYPER  = config->otyper;
  200762:	6063      	str	r3, [r4, #4]
  gpiop->PUPDR   = config->pupdr;
  200764:	f8df 9100 	ldr.w	r9, [pc, #256]	; 200868 <main+0x388>
  gpiop->OSPEEDR = config->ospeedr;
  200768:	f8c4 8008 	str.w	r8, [r4, #8]
  gpiop->MODER   = config->moder;
  20076c:	f44f 2820 	mov.w	r8, #655360	; 0xa0000
  gpiop->PUPDR   = config->pupdr;
  200770:	60e7      	str	r7, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200772:	4f30      	ldr	r7, [pc, #192]	; (200834 <main+0x354>)
  gpiop->ODR     = config->odr;
  200774:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200776:	6227      	str	r7, [r4, #32]
  gpiop->PUPDR   = config->pupdr;
  200778:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->AFRH    = config->afrh;
  20077c:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20077e:	f8c4 a000 	str.w	sl, [r4]
  tqp->next = (thread_t *)tqp;
  200782:	f102 0a0c 	add.w	sl, r2, #12
  gpiop->OTYPER  = config->otyper;
  200786:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20078a:	f8c4 c408 	str.w	ip, [r4, #1032]	; 0x408
  gpiop->MODER   = config->moder;
  20078e:	f04f 6c08 	mov.w	ip, #142606336	; 0x8800000
  gpiop->PUPDR   = config->pupdr;
  200792:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  gpiop->OSPEEDR = config->ospeedr;
  200796:	f04f 090f 	mov.w	r9, #15
  gpiop->ODR     = config->odr;
  20079a:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20079e:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2007a2:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
  gpiop->OSPEEDR = config->ospeedr;
  2007a6:	4d24      	ldr	r5, [pc, #144]	; (200838 <main+0x358>)
  gpiop->MODER   = config->moder;
  2007a8:	f8c4 8400 	str.w	r8, [r4, #1024]	; 0x400
  iqp->q_top     = bp + size;
  2007ac:	f10e 0810 	add.w	r8, lr, #16
  gpiop->OTYPER  = config->otyper;
  2007b0:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2007b4:	f8c4 5808 	str.w	r5, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2007b8:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  2007bc:	4d1f      	ldr	r5, [pc, #124]	; (20083c <main+0x35c>)
  gpiop->ODR     = config->odr;
  2007be:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2007c2:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2007c6:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2007ca:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  2007ce:	4c1c      	ldr	r4, [pc, #112]	; (200840 <main+0x360>)
  gpiop->OTYPER  = config->otyper;
  2007d0:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2007d2:	60ac      	str	r4, [r5, #8]
  gpiop->OTYPER  = config->otyper;
  2007d4:	4c1b      	ldr	r4, [pc, #108]	; (200844 <main+0x364>)
  gpiop->PUPDR   = config->pupdr;
  2007d6:	60ef      	str	r7, [r5, #12]
  gpiop->ODR     = config->odr;
  2007d8:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
  2007da:	622b      	str	r3, [r5, #32]
  2007dc:	e046      	b.n	20086c <main+0x38c>
  2007de:	bf00      	nop
  2007e0:	20000818 	.word	0x20000818
  2007e4:	20000968 	.word	0x20000968
  2007e8:	00200d31 	.word	0x00200d31
  2007ec:	2000098c 	.word	0x2000098c
  2007f0:	20020000 	.word	0x20020000
  2007f4:	20080000 	.word	0x20080000
  2007f8:	20000988 	.word	0x20000988
  2007fc:	e000ed00 	.word	0xe000ed00
  200800:	05fa0300 	.word	0x05fa0300
  200804:	e0001000 	.word	0xe0001000
  200808:	c5acce55 	.word	0xc5acce55
  20080c:	20000890 	.word	0x20000890
  200810:	002002e5 	.word	0x002002e5
  200814:	08001de8 	.word	0x08001de8
  200818:	40023800 	.word	0x40023800
  20081c:	40007000 	.word	0x40007000
  200820:	200009b0 	.word	0x200009b0
  200824:	200009a0 	.word	0x200009a0
  200828:	40020000 	.word	0x40020000
  20082c:	18004001 	.word	0x18004001
  200830:	01555051 	.word	0x01555051
  200834:	00bb00b0 	.word	0x00bb00b0
  200838:	cffffff3 	.word	0xcffffff3
  20083c:	40021400 	.word	0x40021400
  200840:	003fcfff 	.word	0x003fcfff
  200844:	40021800 	.word	0x40021800
  200848:	e000edf0 	.word	0xe000edf0
  20084c:	08001dd0 	.word	0x08001dd0
  200850:	00200df1 	.word	0x00200df1
  200854:	20000990 	.word	0x20000990
  200858:	40005551 	.word	0x40005551
  20085c:	b0000bb0 	.word	0xb0000bb0
  200860:	000aaa0a 	.word	0x000aaa0a
  200864:	2aae8028 	.word	0x2aae8028
  200868:	55505555 	.word	0x55505555
  gpiop->AFRH    = config->afrh;
  20086c:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20086e:	602b      	str	r3, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200870:	4d9c      	ldr	r5, [pc, #624]	; (200ae4 <main+0x604>)
  gpiop->OTYPER  = config->otyper;
  200872:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200874:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200876:	4d9c      	ldr	r5, [pc, #624]	; (200ae8 <main+0x608>)
  200878:	60e5      	str	r5, [r4, #12]
  gpiop->AFRH    = config->afrh;
  20087a:	4d9c      	ldr	r5, [pc, #624]	; (200aec <main+0x60c>)
  gpiop->ODR     = config->odr;
  20087c:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  20087e:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  200880:	6265      	str	r5, [r4, #36]	; 0x24
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  200882:	2501      	movs	r5, #1
  gpiop->MODER   = config->moder;
  200884:	f8c4 c000 	str.w	ip, [r4]
  200888:	4694      	mov	ip, r2
  gpiop->OTYPER  = config->otyper;
  20088a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20088e:	f8c4 9408 	str.w	r9, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200892:	f8df 9298 	ldr.w	r9, [pc, #664]	; 200b2c <main+0x64c>
  200896:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  oqp->q_counter = size;
  20089a:	f04f 0910 	mov.w	r9, #16
  gpiop->ODR     = config->odr;
  20089e:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2008a2:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2008a6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2008aa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2008ae:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  2008b2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2008b4:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2008b6:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
  2008b8:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2008ba:	6223      	str	r3, [r4, #32]
  iqp->q_buffer  = bp;
  2008bc:	f8c2 e018 	str.w	lr, [r2, #24]
  gpiop->AFRH    = config->afrh;
  2008c0:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_rdptr   = bp;
  2008c2:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2008c6:	6023      	str	r3, [r4, #0]
  iqp->q_wrptr   = bp;
  2008c8:	f8c2 e020 	str.w	lr, [r2, #32]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2008cc:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  gpiop->OTYPER  = config->otyper;
  2008d0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  iqp->q_top     = bp + size;
  2008d4:	f8c2 801c 	str.w	r8, [r2, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2008d8:	f04f 08c0 	mov.w	r8, #192	; 0xc0
  gpiop->OSPEEDR = config->ospeedr;
  2008dc:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  sdp->state = SD_STOP;
  2008e0:	7215      	strb	r5, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  2008e2:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  2008e6:	f8c2 a00c 	str.w	sl, [r2, #12]
  gpiop->ODR     = config->odr;
  2008ea:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  tqp->prev = (thread_t *)tqp;
  2008ee:	f8c2 a010 	str.w	sl, [r2, #16]
  gpiop->AFRL    = config->afrl;
  2008f2:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2008f6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2008fa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2008fe:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200902:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200906:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  20090a:	2707      	movs	r7, #7
  gpiop->ODR     = config->odr;
  20090c:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  sdp->vmt = &vmt;
  200910:	4977      	ldr	r1, [pc, #476]	; (200af0 <main+0x610>)
  gpiop->AFRL    = config->afrl;
  200912:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200916:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20091a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  20091e:	f84c 1b04 	str.w	r1, [ip], #4
  200922:	4c74      	ldr	r4, [pc, #464]	; (200af4 <main+0x614>)
  GPTD1.tim = STM32_TIM1;
  200924:	4974      	ldr	r1, [pc, #464]	; (200af8 <main+0x618>)
  200926:	7025      	strb	r5, [r4, #0]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  200928:	700d      	strb	r5, [r1, #0]
  20092a:	4d74      	ldr	r5, [pc, #464]	; (200afc <main+0x61c>)
  gptp->config = NULL;
  20092c:	604b      	str	r3, [r1, #4]
  20092e:	60cd      	str	r5, [r1, #12]
  tqp->next = (thread_t *)tqp;
  200930:	f102 0530 	add.w	r5, r2, #48	; 0x30
  200934:	4972      	ldr	r1, [pc, #456]	; (200b00 <main+0x620>)
  iqp->q_counter = 0;
  200936:	6153      	str	r3, [r2, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  200938:	f8c2 c004 	str.w	ip, [r2, #4]
  oqp->q_top     = bp + size;
  20093c:	eb06 0c09 	add.w	ip, r6, r9
  extp->config = NULL;
  200940:	6063      	str	r3, [r4, #4]
  iqp->q_notify  = infy;
  200942:	6293      	str	r3, [r2, #40]	; 0x28
  oqp->q_buffer  = bp;
  200944:	63d6      	str	r6, [r2, #60]	; 0x3c
  iqp->q_link    = link;
  200946:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  200948:	6512      	str	r2, [r2, #80]	; 0x50
  oqp->q_counter = size;
  20094a:	f8c2 9038 	str.w	r9, [r2, #56]	; 0x38
  20094e:	f881 8352 	strb.w	r8, [r1, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200952:	f8c1 e188 	str.w	lr, [r1, #392]	; 0x188
  oqp->q_rdptr   = bp;
  200956:	6496      	str	r6, [r2, #72]	; 0x48
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200958:	f8c1 e008 	str.w	lr, [r1, #8]
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  20095c:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 200b30 <main+0x650>
  oqp->q_wrptr   = bp;
  200960:	6456      	str	r6, [r2, #68]	; 0x44

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  200962:	2680      	movs	r6, #128	; 0x80
  200964:	f841 ecec 	str.w	lr, [r1, #-236]
  oqp->q_top     = bp + size;
  200968:	f8c2 c040 	str.w	ip, [r2, #64]	; 0x40
  SysTick->VAL = 0;
  20096c:	f841 3ce8 	str.w	r3, [r1, #-232]
  200970:	2320      	movs	r3, #32
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  200972:	f841 7cf0 	str.w	r7, [r1, #-240]
  oqp->q_notify  = onfy;
  200976:	4f63      	ldr	r7, [pc, #396]	; (200b04 <main+0x624>)

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  200978:	4963      	ldr	r1, [pc, #396]	; (200b08 <main+0x628>)
  20097a:	64d7      	str	r7, [r2, #76]	; 0x4c
  20097c:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  20097e:	4f63      	ldr	r7, [pc, #396]	; (200b0c <main+0x62c>)
  200980:	4963      	ldr	r1, [pc, #396]	; (200b10 <main+0x630>)
  200982:	6597      	str	r7, [r2, #88]	; 0x58
  200984:	6315      	str	r5, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  200986:	6355      	str	r5, [r2, #52]	; 0x34
  200988:	f881 6023 	strb.w	r6, [r1, #35]	; 0x23
  20098c:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  200990:	7a13      	ldrb	r3, [r2, #8]
  200992:	2b01      	cmp	r3, #1
  200994:	f000 813c 	beq.w	200c10 <main+0x730>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200998:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20099a:	2540      	movs	r5, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20099c:	485d      	ldr	r0, [pc, #372]	; (200b14 <main+0x634>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20099e:	f04f 0c01 	mov.w	ip, #1
  USART_TypeDef *u = sdp->usart;
  2009a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2009a4:	f240 1e2d 	movw	lr, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2009a8:	fba0 0101 	umull	r0, r1, r0, r1
  sdp->state = SD_READY;
  2009ac:	2702      	movs	r7, #2
  u->ICR = 0xFFFFFFFFU;
  2009ae:	f04f 30ff 	mov.w	r0, #4294967295
  2009b2:	2600      	movs	r6, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2009b4:	0a89      	lsrs	r1, r1, #10
  2009b6:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2009b8:	605d      	str	r5, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2009ba:	f8c3 c008 	str.w	ip, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2009be:	f8c3 e000 	str.w	lr, [r3]
  u->ICR = 0xFFFFFFFFU;
  2009c2:	6218      	str	r0, [r3, #32]
  2009c4:	7217      	strb	r7, [r2, #8]
    sdp->rxmask = 0xFF;
  2009c6:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  2009ca:	f386 8811 	msr	BASEPRI, r6
 * Serial 7 UART Initialization.
 */
void sd7_init(void)
{
    sdStart( &SD7, &UARTcfg );
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  2009ce:	f44f 7080 	mov.w	r0, #256	; 0x100
  2009d2:	f000 ff3d 	bl	201850 <_pal_lld_setgroupmode.constprop.4>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  2009d6:	2080      	movs	r0, #128	; 0x80
  2009d8:	f000 ff3a 	bl	201850 <_pal_lld_setgroupmode.constprop.4>
  2009dc:	2320      	movs	r3, #32
  2009de:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
  expchannel_t line;

  if (extp->state == EXT_STOP)
  2009e2:	7823      	ldrb	r3, [r4, #0]
  osalDbgCheck((extp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
                "invalid state");
  extp->config = config;
  2009e4:	4e4c      	ldr	r6, [pc, #304]	; (200b18 <main+0x638>)
  2009e6:	2b01      	cmp	r3, #1
  2009e8:	6066      	str	r6, [r4, #4]
  2009ea:	f000 80a5 	beq.w	200b38 <main+0x658>
  cp = (thread_t *)&ch.rlist.queue;
  2009ee:	2100      	movs	r1, #0
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
  2009f0:	2701      	movs	r7, #1
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
  2009f2:	4b4a      	ldr	r3, [pc, #296]	; (200b1c <main+0x63c>)
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  2009f4:	f04f 0c0f 	mov.w	ip, #15
  2009f8:	460a      	mov	r2, r1
  2009fa:	f8df e138 	ldr.w	lr, [pc, #312]	; 200b34 <main+0x654>
  2009fe:	e012      	b.n	200a26 <main+0x546>
    EXTI->IMR  &= ~cmask;
  200a00:	681d      	ldr	r5, [r3, #0]
  200a02:	43c1      	mvns	r1, r0
  200a04:	400d      	ands	r5, r1
  200a06:	601d      	str	r5, [r3, #0]
    EXTI->EMR  &= ~cmask;
  200a08:	685d      	ldr	r5, [r3, #4]
  200a0a:	400d      	ands	r5, r1
  200a0c:	605d      	str	r5, [r3, #4]
    EXTI->RTSR &= ~cmask;
  200a0e:	689d      	ldr	r5, [r3, #8]
  200a10:	400d      	ands	r5, r1
  200a12:	609d      	str	r5, [r3, #8]
    EXTI->FTSR &= ~cmask;
  200a14:	68dd      	ldr	r5, [r3, #12]
  200a16:	4029      	ands	r1, r5
  200a18:	60d9      	str	r1, [r3, #12]
    EXTI->PR    =  cmask;
  200a1a:	6158      	str	r0, [r3, #20]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200a1c:	3201      	adds	r2, #1
  200a1e:	2a18      	cmp	r2, #24
  200a20:	d03e      	beq.n	200aa0 <main+0x5c0>
  200a22:	f856 1032 	ldr.w	r1, [r6, r2, lsl #3]
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
  200a26:	074d      	lsls	r5, r1, #29
  uint32_t cmask = (1 << (channel & 0x1F));
  200a28:	fa07 f002 	lsl.w	r0, r7, r2
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
  200a2c:	d5e8      	bpl.n	200a00 <main+0x520>
  if (channel < 16) {
  200a2e:	2a0f      	cmp	r2, #15
  200a30:	d814      	bhi.n	200a5c <main+0x57c>
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  200a32:	f002 0b03 	and.w	fp, r2, #3
  200a36:	f022 0803 	bic.w	r8, r2, #3
                      EXT_MODE_GPIO_MASK) >>
  200a3a:	f3c1 1503 	ubfx	r5, r1, #4, #4
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  200a3e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
  200a42:	44f0      	add	r8, lr
  200a44:	fa0c fa0b 	lsl.w	sl, ip, fp
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
  200a48:	f8d8 9008 	ldr.w	r9, [r8, #8]
    uint32_t port = ((extp->config->channels[channel].mode &
  200a4c:	fa05 f50b 	lsl.w	r5, r5, fp
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
  200a50:	ea29 090a 	bic.w	r9, r9, sl
  200a54:	ea45 0509 	orr.w	r5, r5, r9
  200a58:	f8c8 5008 	str.w	r5, [r8, #8]
      EXTI->RTSR |= cmask;
  200a5c:	f8d3 8008 	ldr.w	r8, [r3, #8]
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
  200a60:	f011 0f01 	tst.w	r1, #1
  200a64:	ea6f 0500 	mvn.w	r5, r0
      EXTI->RTSR |= cmask;
  200a68:	bf14      	ite	ne
  200a6a:	ea40 0808 	orrne.w	r8, r0, r8
      EXTI->RTSR &= ~cmask;
  200a6e:	ea08 0805 	andeq.w	r8, r8, r5
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
  200a72:	f011 0f02 	tst.w	r1, #2
      EXTI->RTSR &= ~cmask;
  200a76:	f8c3 8008 	str.w	r8, [r3, #8]
      EXTI->FTSR |= cmask;
  200a7a:	68d9      	ldr	r1, [r3, #12]
  200a7c:	bf14      	ite	ne
  200a7e:	4301      	orrne	r1, r0
      EXTI->FTSR &= ~cmask;
  200a80:	4029      	andeq	r1, r5
  200a82:	60d9      	str	r1, [r3, #12]
    if (extp->config->channels[channel].cb != NULL) {
  200a84:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
  200a88:	6849      	ldr	r1, [r1, #4]
  200a8a:	b321      	cbz	r1, 200ad6 <main+0x5f6>
      EXTI->IMR |= cmask;
  200a8c:	6819      	ldr	r1, [r3, #0]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200a8e:	3201      	adds	r2, #1
      EXTI->IMR |= cmask;
  200a90:	4308      	orrs	r0, r1
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200a92:	2a18      	cmp	r2, #24
      EXTI->IMR |= cmask;
  200a94:	6018      	str	r0, [r3, #0]
      EXTI->EMR &= ~cmask;
  200a96:	6859      	ldr	r1, [r3, #4]
  200a98:	ea05 0501 	and.w	r5, r5, r1
  200a9c:	605d      	str	r5, [r3, #4]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200a9e:	d1c0      	bne.n	200a22 <main+0x542>
  ext_lld_start(extp);
  extp->state = EXT_ACTIVE;
  200aa0:	2202      	movs	r2, #2
  200aa2:	2300      	movs	r3, #0
  200aa4:	7022      	strb	r2, [r4, #0]
  200aa6:	f383 8811 	msr	BASEPRI, r3
  200aaa:	4f1d      	ldr	r7, [pc, #116]	; (200b20 <main+0x640>)
  200aac:	2620      	movs	r6, #32
    uint32_t ticks = 0;

    while(1)
    {
        ticks = get_ticks();
        chprintf(((BaseSequentialStream *)&SD7), "Ticks:(%d)\n\r", ticks);
  200aae:	4d1d      	ldr	r5, [pc, #116]	; (200b24 <main+0x644>)
  200ab0:	4c1d      	ldr	r4, [pc, #116]	; (200b28 <main+0x648>)
  200ab2:	683a      	ldr	r2, [r7, #0]
  200ab4:	4629      	mov	r1, r5
  200ab6:	4620      	mov	r0, r4
  200ab8:	f000 ff1a 	bl	2018f0 <chprintf.constprop.0>
  200abc:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  200ac0:	2132      	movs	r1, #50	; 0x32
  200ac2:	2008      	movs	r0, #8
  200ac4:	f000 fbf4 	bl	2012b0 <chSchGoSleepTimeoutS>
  200ac8:	2300      	movs	r3, #0
  200aca:	f383 8811 	msr	BASEPRI, r3
  200ace:	e7f0      	b.n	200ab2 <main+0x5d2>
  tp->state = CH_STATE_READY;
  200ad0:	f882 0020 	strb.w	r0, [r2, #32]
  200ad4:	e7fe      	b.n	200ad4 <main+0x5f4>
      EXTI->EMR |= cmask;
  200ad6:	6859      	ldr	r1, [r3, #4]
  200ad8:	4308      	orrs	r0, r1
  200ada:	6058      	str	r0, [r3, #4]
      EXTI->IMR &= ~cmask;
  200adc:	6819      	ldr	r1, [r3, #0]
  200ade:	400d      	ands	r5, r1
  200ae0:	601d      	str	r5, [r3, #0]
  200ae2:	e79b      	b.n	200a1c <main+0x53c>
  200ae4:	3cccf000 	.word	0x3cccf000
  200ae8:	51155555 	.word	0x51155555
  200aec:	00b0b000 	.word	0x00b0b000
  200af0:	08001e00 	.word	0x08001e00
  200af4:	20000800 	.word	0x20000800
  200af8:	20000808 	.word	0x20000808
  200afc:	40010000 	.word	0x40010000
  200b00:	e000e100 	.word	0xe000e100
  200b04:	00200301 	.word	0x00200301
  200b08:	40007800 	.word	0x40007800
  200b0c:	0337f980 	.word	0x0337f980
  200b10:	e000ed00 	.word	0xe000ed00
  200b14:	1b4e81b5 	.word	0x1b4e81b5
  200b18:	08001d10 	.word	0x08001d10
  200b1c:	40013c00 	.word	0x40013c00
  200b20:	20000a10 	.word	0x20000a10
  200b24:	08001df0 	.word	0x08001df0
  200b28:	200009b0 	.word	0x200009b0
  200b2c:	55555550 	.word	0x55555550
  200b30:	00034bbf 	.word	0x00034bbf
  200b34:	40013800 	.word	0x40013800
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b38:	4b38      	ldr	r3, [pc, #224]	; (200c1c <main+0x73c>)
  200b3a:	2260      	movs	r2, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b3c:	f44f 7e80 	mov.w	lr, #256	; 0x100
  200b40:	f44f 7000 	mov.w	r0, #512	; 0x200
  200b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
  200b48:	f04f 0980 	mov.w	r9, #128	; 0x80
  200b4c:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b50:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  200b54:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b58:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  200b5c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b60:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b62:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b66:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  200b6a:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b6e:	f8c3 9000 	str.w	r9, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b72:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b76:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b7a:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b7e:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b82:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b86:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b8a:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b8c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b90:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b94:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b96:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b9a:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b9e:	f8c3 8000 	str.w	r8, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200ba2:	f04f 0804 	mov.w	r8, #4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200ba6:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200baa:	f8c3 e184 	str.w	lr, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bae:	f8c3 e004 	str.w	lr, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bb2:	f04f 0e08 	mov.w	lr, #8
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bb6:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bba:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bbe:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bc0:	f883 c329 	strb.w	ip, [r3, #809]	; 0x329
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bc4:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bc8:	6058      	str	r0, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bca:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bce:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bd2:	6059      	str	r1, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bd4:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bd8:	f8c3 a184 	str.w	sl, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bdc:	f8c3 a004 	str.w	sl, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200be0:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200be4:	f8c3 9188 	str.w	r9, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200be8:	f8c3 9008 	str.w	r9, [r3, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bec:	f883 c302 	strb.w	ip, [r3, #770]	; 0x302
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bf0:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bf4:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bf8:	f883 c303 	strb.w	ip, [r3, #771]	; 0x303
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bfc:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200c00:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200c04:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200c08:	f8c3 5188 	str.w	r5, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200c0c:	609d      	str	r5, [r3, #8]
  200c0e:	e6ee      	b.n	2009ee <main+0x50e>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  200c10:	6c03      	ldr	r3, [r0, #64]	; 0x40
  200c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  200c16:	6403      	str	r3, [r0, #64]	; 0x40
  200c18:	e6be      	b.n	200998 <main+0x4b8>
  200c1a:	bf00      	nop
  200c1c:	e000e100 	.word	0xe000e100

00200c20 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  200c20:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c22:	4b33      	ldr	r3, [pc, #204]	; (200cf0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  200c24:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  200c28:	4a32      	ldr	r2, [pc, #200]	; (200cf4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c2a:	4c33      	ldr	r4, [pc, #204]	; (200cf8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200c2c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c2e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  200c30:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  200c32:	681a      	ldr	r2, [r3, #0]
  200c34:	f042 0201 	orr.w	r2, r2, #1
  200c38:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200c3a:	680b      	ldr	r3, [r1, #0]
  200c3c:	079b      	lsls	r3, r3, #30
  200c3e:	d5fc      	bpl.n	200c3a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200c40:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200c42:	4a2b      	ldr	r2, [pc, #172]	; (200cf0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200c44:	f023 0303 	bic.w	r3, r3, #3
  200c48:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  200c4a:	688b      	ldr	r3, [r1, #8]
  200c4c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200c4e:	6893      	ldr	r3, [r2, #8]
  200c50:	f013 030c 	ands.w	r3, r3, #12
  200c54:	d1fb      	bne.n	200c4e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200c56:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200c58:	4925      	ldr	r1, [pc, #148]	; (200cf0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200c5a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  200c5e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  200c60:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  200c62:	6813      	ldr	r3, [r2, #0]
  200c64:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  200c68:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200c6a:	680b      	ldr	r3, [r1, #0]
  200c6c:	039d      	lsls	r5, r3, #14
  200c6e:	d5fc      	bpl.n	200c6a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200c70:	4b22      	ldr	r3, [pc, #136]	; (200cfc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200c72:	4820      	ldr	r0, [pc, #128]	; (200cf4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200c74:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  200c76:	680b      	ldr	r3, [r1, #0]
  200c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  200c7c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200c7e:	6843      	ldr	r3, [r0, #4]
  200c80:	045c      	lsls	r4, r3, #17
  200c82:	d5fc      	bpl.n	200c7e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  200c84:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200c86:	4a1b      	ldr	r2, [pc, #108]	; (200cf4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  200c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200c8c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200c8e:	6853      	ldr	r3, [r2, #4]
  200c90:	03d9      	lsls	r1, r3, #15
  200c92:	d5fc      	bpl.n	200c8e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200c94:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200c96:	4917      	ldr	r1, [pc, #92]	; (200cf4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200c9c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200c9e:	684b      	ldr	r3, [r1, #4]
  200ca0:	039a      	lsls	r2, r3, #14
  200ca2:	d5fc      	bpl.n	200c9e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  200ca4:	4a12      	ldr	r2, [pc, #72]	; (200cf0 <__early_init+0xd0>)
  200ca6:	6813      	ldr	r3, [r2, #0]
  200ca8:	019b      	lsls	r3, r3, #6
  200caa:	d5fc      	bpl.n	200ca6 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200cac:	4b14      	ldr	r3, [pc, #80]	; (200d00 <__early_init+0xe0>)
  200cae:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200cb2:	4d14      	ldr	r5, [pc, #80]	; (200d04 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  200cb4:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200cb8:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200cba:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  200cbc:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200cc0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200cc4:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200cc6:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200cc8:	4909      	ldr	r1, [pc, #36]	; (200cf0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200cca:	f043 0302 	orr.w	r3, r3, #2
  200cce:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200cd0:	688b      	ldr	r3, [r1, #8]
  200cd2:	f003 030c 	and.w	r3, r3, #12
  200cd6:	2b08      	cmp	r3, #8
  200cd8:	d1fa      	bne.n	200cd0 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  200cda:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  200cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  200ce0:	644b      	str	r3, [r1, #68]	; 0x44
  200ce2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  200ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  200ce8:	bc30      	pop	{r4, r5}
  200cea:	664b      	str	r3, [r1, #100]	; 0x64
  200cec:	4770      	bx	lr
  200cee:	bf00      	nop
  200cf0:	40023800 	.word	0x40023800
  200cf4:	40007000 	.word	0x40007000
  200cf8:	10000400 	.word	0x10000400
  200cfc:	09406c08 	.word	0x09406c08
  200d00:	40023c00 	.word	0x40023c00
  200d04:	30999400 	.word	0x30999400
	...

00200d10 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  200d10:	b480      	push	{r7}
  200d12:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200d14:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  200d18:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  200d1a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200d1e:	2300      	movs	r3, #0
  200d20:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  200d24:	46bd      	mov	sp, r7
  200d26:	bc80      	pop	{r7}
  200d28:	4770      	bx	lr
  200d2a:	bf00      	nop
  200d2c:	0000      	movs	r0, r0
	...

00200d30 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200d30:	b470      	push	{r4, r5, r6}
  200d32:	2320      	movs	r3, #32
  200d34:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200d38:	4e0d      	ldr	r6, [pc, #52]	; (200d70 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  200d3a:	1e4a      	subs	r2, r1, #1
  200d3c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  200d3e:	4c0d      	ldr	r4, [pc, #52]	; (200d74 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200d40:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200d42:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200d44:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200d46:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200d48:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200d4a:	1858      	adds	r0, r3, r1
  200d4c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  200d4e:	1a23      	subs	r3, r4, r0
  200d50:	429a      	cmp	r2, r3
  200d52:	d806      	bhi.n	200d62 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200d54:	4402      	add	r2, r0
  200d56:	2300      	movs	r3, #0
  200d58:	6032      	str	r2, [r6, #0]
  200d5a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  200d5e:	bc70      	pop	{r4, r5, r6}
  200d60:	4770      	bx	lr
    return NULL;
  200d62:	2000      	movs	r0, #0
  200d64:	2300      	movs	r3, #0
  200d66:	f383 8811 	msr	BASEPRI, r3
}
  200d6a:	bc70      	pop	{r4, r5, r6}
  200d6c:	4770      	bx	lr
  200d6e:	bf00      	nop
  200d70:	2000098c 	.word	0x2000098c
  200d74:	20000988 	.word	0x20000988
	...

00200d80 <wakeup>:
  200d80:	2320      	movs	r3, #32
  200d82:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  200d86:	f890 3020 	ldrb.w	r3, [r0, #32]
  200d8a:	2b07      	cmp	r3, #7
  200d8c:	d80e      	bhi.n	200dac <wakeup+0x2c>
  200d8e:	e8df f003 	tbb	[pc, r3]
  200d92:	0d28      	.short	0x0d28
  200d94:	0408240d 	.word	0x0408240d
  200d98:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  200d9a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  200d9c:	6893      	ldr	r3, [r2, #8]
  200d9e:	3301      	adds	r3, #1
  200da0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200da2:	e890 000c 	ldmia.w	r0, {r2, r3}
  200da6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200da8:	6802      	ldr	r2, [r0, #0]
  200daa:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  200dac:	2200      	movs	r2, #0
  200dae:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200db0:	4b0e      	ldr	r3, [pc, #56]	; (200dec <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200db2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200db6:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200db8:	f04f 34ff 	mov.w	r4, #4294967295
  200dbc:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  200dbe:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200dc0:	689a      	ldr	r2, [r3, #8]
  200dc2:	428a      	cmp	r2, r1
  200dc4:	d2fb      	bcs.n	200dbe <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200dc6:	685a      	ldr	r2, [r3, #4]
  200dc8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  200dca:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  200dcc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  200dce:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200dd0:	6058      	str	r0, [r3, #4]
  200dd2:	f381 8811 	msr	BASEPRI, r1
}
  200dd6:	bc10      	pop	{r4}
  200dd8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  200dda:	6a43      	ldr	r3, [r0, #36]	; 0x24
  200ddc:	2200      	movs	r2, #0
  200dde:	601a      	str	r2, [r3, #0]
  200de0:	e7e4      	b.n	200dac <wakeup+0x2c>
  200de2:	2300      	movs	r3, #0
  200de4:	f383 8811 	msr	BASEPRI, r3
  200de8:	4770      	bx	lr
  200dea:	bf00      	nop
  200dec:	20000818 	.word	0x20000818

00200df0 <_idle_thread.lto_priv.40>:
static void _idle_thread(void *p) {
  200df0:	e7fe      	b.n	200df0 <_idle_thread.lto_priv.40>
  200df2:	bf00      	nop
	...

00200e00 <chSchGoSleepS>:
  thread_t *otp = currp;
  200e00:	4b08      	ldr	r3, [pc, #32]	; (200e24 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200e02:	681a      	ldr	r2, [r3, #0]
  200e04:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200e06:	b430      	push	{r4, r5}
  otp->state = newstate;
  200e08:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  200e0c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  200e0e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200e10:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200e12:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200e14:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200e16:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200e1a:	619a      	str	r2, [r3, #24]
}
  200e1c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200e1e:	f7ff ba59 	b.w	2002d4 <_port_switch>
  200e22:	bf00      	nop
  200e24:	20000818 	.word	0x20000818
	...

00200e30 <_port_irq_epilogue>:
  200e30:	2320      	movs	r3, #32
  200e32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200e36:	4b11      	ldr	r3, [pc, #68]	; (200e7c <_port_irq_epilogue+0x4c>)
  200e38:	685b      	ldr	r3, [r3, #4]
  200e3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  200e3e:	d102      	bne.n	200e46 <_port_irq_epilogue+0x16>
  200e40:	f383 8811 	msr	BASEPRI, r3
  200e44:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200e46:	b480      	push	{r7}
  200e48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200e4a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  200e4e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200e52:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200e56:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  200e5a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  200e5e:	4a08      	ldr	r2, [pc, #32]	; (200e80 <_port_irq_epilogue+0x50>)
  200e60:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200e62:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200e64:	6889      	ldr	r1, [r1, #8]
  200e66:	6892      	ldr	r2, [r2, #8]
  200e68:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  200e6a:	bf8c      	ite	hi
  200e6c:	4a05      	ldrhi	r2, [pc, #20]	; (200e84 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  200e6e:	4a06      	ldrls	r2, [pc, #24]	; (200e88 <_port_irq_epilogue+0x58>)
  200e70:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  200e74:	46bd      	mov	sp, r7
  200e76:	bc80      	pop	{r7}
  200e78:	4770      	bx	lr
  200e7a:	bf00      	nop
  200e7c:	e000ed00 	.word	0xe000ed00
  200e80:	20000818 	.word	0x20000818
  200e84:	002002f5 	.word	0x002002f5
  200e88:	002002f8 	.word	0x002002f8
  200e8c:	00000000 	.word	0x00000000

00200e90 <SysTick_Handler>:
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200e92:	2720      	movs	r7, #32
  200e94:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200e98:	4d12      	ldr	r5, [pc, #72]	; (200ee4 <SysTick_Handler+0x54>)
  200e9a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200e9c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  200e9e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200ea0:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200ea4:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200ea6:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200ea8:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200eaa:	d013      	beq.n	200ed4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  200eac:	891c      	ldrh	r4, [r3, #8]
  200eae:	3c01      	subs	r4, #1
  200eb0:	b2a4      	uxth	r4, r4
  200eb2:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200eb4:	b974      	cbnz	r4, 200ed4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200eb6:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200eb8:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  200eba:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200ebc:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  200ebe:	61ea      	str	r2, [r5, #28]
  200ec0:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200ec4:	6918      	ldr	r0, [r3, #16]
  200ec6:	4788      	blx	r1
  200ec8:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  200ecc:	69eb      	ldr	r3, [r5, #28]
  200ece:	891a      	ldrh	r2, [r3, #8]
  200ed0:	2a00      	cmp	r2, #0
  200ed2:	d0f0      	beq.n	200eb6 <SysTick_Handler+0x26>
  200ed4:	2300      	movs	r3, #0
  200ed6:	f383 8811 	msr	BASEPRI, r3
}
  200eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  200ede:	f7ff bfa7 	b.w	200e30 <_port_irq_epilogue>
  200ee2:	bf00      	nop
  200ee4:	20000818 	.word	0x20000818
	...

00200ef0 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  200ef0:	4a09      	ldr	r2, [pc, #36]	; (200f18 <Vector4C+0x28>)
OSAL_IRQ_HANDLER(Vector4C) {
  200ef2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200ef4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
  200ef6:	6811      	ldr	r1, [r2, #0]
  200ef8:	400b      	ands	r3, r1
  200efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
  200efe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
  200f00:	b12b      	cbz	r3, 200f0e <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  200f02:	4806      	ldr	r0, [pc, #24]	; (200f1c <Vector4C+0x2c>)
  200f04:	2116      	movs	r1, #22
  200f06:	6843      	ldr	r3, [r0, #4]
  200f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  200f0c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
  200f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200f12:	f7ff bf8d 	b.w	200e30 <_port_irq_epilogue>
  200f16:	bf00      	nop
  200f18:	40013c00 	.word	0x40013c00
  200f1c:	20000800 	.word	0x20000800

00200f20 <Vector48>:
  pr = EXTI->PR;
  200f20:	4a09      	ldr	r2, [pc, #36]	; (200f48 <Vector48+0x28>)
OSAL_IRQ_HANDLER(Vector48) {
  200f22:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200f24:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
  200f26:	6811      	ldr	r1, [r2, #0]
  200f28:	400b      	ands	r3, r1
  200f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
  200f2e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
  200f30:	b12b      	cbz	r3, 200f3e <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  200f32:	4806      	ldr	r0, [pc, #24]	; (200f4c <Vector48+0x2c>)
  200f34:	2115      	movs	r1, #21
  200f36:	6843      	ldr	r3, [r0, #4]
  200f38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
  200f3c:	4798      	blx	r3
}
  200f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200f42:	f7ff bf75 	b.w	200e30 <_port_irq_epilogue>
  200f46:	bf00      	nop
  200f48:	40013c00 	.word	0x40013c00
  200f4c:	20000800 	.word	0x20000800

00200f50 <Vector170>:
  pr = EXTI->PR;
  200f50:	4a09      	ldr	r2, [pc, #36]	; (200f78 <Vector170+0x28>)
OSAL_IRQ_HANDLER(Vector170) {
  200f52:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200f54:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
  200f56:	6811      	ldr	r1, [r2, #0]
  200f58:	400b      	ands	r3, r1
  200f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
  200f5e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
  200f60:	b12b      	cbz	r3, 200f6e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
  200f62:	4806      	ldr	r0, [pc, #24]	; (200f7c <Vector170+0x2c>)
  200f64:	2114      	movs	r1, #20
  200f66:	6843      	ldr	r3, [r0, #4]
  200f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  200f6c:	4798      	blx	r3
}
  200f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200f72:	f7ff bf5d 	b.w	200e30 <_port_irq_epilogue>
  200f76:	bf00      	nop
  200f78:	40013c00 	.word	0x40013c00
  200f7c:	20000800 	.word	0x20000800

00200f80 <Vector138>:
  pr = EXTI->PR;
  200f80:	4a09      	ldr	r2, [pc, #36]	; (200fa8 <Vector138+0x28>)
OSAL_IRQ_HANDLER(Vector138) {
  200f82:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200f84:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 19);
  200f86:	6811      	ldr	r1, [r2, #0]
  200f88:	400b      	ands	r3, r1
  200f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  EXTI->PR = pr;
  200f8e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 19))
  200f90:	b12b      	cbz	r3, 200f9e <Vector138+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
  200f92:	4806      	ldr	r0, [pc, #24]	; (200fac <Vector138+0x2c>)
  200f94:	2113      	movs	r1, #19
  200f96:	6843      	ldr	r3, [r0, #4]
  200f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  200f9c:	4798      	blx	r3
}
  200f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200fa2:	f7ff bf45 	b.w	200e30 <_port_irq_epilogue>
  200fa6:	bf00      	nop
  200fa8:	40013c00 	.word	0x40013c00
  200fac:	20000800 	.word	0x20000800

00200fb0 <VectorE8>:
  pr = EXTI->PR;
  200fb0:	4a09      	ldr	r2, [pc, #36]	; (200fd8 <VectorE8+0x28>)
OSAL_IRQ_HANDLER(VectorE8) {
  200fb2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200fb4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
  200fb6:	6811      	ldr	r1, [r2, #0]
  200fb8:	400b      	ands	r3, r1
  200fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
  200fbe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
  200fc0:	b12b      	cbz	r3, 200fce <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
  200fc2:	4806      	ldr	r0, [pc, #24]	; (200fdc <VectorE8+0x2c>)
  200fc4:	2112      	movs	r1, #18
  200fc6:	6843      	ldr	r3, [r0, #4]
  200fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  200fcc:	4798      	blx	r3
}
  200fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200fd2:	f7ff bf2d 	b.w	200e30 <_port_irq_epilogue>
  200fd6:	bf00      	nop
  200fd8:	40013c00 	.word	0x40013c00
  200fdc:	20000800 	.word	0x20000800

00200fe0 <VectorE4>:
  pr = EXTI->PR;
  200fe0:	4a09      	ldr	r2, [pc, #36]	; (201008 <VectorE4+0x28>)
OSAL_IRQ_HANDLER(VectorE4) {
  200fe2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200fe4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 17);
  200fe6:	6811      	ldr	r1, [r2, #0]
  200fe8:	400b      	ands	r3, r1
  200fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
  200fee:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
  200ff0:	b12b      	cbz	r3, 200ffe <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
  200ff2:	4806      	ldr	r0, [pc, #24]	; (20100c <VectorE4+0x2c>)
  200ff4:	2111      	movs	r1, #17
  200ff6:	6843      	ldr	r3, [r0, #4]
  200ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  200ffc:	4798      	blx	r3
}
  200ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201002:	f7ff bf15 	b.w	200e30 <_port_irq_epilogue>
  201006:	bf00      	nop
  201008:	40013c00 	.word	0x40013c00
  20100c:	20000800 	.word	0x20000800

00201010 <Vector44>:
  pr = EXTI->PR;
  201010:	4a09      	ldr	r2, [pc, #36]	; (201038 <Vector44+0x28>)
OSAL_IRQ_HANDLER(Vector44) {
  201012:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201014:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 16);
  201016:	6811      	ldr	r1, [r2, #0]
  201018:	400b      	ands	r3, r1
  20101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
  20101e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
  201020:	b12b      	cbz	r3, 20102e <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
  201022:	4806      	ldr	r0, [pc, #24]	; (20103c <Vector44+0x2c>)
  201024:	2110      	movs	r1, #16
  201026:	6843      	ldr	r3, [r0, #4]
  201028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  20102c:	4798      	blx	r3
}
  20102e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201032:	f7ff befd 	b.w	200e30 <_port_irq_epilogue>
  201036:	bf00      	nop
  201038:	40013c00 	.word	0x40013c00
  20103c:	20000800 	.word	0x20000800

00201040 <VectorE0>:
  pr = EXTI->PR;
  201040:	4b1d      	ldr	r3, [pc, #116]	; (2010b8 <VectorE0+0x78>)
OSAL_IRQ_HANDLER(VectorE0) {
  201042:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  201044:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  201046:	681a      	ldr	r2, [r3, #0]
  201048:	4014      	ands	r4, r2
  20104a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
  EXTI->PR = pr;
  20104e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
  201050:	0562      	lsls	r2, r4, #21
  201052:	d42a      	bmi.n	2010aa <VectorE0+0x6a>
  if (pr & (1U << 11))
  201054:	0523      	lsls	r3, r4, #20
  201056:	d422      	bmi.n	20109e <VectorE0+0x5e>
  if (pr & (1U << 12))
  201058:	04e0      	lsls	r0, r4, #19
  20105a:	d41a      	bmi.n	201092 <VectorE0+0x52>
  if (pr & (1U << 13))
  20105c:	04a1      	lsls	r1, r4, #18
  20105e:	d412      	bmi.n	201086 <VectorE0+0x46>
  if (pr & (1U << 14))
  201060:	0462      	lsls	r2, r4, #17
  201062:	d40a      	bmi.n	20107a <VectorE0+0x3a>
  if (pr & (1U << 15))
  201064:	0423      	lsls	r3, r4, #16
  201066:	d504      	bpl.n	201072 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
  201068:	4814      	ldr	r0, [pc, #80]	; (2010bc <VectorE0+0x7c>)
  20106a:	210f      	movs	r1, #15
  20106c:	6843      	ldr	r3, [r0, #4]
  20106e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  201070:	4798      	blx	r3
}
  201072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201076:	f7ff bedb 	b.w	200e30 <_port_irq_epilogue>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  20107a:	4810      	ldr	r0, [pc, #64]	; (2010bc <VectorE0+0x7c>)
  20107c:	210e      	movs	r1, #14
  20107e:	6843      	ldr	r3, [r0, #4]
  201080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  201082:	4798      	blx	r3
  201084:	e7ee      	b.n	201064 <VectorE0+0x24>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  201086:	480d      	ldr	r0, [pc, #52]	; (2010bc <VectorE0+0x7c>)
  201088:	210d      	movs	r1, #13
  20108a:	6843      	ldr	r3, [r0, #4]
  20108c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  20108e:	4798      	blx	r3
  201090:	e7e6      	b.n	201060 <VectorE0+0x20>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  201092:	480a      	ldr	r0, [pc, #40]	; (2010bc <VectorE0+0x7c>)
  201094:	210c      	movs	r1, #12
  201096:	6843      	ldr	r3, [r0, #4]
  201098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  20109a:	4798      	blx	r3
  20109c:	e7de      	b.n	20105c <VectorE0+0x1c>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  20109e:	4807      	ldr	r0, [pc, #28]	; (2010bc <VectorE0+0x7c>)
  2010a0:	210b      	movs	r1, #11
  2010a2:	6843      	ldr	r3, [r0, #4]
  2010a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  2010a6:	4798      	blx	r3
  2010a8:	e7d6      	b.n	201058 <VectorE0+0x18>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  2010aa:	4804      	ldr	r0, [pc, #16]	; (2010bc <VectorE0+0x7c>)
  2010ac:	210a      	movs	r1, #10
  2010ae:	6843      	ldr	r3, [r0, #4]
  2010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  2010b2:	4798      	blx	r3
  2010b4:	e7ce      	b.n	201054 <VectorE0+0x14>
  2010b6:	bf00      	nop
  2010b8:	40013c00 	.word	0x40013c00
  2010bc:	20000800 	.word	0x20000800

002010c0 <Vector9C>:
  pr = EXTI->PR;
  2010c0:	4b19      	ldr	r3, [pc, #100]	; (201128 <Vector9C+0x68>)
OSAL_IRQ_HANDLER(Vector9C) {
  2010c2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  2010c4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  2010c6:	681a      	ldr	r2, [r3, #0]
  2010c8:	4014      	ands	r4, r2
  2010ca:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  2010ce:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
  2010d0:	06a3      	lsls	r3, r4, #26
  2010d2:	d422      	bmi.n	20111a <Vector9C+0x5a>
  if (pr & (1U << 6))
  2010d4:	0660      	lsls	r0, r4, #25
  2010d6:	d41a      	bmi.n	20110e <Vector9C+0x4e>
  if (pr & (1U << 7))
  2010d8:	0621      	lsls	r1, r4, #24
  2010da:	d412      	bmi.n	201102 <Vector9C+0x42>
  if (pr & (1U << 8))
  2010dc:	05e2      	lsls	r2, r4, #23
  2010de:	d40a      	bmi.n	2010f6 <Vector9C+0x36>
  if (pr & (1U << 9))
  2010e0:	05a3      	lsls	r3, r4, #22
  2010e2:	d504      	bpl.n	2010ee <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
  2010e4:	4811      	ldr	r0, [pc, #68]	; (20112c <Vector9C+0x6c>)
  2010e6:	2109      	movs	r1, #9
  2010e8:	6843      	ldr	r3, [r0, #4]
  2010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  2010ec:	4798      	blx	r3
}
  2010ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2010f2:	f7ff be9d 	b.w	200e30 <_port_irq_epilogue>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  2010f6:	480d      	ldr	r0, [pc, #52]	; (20112c <Vector9C+0x6c>)
  2010f8:	2108      	movs	r1, #8
  2010fa:	6843      	ldr	r3, [r0, #4]
  2010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  2010fe:	4798      	blx	r3
  201100:	e7ee      	b.n	2010e0 <Vector9C+0x20>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  201102:	480a      	ldr	r0, [pc, #40]	; (20112c <Vector9C+0x6c>)
  201104:	2107      	movs	r1, #7
  201106:	6843      	ldr	r3, [r0, #4]
  201108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  20110a:	4798      	blx	r3
  20110c:	e7e6      	b.n	2010dc <Vector9C+0x1c>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  20110e:	4807      	ldr	r0, [pc, #28]	; (20112c <Vector9C+0x6c>)
  201110:	2106      	movs	r1, #6
  201112:	6843      	ldr	r3, [r0, #4]
  201114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  201116:	4798      	blx	r3
  201118:	e7de      	b.n	2010d8 <Vector9C+0x18>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  20111a:	4804      	ldr	r0, [pc, #16]	; (20112c <Vector9C+0x6c>)
  20111c:	2105      	movs	r1, #5
  20111e:	6843      	ldr	r3, [r0, #4]
  201120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  201122:	4798      	blx	r3
  201124:	e7d6      	b.n	2010d4 <Vector9C+0x14>
  201126:	bf00      	nop
  201128:	40013c00 	.word	0x40013c00
  20112c:	20000800 	.word	0x20000800

00201130 <Vector68>:
  pr = EXTI->PR;
  201130:	4a08      	ldr	r2, [pc, #32]	; (201154 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
  201132:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201134:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  201136:	6811      	ldr	r1, [r2, #0]
  201138:	400b      	ands	r3, r1
  20113a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  20113e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
  201140:	b123      	cbz	r3, 20114c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
  201142:	4805      	ldr	r0, [pc, #20]	; (201158 <Vector68+0x28>)
  201144:	2104      	movs	r1, #4
  201146:	6843      	ldr	r3, [r0, #4]
  201148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20114a:	4798      	blx	r3
}
  20114c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201150:	f7ff be6e 	b.w	200e30 <_port_irq_epilogue>
  201154:	40013c00 	.word	0x40013c00
  201158:	20000800 	.word	0x20000800
  20115c:	00000000 	.word	0x00000000

00201160 <Vector64>:
  pr = EXTI->PR;
  201160:	4a08      	ldr	r2, [pc, #32]	; (201184 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
  201162:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201164:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  201166:	6811      	ldr	r1, [r2, #0]
  201168:	400b      	ands	r3, r1
  20116a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  20116e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
  201170:	b123      	cbz	r3, 20117c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
  201172:	4805      	ldr	r0, [pc, #20]	; (201188 <Vector64+0x28>)
  201174:	2103      	movs	r1, #3
  201176:	6843      	ldr	r3, [r0, #4]
  201178:	69db      	ldr	r3, [r3, #28]
  20117a:	4798      	blx	r3
}
  20117c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201180:	f7ff be56 	b.w	200e30 <_port_irq_epilogue>
  201184:	40013c00 	.word	0x40013c00
  201188:	20000800 	.word	0x20000800
  20118c:	00000000 	.word	0x00000000

00201190 <Vector60>:
  pr = EXTI->PR;
  201190:	4a08      	ldr	r2, [pc, #32]	; (2011b4 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
  201192:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201194:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  201196:	6811      	ldr	r1, [r2, #0]
  201198:	400b      	ands	r3, r1
  20119a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  20119e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
  2011a0:	b123      	cbz	r3, 2011ac <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
  2011a2:	4805      	ldr	r0, [pc, #20]	; (2011b8 <Vector60+0x28>)
  2011a4:	2102      	movs	r1, #2
  2011a6:	6843      	ldr	r3, [r0, #4]
  2011a8:	695b      	ldr	r3, [r3, #20]
  2011aa:	4798      	blx	r3
}
  2011ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011b0:	f7ff be3e 	b.w	200e30 <_port_irq_epilogue>
  2011b4:	40013c00 	.word	0x40013c00
  2011b8:	20000800 	.word	0x20000800
  2011bc:	00000000 	.word	0x00000000

002011c0 <Vector5C>:
  pr = EXTI->PR;
  2011c0:	4a08      	ldr	r2, [pc, #32]	; (2011e4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
  2011c2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2011c4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  2011c6:	6811      	ldr	r1, [r2, #0]
  2011c8:	400b      	ands	r3, r1
  2011ca:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  2011ce:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
  2011d0:	b123      	cbz	r3, 2011dc <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
  2011d2:	4805      	ldr	r0, [pc, #20]	; (2011e8 <Vector5C+0x28>)
  2011d4:	2101      	movs	r1, #1
  2011d6:	6843      	ldr	r3, [r0, #4]
  2011d8:	68db      	ldr	r3, [r3, #12]
  2011da:	4798      	blx	r3
}
  2011dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011e0:	f7ff be26 	b.w	200e30 <_port_irq_epilogue>
  2011e4:	40013c00 	.word	0x40013c00
  2011e8:	20000800 	.word	0x20000800
  2011ec:	00000000 	.word	0x00000000

002011f0 <Vector58>:
  pr = EXTI->PR;
  2011f0:	4a08      	ldr	r2, [pc, #32]	; (201214 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
  2011f2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2011f4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  2011f6:	6811      	ldr	r1, [r2, #0]
  2011f8:	400b      	ands	r3, r1
  2011fa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  2011fe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
  201200:	b123      	cbz	r3, 20120c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
  201202:	4805      	ldr	r0, [pc, #20]	; (201218 <Vector58+0x28>)
  201204:	2100      	movs	r1, #0
  201206:	6843      	ldr	r3, [r0, #4]
  201208:	685b      	ldr	r3, [r3, #4]
  20120a:	4798      	blx	r3
}
  20120c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201210:	f7ff be0e 	b.w	200e30 <_port_irq_epilogue>
  201214:	40013c00 	.word	0x40013c00
  201218:	20000800 	.word	0x20000800
  20121c:	00000000 	.word	0x00000000

00201220 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201220:	4b0e      	ldr	r3, [pc, #56]	; (20125c <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  201222:	6882      	ldr	r2, [r0, #8]
  201224:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201226:	490e      	ldr	r1, [pc, #56]	; (201260 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201228:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20122a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20122c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20122e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  201230:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201232:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201234:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201236:	6083      	str	r3, [r0, #8]
  tmp->n++;
  201238:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20123a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  20123e:	18e4      	adds	r4, r4, r3
  201240:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201244:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201246:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201248:	bf88      	it	hi
  20124a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  20124c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  20124e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201252:	bf38      	it	cc
  201254:	6003      	strcc	r3, [r0, #0]
}
  201256:	bc30      	pop	{r4, r5}
  201258:	4770      	bx	lr
  20125a:	bf00      	nop
  20125c:	e0001000 	.word	0xe0001000
  201260:	20000818 	.word	0x20000818
	...

00201270 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  201270:	4a0e      	ldr	r2, [pc, #56]	; (2012ac <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201272:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201274:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  201276:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201278:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  20127a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  20127c:	6994      	ldr	r4, [r2, #24]
  20127e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201280:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201282:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201286:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20128a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20128c:	6190      	str	r0, [r2, #24]
  20128e:	e000      	b.n	201292 <chSchDoReschedule+0x22>
  201290:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201292:	689a      	ldr	r2, [r3, #8]
  201294:	4291      	cmp	r1, r2
  201296:	d3fb      	bcc.n	201290 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201298:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20129a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20129c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20129e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2012a0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2012a2:	605c      	str	r4, [r3, #4]
}
  2012a4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2012a6:	f7ff b815 	b.w	2002d4 <_port_switch>
  2012aa:	bf00      	nop
  2012ac:	20000818 	.word	0x20000818

002012b0 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  2012b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2012b4:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  2012b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  2012b8:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  2012ba:	d031      	beq.n	201320 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  2012bc:	4c1c      	ldr	r4, [pc, #112]	; (201330 <chSchGoSleepTimeoutS+0x80>)
  2012be:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  2012c0:	481c      	ldr	r0, [pc, #112]	; (201334 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  2012c2:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  2012c4:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  2012c6:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  2012c8:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  2012ca:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  2012cc:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  2012ce:	d905      	bls.n	2012dc <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  2012d0:	1a89      	subs	r1, r1, r2
    p = p->next;
  2012d2:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  2012d4:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  2012d6:	891a      	ldrh	r2, [r3, #8]
  2012d8:	428a      	cmp	r2, r1
  2012da:	d3f9      	bcc.n	2012d0 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  2012dc:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  2012de:	aa01      	add	r2, sp, #4
  vtp->next = p;
  2012e0:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  2012e2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  2012e6:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  2012e8:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  2012ea:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  2012ec:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  2012ee:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  2012f2:	891a      	ldrh	r2, [r3, #8]
  2012f4:	1a51      	subs	r1, r2, r1
  2012f6:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  2012f8:	84a6      	strh	r6, [r4, #36]	; 0x24
  2012fa:	f7ff fd81 	bl	200e00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  2012fe:	9b04      	ldr	r3, [sp, #16]
  201300:	b153      	cbz	r3, 201318 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201302:	9b01      	ldr	r3, [sp, #4]
  201304:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201308:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20130a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20130c:	4402      	add	r2, r0
  20130e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201310:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201312:	9b01      	ldr	r3, [sp, #4]
  201314:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201316:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201318:	69a3      	ldr	r3, [r4, #24]
}
  20131a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20131c:	b007      	add	sp, #28
  20131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201320:	4c03      	ldr	r4, [pc, #12]	; (201330 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201322:	f7ff fd6d 	bl	200e00 <chSchGoSleepS>
  return currp->u.rdymsg;
  201326:	69a3      	ldr	r3, [r4, #24]
}
  201328:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20132a:	b007      	add	sp, #28
  20132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20132e:	bf00      	nop
  201330:	20000818 	.word	0x20000818
  201334:	00200d81 	.word	0x00200d81
	...

00201340 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201340:	b161      	cbz	r1, 20135c <chThdEnqueueTimeoutS+0x1c>
  201342:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201344:	4b07      	ldr	r3, [pc, #28]	; (201364 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201346:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201348:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20134a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20134c:	6854      	ldr	r4, [r2, #4]
  20134e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201352:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201354:	6053      	str	r3, [r2, #4]
}
  201356:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201358:	f7ff bfaa 	b.w	2012b0 <chSchGoSleepTimeoutS>
}
  20135c:	f04f 30ff 	mov.w	r0, #4294967295
  201360:	4770      	bx	lr
  201362:	bf00      	nop
  201364:	20000818 	.word	0x20000818
	...

00201370 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201374:	4699      	mov	r9, r3
  201376:	b083      	sub	sp, #12
  201378:	4604      	mov	r4, r0
  20137a:	460e      	mov	r6, r1
  20137c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20137e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201382:	2320      	movs	r3, #32
  201384:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201388:	4b26      	ldr	r3, [pc, #152]	; (201424 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20138a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20138e:	2700      	movs	r7, #0
  201390:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201392:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201396:	fa19 f383 	uxtah	r3, r9, r3
  20139a:	b29b      	uxth	r3, r3
  20139c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20139e:	68a3      	ldr	r3, [r4, #8]
  2013a0:	b313      	cbz	r3, 2013e8 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  2013a2:	6961      	ldr	r1, [r4, #20]
  2013a4:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  2013a8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2013aa:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  2013ac:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  2013ae:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  2013b0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2013b2:	7833      	ldrb	r3, [r6, #0]
  2013b4:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  2013b6:	6961      	ldr	r1, [r4, #20]
  2013b8:	6923      	ldr	r3, [r4, #16]
  2013ba:	4299      	cmp	r1, r3
  2013bc:	d301      	bcc.n	2013c2 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  2013be:	68e3      	ldr	r3, [r4, #12]
  2013c0:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  2013c2:	f1b8 0f00 	cmp.w	r8, #0
  2013c6:	d001      	beq.n	2013cc <oqWriteTimeout+0x5c>
      nfy(oqp);
  2013c8:	4620      	mov	r0, r4
  2013ca:	47c0      	blx	r8
  2013cc:	2300      	movs	r3, #0
  2013ce:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  2013d2:	3d01      	subs	r5, #1
    w++;
  2013d4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2013d8:	d019      	beq.n	20140e <oqWriteTimeout+0x9e>
  2013da:	2320      	movs	r3, #32
  2013dc:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  2013e0:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2013e2:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  2013e4:	2b00      	cmp	r3, #0
  2013e6:	d1dc      	bne.n	2013a2 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2013e8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2013ec:	4592      	cmp	sl, r2
  2013ee:	d812      	bhi.n	201416 <oqWriteTimeout+0xa6>
  2013f0:	4a0c      	ldr	r2, [pc, #48]	; (201424 <oqWriteTimeout+0xb4>)
  2013f2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2013f4:	9a01      	ldr	r2, [sp, #4]
  2013f6:	1a51      	subs	r1, r2, r1
  2013f8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2013fa:	4589      	cmp	r9, r1
  2013fc:	d305      	bcc.n	20140a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  2013fe:	4620      	mov	r0, r4
  201400:	f7ff ff9e 	bl	201340 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201404:	2800      	cmp	r0, #0
  201406:	d0ca      	beq.n	20139e <oqWriteTimeout+0x2e>
  201408:	2300      	movs	r3, #0
  20140a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  20140e:	4638      	mov	r0, r7
  201410:	b003      	add	sp, #12
  201412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201416:	4649      	mov	r1, r9
  201418:	4620      	mov	r0, r4
  20141a:	f7ff ff91 	bl	201340 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20141e:	2800      	cmp	r0, #0
  201420:	d0bd      	beq.n	20139e <oqWriteTimeout+0x2e>
  201422:	e7f1      	b.n	201408 <oqWriteTimeout+0x98>
  201424:	20000818 	.word	0x20000818
	...

00201430 <_writet.lto_priv.38>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201430:	3030      	adds	r0, #48	; 0x30
  201432:	f7ff bf9d 	b.w	201370 <oqWriteTimeout>
  201436:	bf00      	nop
	...

00201440 <_write.lto_priv.32>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201440:	3030      	adds	r0, #48	; 0x30
  201442:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201446:	f7ff bf93 	b.w	201370 <oqWriteTimeout>
  20144a:	bf00      	nop
  20144c:	0000      	movs	r0, r0
	...

00201450 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201452:	4604      	mov	r4, r0
  201454:	460f      	mov	r7, r1
  201456:	4616      	mov	r6, r2
  201458:	2320      	movs	r3, #32
  20145a:	f383 8811 	msr	BASEPRI, r3
  20145e:	e003      	b.n	201468 <oqPutTimeout+0x18>
  201460:	f7ff ff6e 	bl	201340 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201464:	2800      	cmp	r0, #0
  201466:	db19      	blt.n	20149c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201468:	68a5      	ldr	r5, [r4, #8]
  20146a:	4631      	mov	r1, r6
  20146c:	4620      	mov	r0, r4
  20146e:	2d00      	cmp	r5, #0
  201470:	d0f6      	beq.n	201460 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201472:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201474:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201476:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201478:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  20147a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  20147c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  20147e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201480:	6962      	ldr	r2, [r4, #20]
  201482:	6923      	ldr	r3, [r4, #16]
  201484:	429a      	cmp	r2, r3
  201486:	d301      	bcc.n	20148c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201488:	68e3      	ldr	r3, [r4, #12]
  20148a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  20148c:	69e3      	ldr	r3, [r4, #28]
  20148e:	b10b      	cbz	r3, 201494 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201490:	4620      	mov	r0, r4
  201492:	4798      	blx	r3
  201494:	2000      	movs	r0, #0
  201496:	f380 8811 	msr	BASEPRI, r0
}
  20149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20149c:	f385 8811 	msr	BASEPRI, r5
  2014a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  2014a2:	bf00      	nop
	...

002014b0 <_putt.lto_priv.36>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  2014b0:	3030      	adds	r0, #48	; 0x30
  2014b2:	f7ff bfcd 	b.w	201450 <oqPutTimeout>
  2014b6:	bf00      	nop
	...

002014c0 <_put.lto_priv.34>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  2014c0:	3030      	adds	r0, #48	; 0x30
  2014c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  2014c6:	f7ff bfc3 	b.w	201450 <oqPutTimeout>
  2014ca:	bf00      	nop
  2014cc:	0000      	movs	r0, r0
	...

002014d0 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  2014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2014d4:	4699      	mov	r9, r3
  2014d6:	b083      	sub	sp, #12
  2014d8:	4604      	mov	r4, r0
  2014da:	460e      	mov	r6, r1
  2014dc:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  2014de:	f8d0 801c 	ldr.w	r8, [r0, #28]
  2014e2:	2320      	movs	r3, #32
  2014e4:	f383 8811 	msr	BASEPRI, r3
  2014e8:	4b26      	ldr	r3, [pc, #152]	; (201584 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2014ea:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  2014ee:	2700      	movs	r7, #0
  2014f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2014f2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  2014f6:	fa19 f383 	uxtah	r3, r9, r3
  2014fa:	b29b      	uxth	r3, r3
  2014fc:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  2014fe:	68a3      	ldr	r3, [r4, #8]
  201500:	b313      	cbz	r3, 201548 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201502:	69a1      	ldr	r1, [r4, #24]
  201504:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201508:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  20150a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  20150c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  20150e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201510:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201512:	780b      	ldrb	r3, [r1, #0]
  201514:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201516:	69a1      	ldr	r1, [r4, #24]
  201518:	6923      	ldr	r3, [r4, #16]
  20151a:	4299      	cmp	r1, r3
  20151c:	d301      	bcc.n	201522 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  20151e:	68e3      	ldr	r3, [r4, #12]
  201520:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  201522:	f1b8 0f00 	cmp.w	r8, #0
  201526:	d001      	beq.n	20152c <iqReadTimeout+0x5c>
      nfy(iqp);
  201528:	4620      	mov	r0, r4
  20152a:	47c0      	blx	r8
  20152c:	2300      	movs	r3, #0
  20152e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  201532:	3d01      	subs	r5, #1
    r++;
  201534:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201538:	d019      	beq.n	20156e <iqReadTimeout+0x9e>
  20153a:	2320      	movs	r3, #32
  20153c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  201540:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201542:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  201544:	2b00      	cmp	r3, #0
  201546:	d1dc      	bne.n	201502 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201548:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20154c:	4592      	cmp	sl, r2
  20154e:	d812      	bhi.n	201576 <iqReadTimeout+0xa6>
  201550:	4a0c      	ldr	r2, [pc, #48]	; (201584 <iqReadTimeout+0xb4>)
  201552:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201554:	9a01      	ldr	r2, [sp, #4]
  201556:	1a51      	subs	r1, r2, r1
  201558:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20155a:	4589      	cmp	r9, r1
  20155c:	d305      	bcc.n	20156a <iqReadTimeout+0x9a>
  20155e:	4620      	mov	r0, r4
  201560:	f7ff feee 	bl	201340 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201564:	2800      	cmp	r0, #0
  201566:	d0ca      	beq.n	2014fe <iqReadTimeout+0x2e>
  201568:	2300      	movs	r3, #0
  20156a:	f383 8811 	msr	BASEPRI, r3
}
  20156e:	4638      	mov	r0, r7
  201570:	b003      	add	sp, #12
  201572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201576:	4649      	mov	r1, r9
  201578:	4620      	mov	r0, r4
  20157a:	f7ff fee1 	bl	201340 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20157e:	2800      	cmp	r0, #0
  201580:	d0bd      	beq.n	2014fe <iqReadTimeout+0x2e>
  201582:	e7f1      	b.n	201568 <iqReadTimeout+0x98>
  201584:	20000818 	.word	0x20000818
	...

00201590 <_readt.lto_priv.39>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201590:	300c      	adds	r0, #12
  201592:	f7ff bf9d 	b.w	2014d0 <iqReadTimeout>
  201596:	bf00      	nop
	...

002015a0 <_read.lto_priv.33>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  2015a0:	300c      	adds	r0, #12
  2015a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2015a6:	f7ff bf93 	b.w	2014d0 <iqReadTimeout>
  2015aa:	bf00      	nop
  2015ac:	0000      	movs	r0, r0
	...

002015b0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  2015b0:	b570      	push	{r4, r5, r6, lr}
  2015b2:	2320      	movs	r3, #32
  2015b4:	4604      	mov	r4, r0
  2015b6:	460e      	mov	r6, r1
  2015b8:	f383 8811 	msr	BASEPRI, r3
  2015bc:	e003      	b.n	2015c6 <iqGetTimeout+0x16>
  2015be:	f7ff febf 	bl	201340 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  2015c2:	2800      	cmp	r0, #0
  2015c4:	db19      	blt.n	2015fa <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  2015c6:	68a5      	ldr	r5, [r4, #8]
  2015c8:	4631      	mov	r1, r6
  2015ca:	4620      	mov	r0, r4
  2015cc:	2d00      	cmp	r5, #0
  2015ce:	d0f6      	beq.n	2015be <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  2015d0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  2015d2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  2015d4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  2015d6:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  2015d8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  2015da:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  2015dc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  2015de:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  2015e0:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  2015e2:	d301      	bcc.n	2015e8 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  2015e4:	68e3      	ldr	r3, [r4, #12]
  2015e6:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  2015e8:	69e3      	ldr	r3, [r4, #28]
  2015ea:	b10b      	cbz	r3, 2015f0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  2015ec:	4620      	mov	r0, r4
  2015ee:	4798      	blx	r3
  2015f0:	2300      	movs	r3, #0
  2015f2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  2015f6:	4628      	mov	r0, r5
}
  2015f8:	bd70      	pop	{r4, r5, r6, pc}
  2015fa:	f385 8811 	msr	BASEPRI, r5
  2015fe:	bd70      	pop	{r4, r5, r6, pc}

00201600 <_gett.lto_priv.37>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201600:	300c      	adds	r0, #12
  201602:	f7ff bfd5 	b.w	2015b0 <iqGetTimeout>
  201606:	bf00      	nop
	...

00201610 <_get.lto_priv.35>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201610:	300c      	adds	r0, #12
  201612:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201616:	f7ff bfcb 	b.w	2015b0 <iqGetTimeout>
  20161a:	bf00      	nop
  20161c:	0000      	movs	r0, r0
	...

00201620 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201620:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201622:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201624:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201626:	4b08      	ldr	r3, [pc, #32]	; (201648 <chSchReadyI+0x28>)
  201628:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  20162a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  20162e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201630:	689a      	ldr	r2, [r3, #8]
  201632:	428a      	cmp	r2, r1
  201634:	d2fb      	bcs.n	20162e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201636:	685a      	ldr	r2, [r3, #4]
}
  201638:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  20163a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20163c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  20163e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201640:	605c      	str	r4, [r3, #4]
}
  201642:	bc10      	pop	{r4}
  201644:	4770      	bx	lr
  201646:	bf00      	nop
  201648:	20000818 	.word	0x20000818
  20164c:	00000000 	.word	0x00000000

00201650 <chThdExit>:
void chThdExit(msg_t msg) {
  201650:	b538      	push	{r3, r4, r5, lr}
  201652:	2220      	movs	r2, #32
  201654:	4603      	mov	r3, r0
  201656:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20165a:	4a10      	ldr	r2, [pc, #64]	; (20169c <chThdExit+0x4c>)
  20165c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20165e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201662:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201664:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201666:	4285      	cmp	r5, r0
  201668:	d006      	beq.n	201678 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20166a:	6803      	ldr	r3, [r0, #0]
  20166c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20166e:	f7ff ffd7 	bl	201620 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201672:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201674:	42a8      	cmp	r0, r5
  201676:	d1f8      	bne.n	20166a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201678:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20167c:	b943      	cbnz	r3, 201690 <chThdExit+0x40>
  20167e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201682:	079b      	lsls	r3, r3, #30
  201684:	d104      	bne.n	201690 <chThdExit+0x40>
    REG_REMOVE(tp);
  201686:	6922      	ldr	r2, [r4, #16]
  201688:	6963      	ldr	r3, [r4, #20]
  20168a:	611a      	str	r2, [r3, #16]
  20168c:	6922      	ldr	r2, [r4, #16]
  20168e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201690:	200f      	movs	r0, #15
}
  201692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201696:	f7ff bbb3 	b.w	200e00 <chSchGoSleepS>
  20169a:	bf00      	nop
  20169c:	20000818 	.word	0x20000818

002016a0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  2016a0:	e7fe      	b.n	2016a0 <BusFault_Handler>
  2016a2:	bf00      	nop
	...

002016b0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2016b2:	4f12      	ldr	r7, [pc, #72]	; (2016fc <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  2016b4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  2016b6:	4d12      	ldr	r5, [pc, #72]	; (201700 <__init_ram_areas+0x50>)
  2016b8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  2016bc:	4c11      	ldr	r4, [pc, #68]	; (201704 <__init_ram_areas+0x54>)
  2016be:	4b12      	ldr	r3, [pc, #72]	; (201708 <__init_ram_areas+0x58>)
  2016c0:	4912      	ldr	r1, [pc, #72]	; (20170c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  2016c2:	429c      	cmp	r4, r3
  2016c4:	d911      	bls.n	2016ea <__init_ram_areas+0x3a>
  2016c6:	3904      	subs	r1, #4
  2016c8:	461a      	mov	r2, r3
      *p = *tp;
  2016ca:	f851 0f04 	ldr.w	r0, [r1, #4]!
  2016ce:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  2016d2:	4294      	cmp	r4, r2
  2016d4:	d8f9      	bhi.n	2016ca <__init_ram_areas+0x1a>
  2016d6:	43da      	mvns	r2, r3
  2016d8:	4414      	add	r4, r2
  2016da:	f024 0403 	bic.w	r4, r4, #3
  2016de:	3404      	adds	r4, #4
  2016e0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  2016e2:	429d      	cmp	r5, r3
  2016e4:	d903      	bls.n	2016ee <__init_ram_areas+0x3e>
      *p = 0;
  2016e6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  2016ea:	429d      	cmp	r5, r3
  2016ec:	d8fb      	bhi.n	2016e6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  2016ee:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  2016f0:	4577      	cmp	r7, lr
  2016f2:	d202      	bcs.n	2016fa <__init_ram_areas+0x4a>
  2016f4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  2016f8:	e7e3      	b.n	2016c2 <__init_ram_areas+0x12>
  2016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2016fc:	08001e20 	.word	0x08001e20
  201700:	20020000 	.word	0x20020000
  201704:	20020000 	.word	0x20020000
  201708:	20020000 	.word	0x20020000
  20170c:	08001ea8 	.word	0x08001ea8

00201710 <__default_exit>:
void __default_exit(void) {
  201710:	e7fe      	b.n	201710 <__default_exit>
  201712:	bf00      	nop
	...

00201720 <__late_init>:
void __late_init(void) {}
  201720:	4770      	bx	lr
  201722:	bf00      	nop
	...

00201730 <__core_init>:
void __core_init(void) {
  201730:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201732:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201736:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20173a:	4c1b      	ldr	r4, [pc, #108]	; (2017a8 <__core_init+0x78>)
  20173c:	2200      	movs	r2, #0
  20173e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201742:	6963      	ldr	r3, [r4, #20]
  201744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201748:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20174a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20174e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201752:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201756:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  20175a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  20175e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201762:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201766:	f3c3 334e 	ubfx	r3, r3, #13, #15
  20176a:	07b7      	lsls	r7, r6, #30
  20176c:	015d      	lsls	r5, r3, #5
  20176e:	ea05 000e 	and.w	r0, r5, lr
  201772:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201774:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201776:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  20177a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20177c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201780:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201784:	1c53      	adds	r3, r2, #1
  201786:	d1f6      	bne.n	201776 <__core_init+0x46>
  201788:	3d20      	subs	r5, #32
    } while(sets--);
  20178a:	f115 0f20 	cmn.w	r5, #32
  20178e:	d1ee      	bne.n	20176e <__core_init+0x3e>
  201790:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201794:	6963      	ldr	r3, [r4, #20]
  201796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20179a:	6163      	str	r3, [r4, #20]
  20179c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2017a0:	f3bf 8f6f 	isb	sy
  2017a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2017a6:	bf00      	nop
  2017a8:	e000ed00 	.word	0xe000ed00
  2017ac:	00000000 	.word	0x00000000

002017b0 <EXT_CB_A.lto_priv.31>:
static void EXT_CB_A( EXTDriver *extp, expchannel_t channel )
{
    extp = extp;
    channel = channel;

    if(palReadPad(GPIOB, 4))
  2017b0:	4b05      	ldr	r3, [pc, #20]	; (2017c8 <EXT_CB_A.lto_priv.31+0x18>)
    {
        enc_ticks++;
  2017b2:	4a06      	ldr	r2, [pc, #24]	; (2017cc <EXT_CB_A.lto_priv.31+0x1c>)
    if(palReadPad(GPIOB, 4))
  2017b4:	691b      	ldr	r3, [r3, #16]
  2017b6:	f013 0f10 	tst.w	r3, #16
        enc_ticks++;
  2017ba:	6813      	ldr	r3, [r2, #0]
  2017bc:	bf14      	ite	ne
  2017be:	3301      	addne	r3, #1
    }
    else
    {
        enc_ticks--;
  2017c0:	f103 33ff 	addeq.w	r3, r3, #4294967295
  2017c4:	6013      	str	r3, [r2, #0]
  2017c6:	4770      	bx	lr
  2017c8:	40020400 	.word	0x40020400
  2017cc:	20000a10 	.word	0x20000a10

002017d0 <chTMStartMeasurementX.constprop.25>:
  2017d0:	4b01      	ldr	r3, [pc, #4]	; (2017d8 <chTMStartMeasurementX.constprop.25+0x8>)
  2017d2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  2017d4:	6083      	str	r3, [r0, #8]
  2017d6:	4770      	bx	lr
  2017d8:	e0001000 	.word	0xe0001000
  2017dc:	00000000 	.word	0x00000000

002017e0 <chEvtBroadcastFlagsI.constprop.21>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2017e2:	4f17      	ldr	r7, [pc, #92]	; (201840 <chEvtBroadcastFlagsI.constprop.21+0x60>)
  2017e4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2017e8:	42bc      	cmp	r4, r7
  2017ea:	d021      	beq.n	201830 <chEvtBroadcastFlagsI.constprop.21+0x50>
  2017ec:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2017ee:	2600      	movs	r6, #0
  2017f0:	e002      	b.n	2017f8 <chEvtBroadcastFlagsI.constprop.21+0x18>
    elp = elp->next;
  2017f2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2017f4:	42bc      	cmp	r4, r7
  2017f6:	d01b      	beq.n	201830 <chEvtBroadcastFlagsI.constprop.21+0x50>
    elp->flags |= flags;
  2017f8:	68e3      	ldr	r3, [r4, #12]
  2017fa:	432b      	orrs	r3, r5
  2017fc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2017fe:	b115      	cbz	r5, 201806 <chEvtBroadcastFlagsI.constprop.21+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  201800:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201802:	4213      	tst	r3, r2
  201804:	d0f5      	beq.n	2017f2 <chEvtBroadcastFlagsI.constprop.21+0x12>
      chEvtSignalI(elp->listener, elp->events);
  201806:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  201808:	68a3      	ldr	r3, [r4, #8]
  20180a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20180c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201810:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201812:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201814:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201816:	d00c      	beq.n	201832 <chEvtBroadcastFlagsI.constprop.21+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201818:	2a0b      	cmp	r2, #11
  20181a:	d1ea      	bne.n	2017f2 <chEvtBroadcastFlagsI.constprop.21+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20181c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20181e:	ea32 0303 	bics.w	r3, r2, r3
  201822:	d1e6      	bne.n	2017f2 <chEvtBroadcastFlagsI.constprop.21+0x12>
    tp->u.rdymsg = MSG_OK;
  201824:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201826:	f7ff fefb 	bl	201620 <chSchReadyI>
    elp = elp->next;
  20182a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  20182c:	42bc      	cmp	r4, r7
  20182e:	d1e3      	bne.n	2017f8 <chEvtBroadcastFlagsI.constprop.21+0x18>
  201830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201832:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  201834:	4213      	tst	r3, r2
  201836:	d0dc      	beq.n	2017f2 <chEvtBroadcastFlagsI.constprop.21+0x12>
    tp->u.rdymsg = MSG_OK;
  201838:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20183a:	f7ff fef1 	bl	201620 <chSchReadyI>
  20183e:	e7f4      	b.n	20182a <chEvtBroadcastFlagsI.constprop.21+0x4a>
  201840:	200009b0 	.word	0x200009b0
	...

00201850 <_pal_lld_setgroupmode.constprop.4>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  201850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  201854:	2100      	movs	r1, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201856:	2502      	movs	r5, #2
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  201858:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  20185c:	f04f 0c0f 	mov.w	ip, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201860:	4c1f      	ldr	r4, [pc, #124]	; (2018e0 <_pal_lld_setgroupmode.constprop.4+0x90>)
      m1 = 1 << bit;
  201862:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  201866:	2703      	movs	r7, #3
  201868:	e00f      	b.n	20188a <_pal_lld_setgroupmode.constprop.4+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  20186a:	6a26      	ldr	r6, [r4, #32]
  20186c:	ea26 0202 	bic.w	r2, r6, r2
  201870:	ea42 0209 	orr.w	r2, r2, r9
  201874:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  201876:	6822      	ldr	r2, [r4, #0]
  201878:	4013      	ands	r3, r2
  20187a:	432b      	orrs	r3, r5
  20187c:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20187e:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  201880:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  201884:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  201888:	d027      	beq.n	2018da <_pal_lld_setgroupmode.constprop.4+0x8a>
      m2 = 3 << (bit * 2);
  20188a:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  20188c:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  201890:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  201894:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  201898:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20189c:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2018a0:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  2018a4:	d0eb      	beq.n	20187e <_pal_lld_setgroupmode.constprop.4+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2018a6:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  2018aa:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  2018ac:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  2018b0:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2018b4:	ea2a 0606 	bic.w	r6, sl, r6
  2018b8:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2018ba:	68a6      	ldr	r6, [r4, #8]
  2018bc:	ea06 0603 	and.w	r6, r6, r3
  2018c0:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2018c2:	68e6      	ldr	r6, [r4, #12]
  2018c4:	ea06 0603 	and.w	r6, r6, r3
  2018c8:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  2018ca:	d9ce      	bls.n	20186a <_pal_lld_setgroupmode.constprop.4+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2018cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  2018ce:	ea26 0202 	bic.w	r2, r6, r2
  2018d2:	ea42 0209 	orr.w	r2, r2, r9
  2018d6:	6262      	str	r2, [r4, #36]	; 0x24
  2018d8:	e7cd      	b.n	201876 <_pal_lld_setgroupmode.constprop.4+0x26>
  }
}
  2018da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  2018de:	bf00      	nop
  2018e0:	40021000 	.word	0x40021000
	...

002018f0 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  2018f0:	b40e      	push	{r1, r2, r3}
  2018f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2018f6:	b086      	sub	sp, #24
  int n = 0;
  2018f8:	2300      	movs	r3, #0
    c = *fmt++;
  2018fa:	f04f 0954 	mov.w	r9, #84	; 0x54
  2018fe:	f8df a280 	ldr.w	sl, [pc, #640]	; 201b80 <chprintf.constprop.0+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  201902:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  201904:	4c9d      	ldr	r4, [pc, #628]	; (201b7c <chprintf.constprop.0+0x28c>)
  int n = 0;
  201906:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  201908:	9502      	str	r5, [sp, #8]
  20190a:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  20190e:	9a00      	ldr	r2, [sp, #0]
  201910:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  201912:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  201916:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  201918:	9901      	ldr	r1, [sp, #4]
  20191a:	689b      	ldr	r3, [r3, #8]
  20191c:	4898      	ldr	r0, [pc, #608]	; (201b80 <chprintf.constprop.0+0x290>)
      n++;
  20191e:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  201920:	4798      	blx	r3
  201922:	7823      	ldrb	r3, [r4, #0]
  201924:	9301      	str	r3, [sp, #4]
    if (c == 0)
  201926:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  201928:	1c74      	adds	r4, r6, #1
    if (c == 0)
  20192a:	2b00      	cmp	r3, #0
  20192c:	f000 8120 	beq.w	201b70 <chprintf.constprop.0+0x280>
    if (c != '%') {
  201930:	2b25      	cmp	r3, #37	; 0x25
  201932:	d1ec      	bne.n	20190e <chprintf.constprop.0+0x1e>
    if (*fmt == '-') {
  201934:	7871      	ldrb	r1, [r6, #1]
  201936:	292d      	cmp	r1, #45	; 0x2d
  201938:	f000 814b 	beq.w	201bd2 <chprintf.constprop.0+0x2e2>
    left_align = FALSE;
  20193c:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  201940:	2930      	cmp	r1, #48	; 0x30
  201942:	f000 8141 	beq.w	201bc8 <chprintf.constprop.0+0x2d8>
    filler = ' ';
  201946:	f04f 0820 	mov.w	r8, #32
  20194a:	1c62      	adds	r2, r4, #1
    width = 0;
  20194c:	2400      	movs	r4, #0
  20194e:	e005      	b.n	20195c <chprintf.constprop.0+0x6c>
        c = va_arg(ap, int);
  201950:	782b      	ldrb	r3, [r5, #0]
  201952:	3504      	adds	r5, #4
  201954:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  201958:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  20195c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  201960:	4616      	mov	r6, r2
      width = width * 10 + c;
  201962:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  201966:	b2db      	uxtb	r3, r3
  201968:	2b09      	cmp	r3, #9
  20196a:	d9f3      	bls.n	201954 <chprintf.constprop.0+0x64>
      else if (c == '*')
  20196c:	292a      	cmp	r1, #42	; 0x2a
  20196e:	d0ef      	beq.n	201950 <chprintf.constprop.0+0x60>
    if (c == '.') {
  201970:	292e      	cmp	r1, #46	; 0x2e
  201972:	f04f 0200 	mov.w	r2, #0
  201976:	d04a      	beq.n	201a0e <chprintf.constprop.0+0x11e>
    if (c == 'l' || c == 'L') {
  201978:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  20197c:	2b4c      	cmp	r3, #76	; 0x4c
  20197e:	d155      	bne.n	201a2c <chprintf.constprop.0+0x13c>
      if (*fmt)
  201980:	7833      	ldrb	r3, [r6, #0]
  201982:	9301      	str	r3, [sp, #4]
  201984:	b11b      	cbz	r3, 20198e <chprintf.constprop.0+0x9e>
        c = *fmt++;
  201986:	4619      	mov	r1, r3
  201988:	3601      	adds	r6, #1
  20198a:	7833      	ldrb	r3, [r6, #0]
  20198c:	9301      	str	r3, [sp, #4]
    switch (c) {
  20198e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  201992:	2b34      	cmp	r3, #52	; 0x34
  201994:	f200 810c 	bhi.w	201bb0 <chprintf.constprop.0+0x2c0>
  201998:	e8df f013 	tbh	[pc, r3, lsl #1]
  20199c:	010a018f 	.word	0x010a018f
  2019a0:	010a010a 	.word	0x010a010a
  2019a4:	018f010a 	.word	0x018f010a
  2019a8:	010a010a 	.word	0x010a010a
  2019ac:	010a010a 	.word	0x010a010a
  2019b0:	014d010a 	.word	0x014d010a
  2019b4:	010a010a 	.word	0x010a010a
  2019b8:	010a010a 	.word	0x010a010a
  2019bc:	0152010a 	.word	0x0152010a
  2019c0:	010a010a 	.word	0x010a010a
  2019c4:	010a0187 	.word	0x010a0187
  2019c8:	010a010a 	.word	0x010a010a
  2019cc:	010a010a 	.word	0x010a010a
  2019d0:	010a010a 	.word	0x010a010a
  2019d4:	010a010a 	.word	0x010a010a
  2019d8:	00f6010a 	.word	0x00f6010a
  2019dc:	010a018f 	.word	0x010a018f
  2019e0:	010a010a 	.word	0x010a010a
  2019e4:	018f010a 	.word	0x018f010a
  2019e8:	010a010a 	.word	0x010a010a
  2019ec:	010a010a 	.word	0x010a010a
  2019f0:	014d010a 	.word	0x014d010a
  2019f4:	010a010a 	.word	0x010a010a
  2019f8:	0089010a 	.word	0x0089010a
  2019fc:	0152010a 	.word	0x0152010a
  201a00:	010a010a 	.word	0x010a010a
  201a04:	0187      	.short	0x0187
          c = va_arg(ap, int);
  201a06:	782b      	ldrb	r3, [r5, #0]
  201a08:	3504      	adds	r5, #4
        precision += c;
  201a0a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  201a0e:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  201a12:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  201a16:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  201a1a:	b2db      	uxtb	r3, r3
  201a1c:	2b09      	cmp	r3, #9
  201a1e:	d9f4      	bls.n	201a0a <chprintf.constprop.0+0x11a>
        else if (c == '*')
  201a20:	292a      	cmp	r1, #42	; 0x2a
  201a22:	d0f0      	beq.n	201a06 <chprintf.constprop.0+0x116>
    if (c == 'l' || c == 'L') {
  201a24:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  201a28:	2b4c      	cmp	r3, #76	; 0x4c
  201a2a:	d0a9      	beq.n	201980 <chprintf.constprop.0+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  201a2c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  201a30:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  201a34:	b2db      	uxtb	r3, r3
    switch (c) {
  201a36:	2834      	cmp	r0, #52	; 0x34
  201a38:	f200 80b8 	bhi.w	201bac <chprintf.constprop.0+0x2bc>
  201a3c:	e8df f010 	tbh	[pc, r0, lsl #1]
  201a40:	00b6010a 	.word	0x00b6010a
  201a44:	00b600b6 	.word	0x00b600b6
  201a48:	010a00b6 	.word	0x010a00b6
  201a4c:	00b600b6 	.word	0x00b600b6
  201a50:	00b600b6 	.word	0x00b600b6
  201a54:	010300b6 	.word	0x010300b6
  201a58:	00b600b6 	.word	0x00b600b6
  201a5c:	00b600b6 	.word	0x00b600b6
  201a60:	00ce00b6 	.word	0x00ce00b6
  201a64:	00b600b6 	.word	0x00b600b6
  201a68:	00b60138 	.word	0x00b60138
  201a6c:	00b600b6 	.word	0x00b600b6
  201a70:	00b600b6 	.word	0x00b600b6
  201a74:	00b600b6 	.word	0x00b600b6
  201a78:	00b600b6 	.word	0x00b600b6
  201a7c:	00a200b6 	.word	0x00a200b6
  201a80:	00b6010a 	.word	0x00b6010a
  201a84:	00b600b6 	.word	0x00b600b6
  201a88:	010a00b6 	.word	0x010a00b6
  201a8c:	00b600b6 	.word	0x00b600b6
  201a90:	00b600b6 	.word	0x00b600b6
  201a94:	010300b6 	.word	0x010300b6
  201a98:	00b600b6 	.word	0x00b600b6
  201a9c:	003500b6 	.word	0x003500b6
  201aa0:	00ce00b6 	.word	0x00ce00b6
  201aa4:	00b600b6 	.word	0x00b600b6
  201aa8:	0138      	.short	0x0138
  201aaa:	7833      	ldrb	r3, [r6, #0]
  201aac:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  201aae:	682f      	ldr	r7, [r5, #0]
  201ab0:	3504      	adds	r5, #4
  201ab2:	2f00      	cmp	r7, #0
  201ab4:	f000 8111 	beq.w	201cda <chprintf.constprop.0+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  201ab8:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  201aba:	2a00      	cmp	r2, #0
  201abc:	f040 810a 	bne.w	201cd4 <chprintf.constprop.0+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  201ac0:	2b00      	cmp	r3, #0
  201ac2:	f000 811c 	beq.w	201cfe <chprintf.constprop.0+0x40e>
  201ac6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  201aca:	463a      	mov	r2, r7
  201acc:	e001      	b.n	201ad2 <chprintf.constprop.0+0x1e2>
  201ace:	3b01      	subs	r3, #1
  201ad0:	d403      	bmi.n	201ada <chprintf.constprop.0+0x1ea>
  201ad2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  201ad6:	2900      	cmp	r1, #0
  201ad8:	d1f9      	bne.n	201ace <chprintf.constprop.0+0x1de>
  201ada:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  201adc:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  201ae0:	1aa4      	subs	r4, r4, r2
  201ae2:	f102 39ff 	add.w	r9, r2, #4294967295
  201ae6:	d45b      	bmi.n	201ba0 <chprintf.constprop.0+0x2b0>
    if (left_align == FALSE)
  201ae8:	f1bc 0f00 	cmp.w	ip, #0
  201aec:	d168      	bne.n	201bc0 <chprintf.constprop.0+0x2d0>
  201aee:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  201af2:	2c00      	cmp	r4, #0
  201af4:	d063      	beq.n	201bbe <chprintf.constprop.0+0x2ce>
      if (*s == '-' && filler == '0') {
  201af6:	783b      	ldrb	r3, [r7, #0]
  201af8:	2b2d      	cmp	r3, #45	; 0x2d
  201afa:	d103      	bne.n	201b04 <chprintf.constprop.0+0x214>
  201afc:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  201b00:	f000 80f0 	beq.w	201ce4 <chprintf.constprop.0+0x3f4>
        streamPut(chp, (uint8_t)filler);
  201b04:	f8da 3000 	ldr.w	r3, [sl]
  201b08:	4641      	mov	r1, r8
  201b0a:	4650      	mov	r0, sl
  201b0c:	689b      	ldr	r3, [r3, #8]
  201b0e:	4798      	blx	r3
      } while (++width != 0);
  201b10:	f11b 0b01 	adds.w	fp, fp, #1
  201b14:	d1f6      	bne.n	201b04 <chprintf.constprop.0+0x214>
  201b16:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  201b18:	f1b9 0f00 	cmp.w	r9, #0
  201b1c:	4423      	add	r3, r4
  201b1e:	9300      	str	r3, [sp, #0]
  201b20:	f6ff af01 	blt.w	201926 <chprintf.constprop.0+0x36>
  201b24:	465c      	mov	r4, fp
  201b26:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  201b28:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  201b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  201b30:	f817 1b01 	ldrb.w	r1, [r7], #1
  201b34:	4650      	mov	r0, sl
  201b36:	689b      	ldr	r3, [r3, #8]
  201b38:	4798      	blx	r3
    while (--i >= 0) {
  201b3a:	f1bb 3fff 	cmp.w	fp, #4294967295
  201b3e:	d1f3      	bne.n	201b28 <chprintf.constprop.0+0x238>
  201b40:	9b00      	ldr	r3, [sp, #0]
  201b42:	3301      	adds	r3, #1
  201b44:	444b      	add	r3, r9
  201b46:	9300      	str	r3, [sp, #0]
    while (width) {
  201b48:	2c00      	cmp	r4, #0
  201b4a:	f43f aeec 	beq.w	201926 <chprintf.constprop.0+0x36>
  201b4e:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  201b50:	f8da 3000 	ldr.w	r3, [sl]
  201b54:	4641      	mov	r1, r8
  201b56:	4650      	mov	r0, sl
  201b58:	689b      	ldr	r3, [r3, #8]
  201b5a:	4798      	blx	r3
    while (width) {
  201b5c:	3f01      	subs	r7, #1
  201b5e:	d1f7      	bne.n	201b50 <chprintf.constprop.0+0x260>
  201b60:	9b00      	ldr	r3, [sp, #0]
  201b62:	4423      	add	r3, r4
    c = *fmt++;
  201b64:	1c74      	adds	r4, r6, #1
  201b66:	9300      	str	r3, [sp, #0]
    if (c == 0)
  201b68:	9b01      	ldr	r3, [sp, #4]
  201b6a:	2b00      	cmp	r3, #0
  201b6c:	f47f aee0 	bne.w	201930 <chprintf.constprop.0+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  201b70:	9800      	ldr	r0, [sp, #0]
  201b72:	b006      	add	sp, #24
  201b74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201b78:	b003      	add	sp, #12
  201b7a:	4770      	bx	lr
  201b7c:	08001df1 	.word	0x08001df1
  201b80:	200009b0 	.word	0x200009b0
  201b84:	7833      	ldrb	r3, [r6, #0]
  201b86:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  201b88:	682b      	ldr	r3, [r5, #0]
  201b8a:	af06      	add	r7, sp, #24
  201b8c:	3504      	adds	r5, #4
  201b8e:	f04f 0900 	mov.w	r9, #0
  201b92:	2201      	movs	r2, #1
      filler = ' ';
  201b94:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  201b98:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  201b9c:	1aa4      	subs	r4, r4, r2
  201b9e:	d5a3      	bpl.n	201ae8 <chprintf.constprop.0+0x1f8>
    while (--i >= 0) {
  201ba0:	f1b9 0f00 	cmp.w	r9, #0
  201ba4:	f6ff aebf 	blt.w	201926 <chprintf.constprop.0+0x36>
      width = 0;
  201ba8:	2400      	movs	r4, #0
  201baa:	e7bc      	b.n	201b26 <chprintf.constprop.0+0x236>
  201bac:	7833      	ldrb	r3, [r6, #0]
  201bae:	9301      	str	r3, [sp, #4]
      *p++ = c;
  201bb0:	af06      	add	r7, sp, #24
  201bb2:	f04f 0900 	mov.w	r9, #0
  201bb6:	2201      	movs	r2, #1
  201bb8:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  201bbc:	e7ee      	b.n	201b9c <chprintf.constprop.0+0x2ac>
    if (width < 0) {
  201bbe:	465c      	mov	r4, fp
    while (--i >= 0) {
  201bc0:	f1b9 0f00 	cmp.w	r9, #0
  201bc4:	daaf      	bge.n	201b26 <chprintf.constprop.0+0x236>
  201bc6:	e7bf      	b.n	201b48 <chprintf.constprop.0+0x258>
  201bc8:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  201bca:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  201bce:	3401      	adds	r4, #1
  201bd0:	e6bb      	b.n	20194a <chprintf.constprop.0+0x5a>
      fmt++;
  201bd2:	1cb4      	adds	r4, r6, #2
  201bd4:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  201bd6:	f04f 0c01 	mov.w	ip, #1
  201bda:	e6b1      	b.n	201940 <chprintf.constprop.0+0x50>
    switch (c) {
  201bdc:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  201be0:	2b19      	cmp	r3, #25
  201be2:	d934      	bls.n	201c4e <chprintf.constprop.0+0x35e>
        l = va_arg(ap, unsigned int);
  201be4:	682f      	ldr	r7, [r5, #0]
  201be6:	3504      	adds	r5, #4
  201be8:	7833      	ldrb	r3, [r6, #0]
  201bea:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  201bec:	f10d 0117 	add.w	r1, sp, #23
  201bf0:	e000      	b.n	201bf4 <chprintf.constprop.0+0x304>
  } while ((ll /= radix) != 0);
  201bf2:	4601      	mov	r1, r0
    *--q = i;
  201bf4:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  201bf6:	fbb7 f2fe 	udiv	r2, r7, lr
  201bfa:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  201bfe:	4617      	mov	r7, r2
    i += '0';
  201c00:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  201c04:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  201c06:	bfc8      	it	gt
  201c08:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  201c0c:	b2db      	uxtb	r3, r3
  201c0e:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  201c12:	2a00      	cmp	r2, #0
  201c14:	d1ed      	bne.n	201bf2 <chprintf.constprop.0+0x302>
  i = (int)(p + MAX_FILLER - q);
  201c16:	f10d 0217 	add.w	r2, sp, #23
  201c1a:	af03      	add	r7, sp, #12
  201c1c:	1a12      	subs	r2, r2, r0
  201c1e:	46be      	mov	lr, r7
  201c20:	4410      	add	r0, r2
  201c22:	e001      	b.n	201c28 <chprintf.constprop.0+0x338>
  201c24:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  201c28:	4288      	cmp	r0, r1
    *p++ = *q++;
  201c2a:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  201c2e:	d1f9      	bne.n	201c24 <chprintf.constprop.0+0x334>
  201c30:	f102 39ff 	add.w	r9, r2, #4294967295
  201c34:	e7b2      	b.n	201b9c <chprintf.constprop.0+0x2ac>
    switch (c) {
  201c36:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  201c3a:	682f      	ldr	r7, [r5, #0]
  201c3c:	3504      	adds	r5, #4
  201c3e:	e7d5      	b.n	201bec <chprintf.constprop.0+0x2fc>
    switch (c) {
  201c40:	f04f 0e0a 	mov.w	lr, #10
  201c44:	e7f9      	b.n	201c3a <chprintf.constprop.0+0x34a>
      if (is_long)
  201c46:	2b19      	cmp	r3, #25
    switch (c) {
  201c48:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  201c4c:	d8ca      	bhi.n	201be4 <chprintf.constprop.0+0x2f4>
  201c4e:	7833      	ldrb	r3, [r6, #0]
  201c50:	9301      	str	r3, [sp, #4]
  201c52:	e7f2      	b.n	201c3a <chprintf.constprop.0+0x34a>
      if (is_long)
  201c54:	2b19      	cmp	r3, #25
  201c56:	d92e      	bls.n	201cb6 <chprintf.constprop.0+0x3c6>
        l = va_arg(ap, int);
  201c58:	6829      	ldr	r1, [r5, #0]
  201c5a:	3504      	adds	r5, #4
  201c5c:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  201c5e:	2900      	cmp	r1, #0
  201c60:	9301      	str	r3, [sp, #4]
  201c62:	db2e      	blt.n	201cc2 <chprintf.constprop.0+0x3d2>
    p = tmpbuf;
  201c64:	af03      	add	r7, sp, #12
  201c66:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  201c68:	f102 0b0b 	add.w	fp, r2, #11
  201c6c:	4658      	mov	r0, fp
    i = (int)(l % radix);
  201c6e:	4b26      	ldr	r3, [pc, #152]	; (201d08 <chprintf.constprop.0+0x418>)
  201c70:	fba3 e301 	umull	lr, r3, r3, r1
  201c74:	08db      	lsrs	r3, r3, #3
  201c76:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  201c7a:	469e      	mov	lr, r3
  201c7c:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  201c80:	4671      	mov	r1, lr
    i += '0';
  201c82:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  201c84:	b2db      	uxtb	r3, r3
  201c86:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  201c8a:	2900      	cmp	r1, #0
  201c8c:	d1ef      	bne.n	201c6e <chprintf.constprop.0+0x37e>
  i = (int)(p + MAX_FILLER - q);
  201c8e:	ebab 0100 	sub.w	r1, fp, r0
  201c92:	4411      	add	r1, r2
  201c94:	e001      	b.n	201c9a <chprintf.constprop.0+0x3aa>
  201c96:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  201c9a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  201c9e:	428a      	cmp	r2, r1
  201ca0:	d1f9      	bne.n	201c96 <chprintf.constprop.0+0x3a6>
  201ca2:	1bd2      	subs	r2, r2, r7
  201ca4:	f102 39ff 	add.w	r9, r2, #4294967295
  201ca8:	e778      	b.n	201b9c <chprintf.constprop.0+0x2ac>
    switch (c) {
  201caa:	f04f 0e10 	mov.w	lr, #16
  201cae:	e7c4      	b.n	201c3a <chprintf.constprop.0+0x34a>
  201cb0:	f04f 0e10 	mov.w	lr, #16
  201cb4:	e794      	b.n	201be0 <chprintf.constprop.0+0x2f0>
  201cb6:	7833      	ldrb	r3, [r6, #0]
  201cb8:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  201cba:	6829      	ldr	r1, [r5, #0]
  201cbc:	3504      	adds	r5, #4
      if (l < 0) {
  201cbe:	2900      	cmp	r1, #0
  201cc0:	dad0      	bge.n	201c64 <chprintf.constprop.0+0x374>
        *p++ = '-';
  201cc2:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  201cc6:	4249      	negs	r1, r1
        *p++ = '-';
  201cc8:	f10d 020d 	add.w	r2, sp, #13
  201ccc:	af03      	add	r7, sp, #12
  201cce:	f88d 300c 	strb.w	r3, [sp, #12]
  201cd2:	e7c9      	b.n	201c68 <chprintf.constprop.0+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  201cd4:	b19b      	cbz	r3, 201cfe <chprintf.constprop.0+0x40e>
  201cd6:	1e53      	subs	r3, r2, #1
  201cd8:	e6f7      	b.n	201aca <chprintf.constprop.0+0x1da>
      if (precision == 0)
  201cda:	b90a      	cbnz	r2, 201ce0 <chprintf.constprop.0+0x3f0>
        precision = 32767;
  201cdc:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  201ce0:	4f0a      	ldr	r7, [pc, #40]	; (201d0c <chprintf.constprop.0+0x41c>)
  201ce2:	e7f8      	b.n	201cd6 <chprintf.constprop.0+0x3e6>
        n++;
  201ce4:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  201ce6:	212d      	movs	r1, #45	; 0x2d
  201ce8:	f8da 3000 	ldr.w	r3, [sl]
  201cec:	4650      	mov	r0, sl
        n++;
  201cee:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  201cf0:	3701      	adds	r7, #1
  201cf2:	689b      	ldr	r3, [r3, #8]
  201cf4:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  201cf8:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  201cfa:	4798      	blx	r3
  201cfc:	e702      	b.n	201b04 <chprintf.constprop.0+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  201cfe:	f04f 39ff 	mov.w	r9, #4294967295
  201d02:	f04f 0820 	mov.w	r8, #32
  201d06:	e6ef      	b.n	201ae8 <chprintf.constprop.0+0x1f8>
  201d08:	cccccccd 	.word	0xcccccccd
  201d0c:	08001ea0 	.word	0x08001ea0
