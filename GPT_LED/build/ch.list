
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f000 fd07 	bl	200c30 <__core_init>
  200222:	f000 fbed 	bl	200a00 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f000 fca1 	bl	200bb0 <__init_ram_areas>
  20026e:	f000 fcd7 	bl	200c20 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 f945 	bl	200510 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f000 bcbb 	b.w	200c10 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08000d4c 	.word	0x08000d4c
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020010 	.word	0x20020010
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000988 	.word	0x20000988
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f000 fbfe 	bl	200af0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 fc3c 	bl	200b70 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <chTMStartMeasurementX.constprop.9>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200300:	4b01      	ldr	r3, [pc, #4]	; (200308 <chTMStartMeasurementX.constprop.9+0x8>)
  200302:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  200304:	6083      	str	r3, [r0, #8]
  200306:	4770      	bx	lr
  200308:	e0001000 	.word	0xe0001000
  20030c:	00000000 	.word	0x00000000

00200310 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200310:	b470      	push	{r4, r5, r6}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200312:	2320      	movs	r3, #32
  200314:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200318:	4e0d      	ldr	r6, [pc, #52]	; (200350 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20031a:	1e4a      	subs	r2, r1, #1
  20031c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20031e:	4c0d      	ldr	r4, [pc, #52]	; (200354 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200320:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200322:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200324:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200326:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200328:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20032a:	1858      	adds	r0, r3, r1
  20032c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20032e:	1a23      	subs	r3, r4, r0
  200330:	429a      	cmp	r2, r3
  200332:	d806      	bhi.n	200342 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200334:	4402      	add	r2, r0
  200336:	2300      	movs	r3, #0
  200338:	6032      	str	r2, [r6, #0]
  20033a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20033e:	bc70      	pop	{r4, r5, r6}
  200340:	4770      	bx	lr
    return NULL;
  200342:	2000      	movs	r0, #0
  200344:	2300      	movs	r3, #0
  200346:	f383 8811 	msr	BASEPRI, r3
}
  20034a:	bc70      	pop	{r4, r5, r6}
  20034c:	4770      	bx	lr
  20034e:	bf00      	nop
  200350:	20000984 	.word	0x20000984
  200354:	20000980 	.word	0x20000980
	...

00200360 <gpt1_CB>:

#include <chprintf.h>

void gpt1_CB(void)
{
    palToggleLine(LINE_LED1);
  200360:	4b06      	ldr	r3, [pc, #24]	; (20037c <gpt1_CB+0x1c>)
  200362:	695a      	ldr	r2, [r3, #20]
  200364:	f082 0201 	eor.w	r2, r2, #1
  200368:	615a      	str	r2, [r3, #20]
    palToggleLine(LINE_LED2);
  20036a:	695a      	ldr	r2, [r3, #20]
  20036c:	f082 0280 	eor.w	r2, r2, #128	; 0x80
  200370:	615a      	str	r2, [r3, #20]
    palToggleLine(LINE_LED3);
  200372:	695a      	ldr	r2, [r3, #20]
  200374:	f482 4280 	eor.w	r2, r2, #16384	; 0x4000
  200378:	615a      	str	r2, [r3, #20]
  20037a:	4770      	bx	lr
  20037c:	40020400 	.word	0x40020400

00200380 <_port_irq_epilogue>:
  200380:	2320      	movs	r3, #32
  200382:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200386:	4b11      	ldr	r3, [pc, #68]	; (2003cc <_port_irq_epilogue+0x4c>)
  200388:	685b      	ldr	r3, [r3, #4]
  20038a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20038e:	d102      	bne.n	200396 <_port_irq_epilogue+0x16>
  200390:	f383 8811 	msr	BASEPRI, r3
  200394:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200396:	b480      	push	{r7}
  200398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20039a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20039e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2003a2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2003a6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2003aa:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2003ae:	4a08      	ldr	r2, [pc, #32]	; (2003d0 <_port_irq_epilogue+0x50>)
  2003b0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2003b2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2003b4:	6889      	ldr	r1, [r1, #8]
  2003b6:	6892      	ldr	r2, [r2, #8]
  2003b8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2003ba:	bf8c      	ite	hi
  2003bc:	4a05      	ldrhi	r2, [pc, #20]	; (2003d4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2003be:	4a06      	ldrls	r2, [pc, #24]	; (2003d8 <_port_irq_epilogue+0x58>)
  2003c0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2003c4:	46bd      	mov	sp, r7
  2003c6:	bc80      	pop	{r7}
  2003c8:	4770      	bx	lr
  2003ca:	bf00      	nop
  2003cc:	e000ed00 	.word	0xe000ed00
  2003d0:	20000810 	.word	0x20000810
  2003d4:	002002f5 	.word	0x002002f5
  2003d8:	002002f8 	.word	0x002002f8
  2003dc:	00000000 	.word	0x00000000

002003e0 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  2003e0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  2003e2:	4b0b      	ldr	r3, [pc, #44]	; (200410 <VectorA4+0x30>)
  2003e4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  2003e6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  2003e8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  2003ea:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  2003ec:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  2003ee:	d107      	bne.n	200400 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  2003f0:	2002      	movs	r0, #2
  2003f2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2003f4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2003f6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  2003f8:	68d1      	ldr	r1, [r2, #12]
  2003fa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  2003fe:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200400:	685b      	ldr	r3, [r3, #4]
  200402:	4803      	ldr	r0, [pc, #12]	; (200410 <VectorA4+0x30>)
  200404:	685b      	ldr	r3, [r3, #4]
  200406:	4798      	blx	r3
}
  200408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20040c:	f7ff bfb8 	b.w	200380 <_port_irq_epilogue>
  200410:	20000800 	.word	0x20000800
	...

00200420 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200422:	2720      	movs	r7, #32
  200424:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200428:	4d12      	ldr	r5, [pc, #72]	; (200474 <SysTick_Handler+0x54>)
  20042a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20042c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20042e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200430:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200434:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200436:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200438:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20043a:	d013      	beq.n	200464 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20043c:	891c      	ldrh	r4, [r3, #8]
  20043e:	3c01      	subs	r4, #1
  200440:	b2a4      	uxth	r4, r4
  200442:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200444:	b974      	cbnz	r4, 200464 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200446:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200448:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20044a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20044c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20044e:	61ea      	str	r2, [r5, #28]
  200450:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200454:	6918      	ldr	r0, [r3, #16]
  200456:	4788      	blx	r1
  200458:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20045c:	69eb      	ldr	r3, [r5, #28]
  20045e:	891a      	ldrh	r2, [r3, #8]
  200460:	2a00      	cmp	r2, #0
  200462:	d0f0      	beq.n	200446 <SysTick_Handler+0x26>
  200464:	2300      	movs	r3, #0
  200466:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  20046a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20046e:	f7ff bf87 	b.w	200380 <_port_irq_epilogue>
  200472:	bf00      	nop
  200474:	20000810 	.word	0x20000810
	...

00200480 <SVC_Handler>:
void SVC_Handler(void) {
  200480:	b480      	push	{r7}
  200482:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200484:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200488:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20048a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20048e:	2300      	movs	r3, #0
  200490:	f383 8811 	msr	BASEPRI, r3
}
  200494:	46bd      	mov	sp, r7
  200496:	bc80      	pop	{r7}
  200498:	4770      	bx	lr
  20049a:	bf00      	nop
  20049c:	0000      	movs	r0, r0
	...

002004a0 <chTMStopMeasurementX>:
  2004a0:	4b0e      	ldr	r3, [pc, #56]	; (2004dc <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  2004a2:	6882      	ldr	r2, [r0, #8]
  2004a4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2004a6:	490e      	ldr	r1, [pc, #56]	; (2004e0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  2004a8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  2004aa:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  2004ac:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2004ae:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2004b0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2004b2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2004b4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2004b6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2004b8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2004ba:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2004be:	18e4      	adds	r4, r4, r3
  2004c0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2004c4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2004c6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2004c8:	bf88      	it	hi
  2004ca:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2004cc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2004ce:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2004d2:	bf38      	it	cc
  2004d4:	6003      	strcc	r3, [r0, #0]
}
  2004d6:	bc30      	pop	{r4, r5}
  2004d8:	4770      	bx	lr
  2004da:	bf00      	nop
  2004dc:	e0001000 	.word	0xe0001000
  2004e0:	20000810 	.word	0x20000810
	...

002004f0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  2004f0:	e7fe      	b.n	2004f0 <_idle_thread>
  2004f2:	bf00      	nop
	...

00200500 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200500:	e7fe      	b.n	200500 <BusFault_Handler>
  200502:	bf00      	nop
	...

00200510 <main>:
    .cr2          = 0,
    .dier         = 0
};

int main(void)
{
  200510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  200514:	4cbc      	ldr	r4, [pc, #752]	; (200808 <main+0x2f8>)
  200516:	b087      	sub	sp, #28
  ch.rlist.prio = NOPRIO;
  200518:	2500      	movs	r5, #0
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
  20051a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  20051e:	f104 031c 	add.w	r3, r4, #28
  tmp->best       = (rtcnt_t)-1;
  200522:	f04f 32ff 	mov.w	r2, #4294967295
  tmp->cumulative = (rttime_t)0;
  200526:	2600      	movs	r6, #0
  200528:	2700      	movs	r7, #0
  chTMStartMeasurementX(&tm);
  20052a:	4668      	mov	r0, sp
  20052c:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
  20052e:	6064      	str	r4, [r4, #4]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200530:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
  ch.vtlist.delta = (systime_t)-1;
  200534:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200536:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200538:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  20053a:	9200      	str	r2, [sp, #0]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20053c:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  20053e:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  200540:	60a5      	str	r5, [r4, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
  200542:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200544:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200546:	9501      	str	r5, [sp, #4]
  tmp->last       = (rtcnt_t)0;
  200548:	9502      	str	r5, [sp, #8]
  tmp->n          = (ucnt_t)0;
  20054a:	9503      	str	r5, [sp, #12]
  tmp->cumulative = (rttime_t)0;
  20054c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  chTMStartMeasurementX(&tm);
  200550:	f7ff fed6 	bl	200300 <chTMStartMeasurementX.constprop.9>
  chTMStopMeasurementX(&tm);
  200554:	4668      	mov	r0, sp
  200556:	f7ff ffa3 	bl	2004a0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  20055a:	4bac      	ldr	r3, [pc, #688]	; (20080c <main+0x2fc>)
  20055c:	49ac      	ldr	r1, [pc, #688]	; (200810 <main+0x300>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  20055e:	f04f 0e80 	mov.w	lr, #128	; 0x80
  nextmem = __heap_base__;
  200562:	4aac      	ldr	r2, [pc, #688]	; (200814 <main+0x304>)
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
  200564:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  200568:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  20056a:	f103 0c10 	add.w	ip, r3, #16
  20056e:	49aa      	ldr	r1, [pc, #680]	; (200818 <main+0x308>)
  endmem  = __heap_end__;
  200570:	4faa      	ldr	r7, [pc, #680]	; (20081c <main+0x30c>)
  nextmem = __heap_base__;
  200572:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200574:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  200576:	49aa      	ldr	r1, [pc, #680]	; (200820 <main+0x310>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200578:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  20057c:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  20057e:	49a9      	ldr	r1, [pc, #676]	; (200824 <main+0x314>)
  ch.tm.offset = tm.last;
  200580:	9802      	ldr	r0, [sp, #8]
  200582:	68cf      	ldr	r7, [r1, #12]
  200584:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200586:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  20058a:	48a7      	ldr	r0, [pc, #668]	; (200828 <main+0x318>)
  tp->prio      = prio;
  20058c:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  200590:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  200594:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200596:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 200874 <main+0x364>
  REG_INSERT(tp);
  20059a:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  20059c:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 200878 <main+0x368>
  tp->epending  = (eventmask_t)0;
  2005a0:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  2005a2:	619d      	str	r5, [r3, #24]
  2005a4:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  2005a8:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  2005ac:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  2005b0:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  2005b2:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  2005b6:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  2005b8:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  2005ba:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  2005be:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  2005c0:	f104 0758 	add.w	r7, r4, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  2005c4:	60c8      	str	r0, [r1, #12]
  2005c6:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  2005ca:	609d      	str	r5, [r3, #8]
  2005cc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  2005d0:	60dd      	str	r5, [r3, #12]
  2005d2:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  2005d4:	61a6      	str	r6, [r4, #24]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2005d6:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  2005d8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  2005dc:	f04f 0c10 	mov.w	ip, #16
  DWT->LAR = 0xC5ACCE55U;
  2005e0:	4b92      	ldr	r3, [pc, #584]	; (20082c <main+0x31c>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  2005e2:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  2005e4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2005e8:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  2005ec:	4890      	ldr	r0, [pc, #576]	; (200830 <main+0x320>)
  tqp->next = (thread_t *)tqp;
  2005ee:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  2005f0:	65e7      	str	r7, [r4, #92]	; 0x5c
  2005f2:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  2005f6:	6818      	ldr	r0, [r3, #0]
  2005f8:	4310      	orrs	r0, r2
  2005fa:	6018      	str	r0, [r3, #0]
  2005fc:	f881 c01f 	strb.w	ip, [r1, #31]
  200600:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  200604:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  200608:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20060a:	f386 8811 	msr	BASEPRI, r6
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
  20060e:	4b89      	ldr	r3, [pc, #548]	; (200834 <main+0x324>)
  tp->state     = CH_STATE_WTSTART;
  200610:	f04f 0e02 	mov.w	lr, #2
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200614:	4e88      	ldr	r6, [pc, #544]	; (200838 <main+0x328>)
  REG_INSERT(tp);
  200616:	6960      	ldr	r0, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200618:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  20061c:	66de      	str	r6, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  20061e:	f103 0190 	add.w	r1, r3, #144	; 0x90
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200622:	4e86      	ldr	r6, [pc, #536]	; (20083c <main+0x32c>)
  tp->prio      = prio;
  200624:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200628:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
  tp->name      = name;
  20062c:	4e84      	ldr	r6, [pc, #528]	; (200840 <main+0x330>)
  tp->realprio  = prio;
  20062e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tp->refs      = (trefs_t)1;
  200632:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  tqp->next = (thread_t *)tqp;
  200636:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
  REG_INSERT(tp);
  20063a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  20063e:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200642:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200646:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  20064a:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->state     = CH_STATE_WTSTART;
  20064e:	f883 e0b0 	strb.w	lr, [r3, #176]	; 0xb0
  tp->name      = name;
  200652:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200656:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200658:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  20065c:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200660:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  REG_INSERT(tp);
  200664:	6101      	str	r1, [r0, #16]
  thread_t *otp = currp;
  200666:	69a0      	ldr	r0, [r4, #24]
  ntp->u.rdymsg = msg;
  200668:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  20066c:	6886      	ldr	r6, [r0, #8]
  20066e:	6161      	str	r1, [r4, #20]
  200670:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200674:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  200678:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  20067c:	2e00      	cmp	r6, #0
  20067e:	f000 819d 	beq.w	2009bc <main+0x4ac>
  tp->state = CH_STATE_READY;
  200682:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200686:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  200688:	68a2      	ldr	r2, [r4, #8]
  20068a:	2a00      	cmp	r2, #0
  20068c:	d1fb      	bne.n	200686 <main+0x176>
  tp->queue.next             = cp;
  20068e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200692:	6860      	ldr	r0, [r4, #4]
  200694:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  200698:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  20069a:	6061      	str	r1, [r4, #4]
  20069c:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  2006a0:	4b68      	ldr	r3, [pc, #416]	; (200844 <main+0x334>)
  2006a2:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  2006a6:	4c68      	ldr	r4, [pc, #416]	; (200848 <main+0x338>)
  rccResetAHB1(~0);
  2006a8:	6918      	ldr	r0, [r3, #16]
  2006aa:	6119      	str	r1, [r3, #16]
  2006ac:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  2006ae:	6958      	ldr	r0, [r3, #20]
  2006b0:	6159      	str	r1, [r3, #20]
  2006b2:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2006b4:	6a18      	ldr	r0, [r3, #32]
  2006b6:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  2006ba:	6218      	str	r0, [r3, #32]
  2006bc:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  2006be:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2006c0:	6259      	str	r1, [r3, #36]	; 0x24
  2006c2:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2006c4:	6821      	ldr	r1, [r4, #0]
  2006c6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  2006ca:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2006cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  2006ce:	f401 7140 	and.w	r1, r1, #768	; 0x300
  2006d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  2006d6:	d003      	beq.n	2006e0 <main+0x1d0>
    RCC->BDCR = RCC_BDCR_BDRST;
  2006d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  2006dc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2006de:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006e0:	4b58      	ldr	r3, [pc, #352]	; (200844 <main+0x334>)
  2006e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006e4:	461a      	mov	r2, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006e6:	f041 0119 	orr.w	r1, r1, #25
  2006ea:	6719      	str	r1, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006ec:	6f13      	ldr	r3, [r2, #112]	; 0x70
  2006ee:	079b      	lsls	r3, r3, #30
  2006f0:	d5fc      	bpl.n	2006ec <main+0x1dc>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  2006f2:	4c55      	ldr	r4, [pc, #340]	; (200848 <main+0x338>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2006f4:	f240 7eff 	movw	lr, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  2006f8:	2300      	movs	r3, #0
  2006fa:	4954      	ldr	r1, [pc, #336]	; (20084c <main+0x33c>)
  2006fc:	6866      	ldr	r6, [r4, #4]
  gpiop->ODR     = config->odr;
  2006fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
  200702:	f04f 35ff 	mov.w	r5, #4294967295
  gpiop->PUPDR   = config->pupdr;
  200706:	4f52      	ldr	r7, [pc, #328]	; (200850 <main+0x340>)
  200708:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  gpiop->ODR     = config->odr;
  20070c:	f64b 797e 	movw	r9, #49022	; 0xbf7e
  gpiop->AFRH    = config->afrh;
  200710:	f44f 0830 	mov.w	r8, #11534336	; 0xb00000
  gpiop->OSPEEDR = config->ospeedr;
  200714:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  200718:	6066      	str	r6, [r4, #4]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  20071a:	6b16      	ldr	r6, [r2, #48]	; 0x30
  20071c:	ea46 060e 	orr.w	r6, r6, lr
  200720:	6316      	str	r6, [r2, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200722:	6d14      	ldr	r4, [r2, #80]	; 0x50
  gpiop->AFRL    = config->afrl;
  200724:	4e4b      	ldr	r6, [pc, #300]	; (200854 <main+0x344>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200726:	ea44 040e 	orr.w	r4, r4, lr
  gpiop->MODER   = config->moder;
  20072a:	f640 2e08 	movw	lr, #2568	; 0xa08
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  20072e:	6514      	str	r4, [r2, #80]	; 0x50
  gpiop->AFRH    = config->afrh;
  200730:	4c49      	ldr	r4, [pc, #292]	; (200858 <main+0x348>)
  gpiop->OTYPER  = config->otyper;
  200732:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200734:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  200736:	60cf      	str	r7, [r1, #12]
  gpiop->OSPEEDR = config->ospeedr;
  200738:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  gpiop->ODR     = config->odr;
  20073c:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  20073e:	620e      	str	r6, [r1, #32]
  gpiop->AFRH    = config->afrh;
  200740:	2677      	movs	r6, #119	; 0x77
  200742:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200744:	4c45      	ldr	r4, [pc, #276]	; (20085c <main+0x34c>)
  200746:	600c      	str	r4, [r1, #0]
  200748:	f44f 2420 	mov.w	r4, #655360	; 0xa0000
  gpiop->OTYPER  = config->otyper;
  20074c:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200750:	f8c1 5408 	str.w	r5, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200754:	f105 458a 	add.w	r5, r5, #1157627904	; 0x45000000
  200758:	f105 1555 	add.w	r5, r5, #5570645	; 0x550055
  20075c:	f505 55a8 	add.w	r5, r5, #5376	; 0x1500
  200760:	f8c1 540c 	str.w	r5, [r1, #1036]	; 0x40c
  200764:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  200768:	f8c1 9414 	str.w	r9, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20076c:	f8c1 3420 	str.w	r3, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200770:	f8c1 8424 	str.w	r8, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200774:	f8df 8104 	ldr.w	r8, [pc, #260]	; 20087c <main+0x36c>
  gpiop->PUPDR   = config->pupdr;
  200778:	f8df 9104 	ldr.w	r9, [pc, #260]	; 200880 <main+0x370>
  gpiop->MODER   = config->moder;
  20077c:	f8c1 8400 	str.w	r8, [r1, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
  200784:	604b      	str	r3, [r1, #4]
  gpiop->MODER   = config->moder;
  200786:	f04f 6808 	mov.w	r8, #142606336	; 0x8800000
  gpiop->OSPEEDR = config->ospeedr;
  20078a:	f8c1 c008 	str.w	ip, [r1, #8]
  20078e:	f04f 0c0f 	mov.w	ip, #15
  gpiop->PUPDR   = config->pupdr;
  200792:	f8c1 900c 	str.w	r9, [r1, #12]
  gpiop->AFRL    = config->afrl;
  200796:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 200884 <main+0x374>
  gpiop->ODR     = config->odr;
  20079a:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  20079c:	f8c1 9020 	str.w	r9, [r1, #32]
  gpiop->PUPDR   = config->pupdr;
  2007a0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 200888 <main+0x378>
  gpiop->AFRH    = config->afrh;
  2007a4:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2007a6:	f8c1 e000 	str.w	lr, [r1]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  2007aa:	f04f 0e01 	mov.w	lr, #1
  gpiop->OTYPER  = config->otyper;
  2007ae:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  2007b2:	f8c1 7408 	str.w	r7, [r1, #1032]	; 0x408
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2007b6:	2707      	movs	r7, #7
  gpiop->PUPDR   = config->pupdr;
  2007b8:	f8c1 940c 	str.w	r9, [r1, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  2007bc:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2007c0:	f8c1 3420 	str.w	r3, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2007c4:	f8c1 6424 	str.w	r6, [r1, #1060]	; 0x424

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2007c8:	2680      	movs	r6, #128	; 0x80
  gpiop->MODER   = config->moder;
  2007ca:	f8c1 4400 	str.w	r4, [r1, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  2007ce:	4c24      	ldr	r4, [pc, #144]	; (200860 <main+0x350>)
  gpiop->OTYPER  = config->otyper;
  2007d0:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2007d4:	f8c1 4808 	str.w	r4, [r1, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2007d8:	f8c1 580c 	str.w	r5, [r1, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  2007dc:	4c21      	ldr	r4, [pc, #132]	; (200864 <main+0x354>)
  gpiop->ODR     = config->odr;
  2007de:	f8c1 0814 	str.w	r0, [r1, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2007e2:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2007e6:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2007ea:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  2007ee:	491e      	ldr	r1, [pc, #120]	; (200868 <main+0x358>)
  gpiop->OTYPER  = config->otyper;
  2007f0:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2007f2:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2007f4:	60e5      	str	r5, [r4, #12]
  gpiop->OTYPER  = config->otyper;
  2007f6:	491d      	ldr	r1, [pc, #116]	; (20086c <main+0x35c>)
  gpiop->ODR     = config->odr;
  2007f8:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2007fa:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  2007fc:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2007fe:	6023      	str	r3, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200800:	4c1b      	ldr	r4, [pc, #108]	; (200870 <main+0x360>)
  gpiop->OTYPER  = config->otyper;
  200802:	604b      	str	r3, [r1, #4]
  200804:	e042      	b.n	20088c <main+0x37c>
  200806:	bf00      	nop
  200808:	20000810 	.word	0x20000810
  20080c:	20000960 	.word	0x20000960
  200810:	00200311 	.word	0x00200311
  200814:	20000984 	.word	0x20000984
  200818:	20020010 	.word	0x20020010
  20081c:	20080000 	.word	0x20080000
  200820:	20000980 	.word	0x20000980
  200824:	e000ed00 	.word	0xe000ed00
  200828:	05fa0300 	.word	0x05fa0300
  20082c:	e0001000 	.word	0xe0001000
  200830:	c5acce55 	.word	0xc5acce55
  200834:	20000888 	.word	0x20000888
  200838:	002004f1 	.word	0x002004f1
  20083c:	002002e5 	.word	0x002002e5
  200840:	08000cc4 	.word	0x08000cc4
  200844:	40023800 	.word	0x40023800
  200848:	40007000 	.word	0x40007000
  20084c:	40020000 	.word	0x40020000
  200850:	40005551 	.word	0x40005551
  200854:	b0000bb0 	.word	0xb0000bb0
  200858:	000aaa0a 	.word	0x000aaa0a
  20085c:	2aae8028 	.word	0x2aae8028
  200860:	cffffff3 	.word	0xcffffff3
  200864:	40021400 	.word	0x40021400
  200868:	003fcfff 	.word	0x003fcfff
  20086c:	40021800 	.word	0x40021800
  200870:	3cccf000 	.word	0x3cccf000
  200874:	e000edf0 	.word	0xe000edf0
  200878:	08000cac 	.word	0x08000cac
  20087c:	18004001 	.word	0x18004001
  200880:	01555051 	.word	0x01555051
  200884:	00bb00b0 	.word	0x00bb00b0
  200888:	55505555 	.word	0x55505555
  gpiop->OSPEEDR = config->ospeedr;
  20088c:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  20088e:	4c4d      	ldr	r4, [pc, #308]	; (2009c4 <main+0x4b4>)
  200890:	60cc      	str	r4, [r1, #12]
  gpiop->AFRH    = config->afrh;
  200892:	4c4d      	ldr	r4, [pc, #308]	; (2009c8 <main+0x4b8>)
  gpiop->ODR     = config->odr;
  200894:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  200896:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
  200898:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->PUPDR   = config->pupdr;
  20089a:	4c4c      	ldr	r4, [pc, #304]	; (2009cc <main+0x4bc>)
  gpiop->MODER   = config->moder;
  20089c:	f8c1 8000 	str.w	r8, [r1]
  2008a0:	f04f 0820 	mov.w	r8, #32
  gpiop->OTYPER  = config->otyper;
  2008a4:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  2008a8:	f8c1 c408 	str.w	ip, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  2008ac:	f8c1 440c 	str.w	r4, [r1, #1036]	; 0x40c
  gpiop->OTYPER  = config->otyper;
  2008b0:	4c47      	ldr	r4, [pc, #284]	; (2009d0 <main+0x4c0>)
  gpiop->ODR     = config->odr;
  2008b2:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2008b6:	f8c1 3420 	str.w	r3, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2008ba:	f8c1 3424 	str.w	r3, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2008be:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2008c2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2008c4:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2008c6:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
  2008c8:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2008ca:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  2008cc:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2008ce:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
  2008d0:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
  2008d4:	f8c1 3c08 	str.w	r3, [r1, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
  2008d8:	f8c1 5c0c 	str.w	r5, [r1, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
  2008dc:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
  2008e0:	f8c1 3c20 	str.w	r3, [r1, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
  2008e4:	f8c1 3c24 	str.w	r3, [r1, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
  2008e8:	f8c1 3c00 	str.w	r3, [r1, #3072]	; 0xc00
  GPTD1.tim = STM32_TIM1;
  2008ec:	4939      	ldr	r1, [pc, #228]	; (2009d4 <main+0x4c4>)
  gpiop->OTYPER  = config->otyper;
  2008ee:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gptp->config = NULL;
  2008f2:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2008f4:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2008f8:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  2008fc:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  200900:	4835      	ldr	r0, [pc, #212]	; (2009d8 <main+0x4c8>)
  gpiop->AFRL    = config->afrl;
  200902:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  200906:	4d35      	ldr	r5, [pc, #212]	; (2009dc <main+0x4cc>)
  200908:	60c8      	str	r0, [r1, #12]
  gpiop->AFRH    = config->afrh;
  20090a:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  20090e:	4834      	ldr	r0, [pc, #208]	; (2009e0 <main+0x4d0>)
  gpiop->MODER   = config->moder;
  200910:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  200914:	4c33      	ldr	r4, [pc, #204]	; (2009e4 <main+0x4d4>)
  gptp->state  = GPT_STOP;
  200916:	f881 e000 	strb.w	lr, [r1]
  20091a:	6045      	str	r5, [r0, #4]
  SysTick->VAL = 0;
  20091c:	6083      	str	r3, [r0, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  20091e:	6007      	str	r7, [r0, #0]
  200920:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
  200924:	f388 8811 	msr	BASEPRI, r8
  if (gptp->state == GPT_STOP) {
  200928:	7808      	ldrb	r0, [r1, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  20092a:	4c2f      	ldr	r4, [pc, #188]	; (2009e8 <main+0x4d8>)
  20092c:	4570      	cmp	r0, lr
  20092e:	604c      	str	r4, [r1, #4]
  200930:	d115      	bne.n	20095e <main+0x44e>
      rccEnableTIM1(FALSE);
  200932:	6c55      	ldr	r5, [r2, #68]	; 0x44
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200934:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200938:	482c      	ldr	r0, [pc, #176]	; (2009ec <main+0x4dc>)
  20093a:	2770      	movs	r7, #112	; 0x70
  20093c:	ea45 050e 	orr.w	r5, r5, lr
      gptp->clock = STM32_TIMCLK2;
  200940:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 2009f4 <main+0x4e4>
      rccEnableTIM1(FALSE);
  200944:	6455      	str	r5, [r2, #68]	; 0x44
      rccResetTIM1();
  200946:	6a55      	ldr	r5, [r2, #36]	; 0x24
      gptp->clock = STM32_TIMCLK2;
  200948:	f8c1 e008 	str.w	lr, [r1, #8]
      rccResetTIM1();
  20094c:	f045 0501 	orr.w	r5, r5, #1
  200950:	6255      	str	r5, [r2, #36]	; 0x24
  200952:	6253      	str	r3, [r2, #36]	; 0x24
  200954:	f880 7319 	strb.w	r7, [r0, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200958:	f8c0 6180 	str.w	r6, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20095c:	6006      	str	r6, [r0, #0]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  20095e:	688b      	ldr	r3, [r1, #8]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200960:	2200      	movs	r2, #0
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  200962:	6826      	ldr	r6, [r4, #0]
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  200964:	2702      	movs	r7, #2
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  200966:	68e5      	ldr	r5, [r4, #12]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200968:	68c8      	ldr	r0, [r1, #12]
  gptp->tim->CR2 = gptp->config->cr2;
  20096a:	68a4      	ldr	r4, [r4, #8]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  20096c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200970:	6002      	str	r2, [r0, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  200972:	6044      	str	r4, [r0, #4]
  200974:	700f      	strb	r7, [r1, #0]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  200976:	fbb3 f3f6 	udiv	r3, r3, r6
  20097a:	3b01      	subs	r3, #1
  20097c:	b29b      	uxth	r3, r3
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  20097e:	6283      	str	r3, [r0, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200980:	6102      	str	r2, [r0, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  200982:	60c5      	str	r5, [r0, #12]
  200984:	f382 8811 	msr	BASEPRI, r2
  200988:	2320      	movs	r3, #32
  20098a:	f383 8811 	msr	BASEPRI, r3
  if (NULL != gptp->config->callback)
  20098e:	6848      	ldr	r0, [r1, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  200990:	2603      	movs	r6, #3
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  200992:	68cb      	ldr	r3, [r1, #12]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  200994:	2401      	movs	r4, #1
  if (NULL != gptp->config->callback)
  200996:	6840      	ldr	r0, [r0, #4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  200998:	4d15      	ldr	r5, [pc, #84]	; (2009f0 <main+0x4e0>)
  20099a:	700e      	strb	r6, [r1, #0]
  20099c:	62dd      	str	r5, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  20099e:	615c      	str	r4, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  2009a0:	625a      	str	r2, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2009a2:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  2009a4:	b110      	cbz	r0, 2009ac <main+0x49c>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  2009a6:	68da      	ldr	r2, [r3, #12]
  2009a8:	4322      	orrs	r2, r4
  2009aa:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  2009ac:	2285      	movs	r2, #133	; 0x85
  2009ae:	2000      	movs	r0, #0
  2009b0:	601a      	str	r2, [r3, #0]
  2009b2:	f380 8811 	msr	BASEPRI, r0
    GPTDriver *delayDriver    = &GPTD1;

    gptStart( delayDriver, &GPT1cfg );
    gptStartContinuous( delayDriver, 100000 );

}
  2009b6:	b007      	add	sp, #28
  2009b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  tp->state = CH_STATE_READY;
  2009bc:	f880 6020 	strb.w	r6, [r0, #32]
  2009c0:	e7fe      	b.n	2009c0 <main+0x4b0>
  2009c2:	bf00      	nop
  2009c4:	51155555 	.word	0x51155555
  2009c8:	00b0b000 	.word	0x00b0b000
  2009cc:	55555550 	.word	0x55555550
  2009d0:	40022000 	.word	0x40022000
  2009d4:	20000800 	.word	0x20000800
  2009d8:	40010000 	.word	0x40010000
  2009dc:	00034bbf 	.word	0x00034bbf
  2009e0:	e000e010 	.word	0xe000e010
  2009e4:	e000ed00 	.word	0xe000ed00
  2009e8:	20020000 	.word	0x20020000
  2009ec:	e000e100 	.word	0xe000e100
  2009f0:	000186a0 	.word	0x000186a0
  2009f4:	0cdfe600 	.word	0x0cdfe600
	...

00200a00 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  200a00:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200a02:	4b33      	ldr	r3, [pc, #204]	; (200ad0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  200a04:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  200a08:	4a32      	ldr	r2, [pc, #200]	; (200ad4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200a0a:	4c33      	ldr	r4, [pc, #204]	; (200ad8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200a0c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200a0e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  200a10:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  200a12:	681a      	ldr	r2, [r3, #0]
  200a14:	f042 0201 	orr.w	r2, r2, #1
  200a18:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200a1a:	680b      	ldr	r3, [r1, #0]
  200a1c:	079b      	lsls	r3, r3, #30
  200a1e:	d5fc      	bpl.n	200a1a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200a20:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200a22:	4a2b      	ldr	r2, [pc, #172]	; (200ad0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200a24:	f023 0303 	bic.w	r3, r3, #3
  200a28:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  200a2a:	688b      	ldr	r3, [r1, #8]
  200a2c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200a2e:	6893      	ldr	r3, [r2, #8]
  200a30:	f013 030c 	ands.w	r3, r3, #12
  200a34:	d1fb      	bne.n	200a2e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200a36:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200a38:	4925      	ldr	r1, [pc, #148]	; (200ad0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200a3a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  200a3e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  200a40:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  200a42:	6813      	ldr	r3, [r2, #0]
  200a44:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  200a48:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200a4a:	680b      	ldr	r3, [r1, #0]
  200a4c:	039d      	lsls	r5, r3, #14
  200a4e:	d5fc      	bpl.n	200a4a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200a50:	4b22      	ldr	r3, [pc, #136]	; (200adc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200a52:	4820      	ldr	r0, [pc, #128]	; (200ad4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200a54:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  200a56:	680b      	ldr	r3, [r1, #0]
  200a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  200a5c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200a5e:	6843      	ldr	r3, [r0, #4]
  200a60:	045c      	lsls	r4, r3, #17
  200a62:	d5fc      	bpl.n	200a5e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  200a64:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200a66:	4a1b      	ldr	r2, [pc, #108]	; (200ad4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  200a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200a6c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200a6e:	6853      	ldr	r3, [r2, #4]
  200a70:	03d9      	lsls	r1, r3, #15
  200a72:	d5fc      	bpl.n	200a6e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200a74:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200a76:	4917      	ldr	r1, [pc, #92]	; (200ad4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200a7c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200a7e:	684b      	ldr	r3, [r1, #4]
  200a80:	039a      	lsls	r2, r3, #14
  200a82:	d5fc      	bpl.n	200a7e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  200a84:	4a12      	ldr	r2, [pc, #72]	; (200ad0 <__early_init+0xd0>)
  200a86:	6813      	ldr	r3, [r2, #0]
  200a88:	019b      	lsls	r3, r3, #6
  200a8a:	d5fc      	bpl.n	200a86 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200a8c:	4b14      	ldr	r3, [pc, #80]	; (200ae0 <__early_init+0xe0>)
  200a8e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200a92:	4d14      	ldr	r5, [pc, #80]	; (200ae4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  200a94:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200a98:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200a9a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  200a9c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200aa0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200aa4:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200aa6:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200aa8:	4909      	ldr	r1, [pc, #36]	; (200ad0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200aaa:	f043 0302 	orr.w	r3, r3, #2
  200aae:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200ab0:	688b      	ldr	r3, [r1, #8]
  200ab2:	f003 030c 	and.w	r3, r3, #12
  200ab6:	2b08      	cmp	r3, #8
  200ab8:	d1fa      	bne.n	200ab0 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  200aba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  200abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  200ac0:	644b      	str	r3, [r1, #68]	; 0x44
  200ac2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  200ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  200ac8:	bc30      	pop	{r4, r5}
  200aca:	664b      	str	r3, [r1, #100]	; 0x64
  200acc:	4770      	bx	lr
  200ace:	bf00      	nop
  200ad0:	40023800 	.word	0x40023800
  200ad4:	40007000 	.word	0x40007000
  200ad8:	10000400 	.word	0x10000400
  200adc:	09406c08 	.word	0x09406c08
  200ae0:	40023c00 	.word	0x40023c00
  200ae4:	30999400 	.word	0x30999400
	...

00200af0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
  200af0:	b4f0      	push	{r4, r5, r6, r7}
  200af2:	2320      	movs	r3, #32
  200af4:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
  200af8:	4f1b      	ldr	r7, [pc, #108]	; (200b68 <chThdExit+0x78>)
  200afa:	69bd      	ldr	r5, [r7, #24]
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
  200afc:	f105 0628 	add.w	r6, r5, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  200b00:	6aac      	ldr	r4, [r5, #40]	; 0x28
  tp->u.exitcode = msg;
  200b02:	6268      	str	r0, [r5, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  200b04:	42b4      	cmp	r4, r6
  200b06:	d012      	beq.n	200b2e <chThdExit+0x3e>
  200b08:	2000      	movs	r0, #0
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
  200b0a:	6822      	ldr	r2, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
  200b0c:	4b16      	ldr	r3, [pc, #88]	; (200b68 <chThdExit+0x78>)
  200b0e:	68a1      	ldr	r1, [r4, #8]
  200b10:	62aa      	str	r2, [r5, #40]	; 0x28
  tp->state = CH_STATE_READY;
  200b12:	f884 0020 	strb.w	r0, [r4, #32]
    cp = cp->queue.next;
  200b16:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200b18:	689a      	ldr	r2, [r3, #8]
  200b1a:	428a      	cmp	r2, r1
  200b1c:	d2fb      	bcs.n	200b16 <chThdExit+0x26>
  tp->queue.prev             = cp->queue.prev;
  200b1e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
  200b20:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200b22:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200b24:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200b26:	605c      	str	r4, [r3, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
  200b28:	6aac      	ldr	r4, [r5, #40]	; 0x28
  200b2a:	42b4      	cmp	r4, r6
  200b2c:	d1ed      	bne.n	200b0a <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
  200b2e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  200b32:	b943      	cbnz	r3, 200b46 <chThdExit+0x56>
  200b34:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  200b38:	079b      	lsls	r3, r3, #30
  200b3a:	d104      	bne.n	200b46 <chThdExit+0x56>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
  200b3c:	692a      	ldr	r2, [r5, #16]
  200b3e:	696b      	ldr	r3, [r5, #20]
  200b40:	611a      	str	r2, [r3, #16]
  200b42:	692a      	ldr	r2, [r5, #16]
  200b44:	6153      	str	r3, [r2, #20]
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
  200b46:	683b      	ldr	r3, [r7, #0]
  otp->state = newstate;
  200b48:	220f      	movs	r2, #15
  thread_t *otp = currp;
  200b4a:	69b9      	ldr	r1, [r7, #24]
  currp->state = CH_STATE_CURRENT;
  200b4c:	2401      	movs	r4, #1
  chSysSwitch(currp, otp);
  200b4e:	4618      	mov	r0, r3
  otp->state = newstate;
  200b50:	f881 2020 	strb.w	r2, [r1, #32]

  tqp->next             = tp->queue.next;
  200b54:	681a      	ldr	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  200b56:	6057      	str	r7, [r2, #4]
  tqp->next             = tp->queue.next;
  200b58:	603a      	str	r2, [r7, #0]
  currp->state = CH_STATE_CURRENT;
  200b5a:	f883 4020 	strb.w	r4, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200b5e:	61bb      	str	r3, [r7, #24]
}
  200b60:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(currp, otp);
  200b62:	f7ff bbb7 	b.w	2002d4 <_port_switch>
  200b66:	bf00      	nop
  200b68:	20000810 	.word	0x20000810
  200b6c:	00000000 	.word	0x00000000

00200b70 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  200b70:	4a0e      	ldr	r2, [pc, #56]	; (200bac <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  200b72:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  200b74:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  200b76:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  200b78:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  200b7a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  200b7c:	6994      	ldr	r4, [r2, #24]
  200b7e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  200b80:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  200b82:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  200b86:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  200b8a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200b8c:	6190      	str	r0, [r2, #24]
  200b8e:	e000      	b.n	200b92 <chSchDoReschedule+0x22>
  200b90:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  200b92:	689a      	ldr	r2, [r3, #8]
  200b94:	4291      	cmp	r1, r2
  200b96:	d3fb      	bcc.n	200b90 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  200b98:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  200b9a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  200b9c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200b9e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200ba0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200ba2:	605c      	str	r4, [r3, #4]
}
  200ba4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200ba6:	f7ff bb95 	b.w	2002d4 <_port_switch>
  200baa:	bf00      	nop
  200bac:	20000810 	.word	0x20000810

00200bb0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  200bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  200bb2:	4f12      	ldr	r7, [pc, #72]	; (200bfc <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  200bb4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  200bb6:	4d12      	ldr	r5, [pc, #72]	; (200c00 <__init_ram_areas+0x50>)
  200bb8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  200bbc:	4c11      	ldr	r4, [pc, #68]	; (200c04 <__init_ram_areas+0x54>)
  200bbe:	4b12      	ldr	r3, [pc, #72]	; (200c08 <__init_ram_areas+0x58>)
  200bc0:	4912      	ldr	r1, [pc, #72]	; (200c0c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  200bc2:	429c      	cmp	r4, r3
  200bc4:	d911      	bls.n	200bea <__init_ram_areas+0x3a>
  200bc6:	3904      	subs	r1, #4
  200bc8:	461a      	mov	r2, r3
      *p = *tp;
  200bca:	f851 0f04 	ldr.w	r0, [r1, #4]!
  200bce:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  200bd2:	4294      	cmp	r4, r2
  200bd4:	d8f9      	bhi.n	200bca <__init_ram_areas+0x1a>
  200bd6:	43da      	mvns	r2, r3
  200bd8:	4414      	add	r4, r2
  200bda:	f024 0403 	bic.w	r4, r4, #3
  200bde:	3404      	adds	r4, #4
  200be0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  200be2:	429d      	cmp	r5, r3
  200be4:	d903      	bls.n	200bee <__init_ram_areas+0x3e>
      *p = 0;
  200be6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  200bea:	429d      	cmp	r5, r3
  200bec:	d8fb      	bhi.n	200be6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  200bee:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  200bf0:	4577      	cmp	r7, lr
  200bf2:	d202      	bcs.n	200bfa <__init_ram_areas+0x4a>
  200bf4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  200bf8:	e7e3      	b.n	200bc2 <__init_ram_areas+0x12>
  200bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200bfc:	08000ccc 	.word	0x08000ccc
  200c00:	20020010 	.word	0x20020010
  200c04:	20020010 	.word	0x20020010
  200c08:	20020010 	.word	0x20020010
  200c0c:	08000d5c 	.word	0x08000d5c

00200c10 <__default_exit>:
void __default_exit(void) {
  200c10:	e7fe      	b.n	200c10 <__default_exit>
  200c12:	bf00      	nop
	...

00200c20 <__late_init>:
void __late_init(void) {}
  200c20:	4770      	bx	lr
  200c22:	bf00      	nop
	...

00200c30 <__core_init>:
void __core_init(void) {
  200c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  200c32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200c36:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  200c3a:	4c1b      	ldr	r4, [pc, #108]	; (200ca8 <__core_init+0x78>)
  200c3c:	2200      	movs	r2, #0
  200c3e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  200c42:	6963      	ldr	r3, [r4, #20]
  200c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200c48:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  200c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200c4e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  200c52:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  200c56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  200c5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  200c5e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  200c62:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  200c66:	f3c3 334e 	ubfx	r3, r3, #13, #15
  200c6a:	07b7      	lsls	r7, r6, #30
  200c6c:	015d      	lsls	r5, r3, #5
  200c6e:	ea05 000e 	and.w	r0, r5, lr
  200c72:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  200c74:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200c76:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  200c7a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200c7c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  200c80:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  200c84:	1c53      	adds	r3, r2, #1
  200c86:	d1f6      	bne.n	200c76 <__core_init+0x46>
  200c88:	3d20      	subs	r5, #32
    } while(sets--);
  200c8a:	f115 0f20 	cmn.w	r5, #32
  200c8e:	d1ee      	bne.n	200c6e <__core_init+0x3e>
  200c90:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  200c94:	6963      	ldr	r3, [r4, #20]
  200c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200c9a:	6163      	str	r3, [r4, #20]
  200c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200ca0:	f3bf 8f6f 	isb	sy
  200ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200ca6:	bf00      	nop
  200ca8:	e000ed00 	.word	0xe000ed00
