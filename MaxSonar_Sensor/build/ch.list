
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fd5f 	bl	201ce0 <__core_init>
  200222:	f002 fab5 	bl	202790 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fcf9 	bl	201c60 <__init_ram_areas>
  20026e:	f001 fd2f 	bl	201cd0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f001 fd9d 	bl	201dc0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 bd13 	b.w	201cc0 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08003270 	.word	0x08003270
  2002b4:	20020000 	.word	0x20020000
  2002b8:	2002059c 	.word	0x2002059c
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000bc0 	.word	0x20000bc0
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 faae 	bl	201850 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 fad4 	bl	2018a0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_dmul>:
  20066c:	b570      	push	{r4, r5, r6, lr}
  20066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  20067a:	bf1d      	ittte	ne
  20067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200680:	ea94 0f0c 	teqne	r4, ip
  200684:	ea95 0f0c 	teqne	r5, ip
  200688:	f000 f8de 	bleq	200848 <__aeabi_dmul+0x1dc>
  20068c:	442c      	add	r4, r5
  20068e:	ea81 0603 	eor.w	r6, r1, r3
  200692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  200696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  20069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  20069e:	bf18      	it	ne
  2006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2006ac:	d038      	beq.n	200720 <__aeabi_dmul+0xb4>
  2006ae:	fba0 ce02 	umull	ip, lr, r0, r2
  2006b2:	f04f 0500 	mov.w	r5, #0
  2006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2006be:	fbe0 e503 	umlal	lr, r5, r0, r3
  2006c2:	f04f 0600 	mov.w	r6, #0
  2006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2006ca:	f09c 0f00 	teq	ip, #0
  2006ce:	bf18      	it	ne
  2006d0:	f04e 0e01 	orrne.w	lr, lr, #1
  2006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  2006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  2006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  2006e0:	d204      	bcs.n	2006ec <__aeabi_dmul+0x80>
  2006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  2006e6:	416d      	adcs	r5, r5
  2006e8:	eb46 0606 	adc.w	r6, r6, r6
  2006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  2006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  2006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  2006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  2006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200704:	bf88      	it	hi
  200706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20070a:	d81e      	bhi.n	20074a <__aeabi_dmul+0xde>
  20070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200710:	bf08      	it	eq
  200712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200716:	f150 0000 	adcs.w	r0, r0, #0
  20071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20071e:	bd70      	pop	{r4, r5, r6, pc}
  200720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200724:	ea46 0101 	orr.w	r1, r6, r1
  200728:	ea40 0002 	orr.w	r0, r0, r2
  20072c:	ea81 0103 	eor.w	r1, r1, r3
  200730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200734:	bfc2      	ittt	gt
  200736:	ebd4 050c 	rsbsgt	r5, r4, ip
  20073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20073e:	bd70      	popgt	{r4, r5, r6, pc}
  200740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200744:	f04f 0e00 	mov.w	lr, #0
  200748:	3c01      	subs	r4, #1
  20074a:	f300 80ab 	bgt.w	2008a4 <__aeabi_dmul+0x238>
  20074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200752:	bfde      	ittt	le
  200754:	2000      	movle	r0, #0
  200756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20075a:	bd70      	pople	{r4, r5, r6, pc}
  20075c:	f1c4 0400 	rsb	r4, r4, #0
  200760:	3c20      	subs	r4, #32
  200762:	da35      	bge.n	2007d0 <__aeabi_dmul+0x164>
  200764:	340c      	adds	r4, #12
  200766:	dc1b      	bgt.n	2007a0 <__aeabi_dmul+0x134>
  200768:	f104 0414 	add.w	r4, r4, #20
  20076c:	f1c4 0520 	rsb	r5, r4, #32
  200770:	fa00 f305 	lsl.w	r3, r0, r5
  200774:	fa20 f004 	lsr.w	r0, r0, r4
  200778:	fa01 f205 	lsl.w	r2, r1, r5
  20077c:	ea40 0002 	orr.w	r0, r0, r2
  200780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  200784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  20078c:	fa21 f604 	lsr.w	r6, r1, r4
  200790:	eb42 0106 	adc.w	r1, r2, r6
  200794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200798:	bf08      	it	eq
  20079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20079e:	bd70      	pop	{r4, r5, r6, pc}
  2007a0:	f1c4 040c 	rsb	r4, r4, #12
  2007a4:	f1c4 0520 	rsb	r5, r4, #32
  2007a8:	fa00 f304 	lsl.w	r3, r0, r4
  2007ac:	fa20 f005 	lsr.w	r0, r0, r5
  2007b0:	fa01 f204 	lsl.w	r2, r1, r4
  2007b4:	ea40 0002 	orr.w	r0, r0, r2
  2007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2007c0:	f141 0100 	adc.w	r1, r1, #0
  2007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2007c8:	bf08      	it	eq
  2007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2007ce:	bd70      	pop	{r4, r5, r6, pc}
  2007d0:	f1c4 0520 	rsb	r5, r4, #32
  2007d4:	fa00 f205 	lsl.w	r2, r0, r5
  2007d8:	ea4e 0e02 	orr.w	lr, lr, r2
  2007dc:	fa20 f304 	lsr.w	r3, r0, r4
  2007e0:	fa01 f205 	lsl.w	r2, r1, r5
  2007e4:	ea43 0302 	orr.w	r3, r3, r2
  2007e8:	fa21 f004 	lsr.w	r0, r1, r4
  2007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007f0:	fa21 f204 	lsr.w	r2, r1, r4
  2007f4:	ea20 0002 	bic.w	r0, r0, r2
  2007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  2007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200800:	bf08      	it	eq
  200802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200806:	bd70      	pop	{r4, r5, r6, pc}
  200808:	f094 0f00 	teq	r4, #0
  20080c:	d10f      	bne.n	20082e <__aeabi_dmul+0x1c2>
  20080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200812:	0040      	lsls	r0, r0, #1
  200814:	eb41 0101 	adc.w	r1, r1, r1
  200818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20081c:	bf08      	it	eq
  20081e:	3c01      	subeq	r4, #1
  200820:	d0f7      	beq.n	200812 <__aeabi_dmul+0x1a6>
  200822:	ea41 0106 	orr.w	r1, r1, r6
  200826:	f095 0f00 	teq	r5, #0
  20082a:	bf18      	it	ne
  20082c:	4770      	bxne	lr
  20082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200832:	0052      	lsls	r2, r2, #1
  200834:	eb43 0303 	adc.w	r3, r3, r3
  200838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20083c:	bf08      	it	eq
  20083e:	3d01      	subeq	r5, #1
  200840:	d0f7      	beq.n	200832 <__aeabi_dmul+0x1c6>
  200842:	ea43 0306 	orr.w	r3, r3, r6
  200846:	4770      	bx	lr
  200848:	ea94 0f0c 	teq	r4, ip
  20084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200850:	bf18      	it	ne
  200852:	ea95 0f0c 	teqne	r5, ip
  200856:	d00c      	beq.n	200872 <__aeabi_dmul+0x206>
  200858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20085c:	bf18      	it	ne
  20085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200862:	d1d1      	bne.n	200808 <__aeabi_dmul+0x19c>
  200864:	ea81 0103 	eor.w	r1, r1, r3
  200868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20086c:	f04f 0000 	mov.w	r0, #0
  200870:	bd70      	pop	{r4, r5, r6, pc}
  200872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200876:	bf06      	itte	eq
  200878:	4610      	moveq	r0, r2
  20087a:	4619      	moveq	r1, r3
  20087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200880:	d019      	beq.n	2008b6 <__aeabi_dmul+0x24a>
  200882:	ea94 0f0c 	teq	r4, ip
  200886:	d102      	bne.n	20088e <__aeabi_dmul+0x222>
  200888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  20088c:	d113      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  20088e:	ea95 0f0c 	teq	r5, ip
  200892:	d105      	bne.n	2008a0 <__aeabi_dmul+0x234>
  200894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  200898:	bf1c      	itt	ne
  20089a:	4610      	movne	r0, r2
  20089c:	4619      	movne	r1, r3
  20089e:	d10a      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  2008a0:	ea81 0103 	eor.w	r1, r1, r3
  2008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2008b0:	f04f 0000 	mov.w	r0, #0
  2008b4:	bd70      	pop	{r4, r5, r6, pc}
  2008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2008be:	bd70      	pop	{r4, r5, r6, pc}

002008c0 <__aeabi_ddiv>:
  2008c0:	b570      	push	{r4, r5, r6, lr}
  2008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2008ce:	bf1d      	ittte	ne
  2008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2008d4:	ea94 0f0c 	teqne	r4, ip
  2008d8:	ea95 0f0c 	teqne	r5, ip
  2008dc:	f000 f8a7 	bleq	200a2e <__aeabi_ddiv+0x16e>
  2008e0:	eba4 0405 	sub.w	r4, r4, r5
  2008e4:	ea81 0e03 	eor.w	lr, r1, r3
  2008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  2008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2008f0:	f000 8088 	beq.w	200a04 <__aeabi_ddiv+0x144>
  2008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  2008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200918:	429d      	cmp	r5, r3
  20091a:	bf08      	it	eq
  20091c:	4296      	cmpeq	r6, r2
  20091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200926:	d202      	bcs.n	20092e <__aeabi_ddiv+0x6e>
  200928:	085b      	lsrs	r3, r3, #1
  20092a:	ea4f 0232 	mov.w	r2, r2, rrx
  20092e:	1ab6      	subs	r6, r6, r2
  200930:	eb65 0503 	sbc.w	r5, r5, r3
  200934:	085b      	lsrs	r3, r3, #1
  200936:	ea4f 0232 	mov.w	r2, r2, rrx
  20093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200942:	ebb6 0e02 	subs.w	lr, r6, r2
  200946:	eb75 0e03 	sbcs.w	lr, r5, r3
  20094a:	bf22      	ittt	cs
  20094c:	1ab6      	subcs	r6, r6, r2
  20094e:	4675      	movcs	r5, lr
  200950:	ea40 000c 	orrcs.w	r0, r0, ip
  200954:	085b      	lsrs	r3, r3, #1
  200956:	ea4f 0232 	mov.w	r2, r2, rrx
  20095a:	ebb6 0e02 	subs.w	lr, r6, r2
  20095e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200962:	bf22      	ittt	cs
  200964:	1ab6      	subcs	r6, r6, r2
  200966:	4675      	movcs	r5, lr
  200968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20096c:	085b      	lsrs	r3, r3, #1
  20096e:	ea4f 0232 	mov.w	r2, r2, rrx
  200972:	ebb6 0e02 	subs.w	lr, r6, r2
  200976:	eb75 0e03 	sbcs.w	lr, r5, r3
  20097a:	bf22      	ittt	cs
  20097c:	1ab6      	subcs	r6, r6, r2
  20097e:	4675      	movcs	r5, lr
  200980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200984:	085b      	lsrs	r3, r3, #1
  200986:	ea4f 0232 	mov.w	r2, r2, rrx
  20098a:	ebb6 0e02 	subs.w	lr, r6, r2
  20098e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200992:	bf22      	ittt	cs
  200994:	1ab6      	subcs	r6, r6, r2
  200996:	4675      	movcs	r5, lr
  200998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  20099c:	ea55 0e06 	orrs.w	lr, r5, r6
  2009a0:	d018      	beq.n	2009d4 <__aeabi_ddiv+0x114>
  2009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2009be:	d1c0      	bne.n	200942 <__aeabi_ddiv+0x82>
  2009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009c4:	d10b      	bne.n	2009de <__aeabi_ddiv+0x11e>
  2009c6:	ea41 0100 	orr.w	r1, r1, r0
  2009ca:	f04f 0000 	mov.w	r0, #0
  2009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  2009d2:	e7b6      	b.n	200942 <__aeabi_ddiv+0x82>
  2009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009d8:	bf04      	itt	eq
  2009da:	4301      	orreq	r1, r0
  2009dc:	2000      	moveq	r0, #0
  2009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  2009e2:	bf88      	it	hi
  2009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  2009e8:	f63f aeaf 	bhi.w	20074a <__aeabi_dmul+0xde>
  2009ec:	ebb5 0c03 	subs.w	ip, r5, r3
  2009f0:	bf04      	itt	eq
  2009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  2009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  2009fa:	f150 0000 	adcs.w	r0, r0, #0
  2009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200a02:	bd70      	pop	{r4, r5, r6, pc}
  200a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200a10:	bfc2      	ittt	gt
  200a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  200a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200a1a:	bd70      	popgt	{r4, r5, r6, pc}
  200a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200a20:	f04f 0e00 	mov.w	lr, #0
  200a24:	3c01      	subs	r4, #1
  200a26:	e690      	b.n	20074a <__aeabi_dmul+0xde>
  200a28:	ea45 0e06 	orr.w	lr, r5, r6
  200a2c:	e68d      	b.n	20074a <__aeabi_dmul+0xde>
  200a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200a32:	ea94 0f0c 	teq	r4, ip
  200a36:	bf08      	it	eq
  200a38:	ea95 0f0c 	teqeq	r5, ip
  200a3c:	f43f af3b 	beq.w	2008b6 <__aeabi_dmul+0x24a>
  200a40:	ea94 0f0c 	teq	r4, ip
  200a44:	d10a      	bne.n	200a5c <__aeabi_ddiv+0x19c>
  200a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200a4a:	f47f af34 	bne.w	2008b6 <__aeabi_dmul+0x24a>
  200a4e:	ea95 0f0c 	teq	r5, ip
  200a52:	f47f af25 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a56:	4610      	mov	r0, r2
  200a58:	4619      	mov	r1, r3
  200a5a:	e72c      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a5c:	ea95 0f0c 	teq	r5, ip
  200a60:	d106      	bne.n	200a70 <__aeabi_ddiv+0x1b0>
  200a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a66:	f43f aefd 	beq.w	200864 <__aeabi_dmul+0x1f8>
  200a6a:	4610      	mov	r0, r2
  200a6c:	4619      	mov	r1, r3
  200a6e:	e722      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200a74:	bf18      	it	ne
  200a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200a7a:	f47f aec5 	bne.w	200808 <__aeabi_dmul+0x19c>
  200a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200a82:	f47f af0d 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200a8a:	f47f aeeb 	bne.w	200864 <__aeabi_dmul+0x1f8>
  200a8e:	e712      	b.n	2008b6 <__aeabi_dmul+0x24a>

00200a90 <__aeabi_d2iz>:
  200a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  200a98:	d215      	bcs.n	200ac6 <__aeabi_d2iz+0x36>
  200a9a:	d511      	bpl.n	200ac0 <__aeabi_d2iz+0x30>
  200a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  200aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  200aa4:	d912      	bls.n	200acc <__aeabi_d2iz+0x3c>
  200aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  200ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200ab6:	fa23 f002 	lsr.w	r0, r3, r2
  200aba:	bf18      	it	ne
  200abc:	4240      	negne	r0, r0
  200abe:	4770      	bx	lr
  200ac0:	f04f 0000 	mov.w	r0, #0
  200ac4:	4770      	bx	lr
  200ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  200aca:	d105      	bne.n	200ad8 <__aeabi_d2iz+0x48>
  200acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  200ad0:	bf08      	it	eq
  200ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200ad6:	4770      	bx	lr
  200ad8:	f04f 0000 	mov.w	r0, #0
  200adc:	4770      	bx	lr
  200ade:	bf00      	nop

00200ae0 <__aeabi_frsub>:
  200ae0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  200ae4:	e002      	b.n	200aec <__addsf3>
  200ae6:	bf00      	nop

00200ae8 <__aeabi_fsub>:
  200ae8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00200aec <__addsf3>:
  200aec:	0042      	lsls	r2, r0, #1
  200aee:	bf1f      	itttt	ne
  200af0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  200af4:	ea92 0f03 	teqne	r2, r3
  200af8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  200afc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200b00:	d06a      	beq.n	200bd8 <__addsf3+0xec>
  200b02:	ea4f 6212 	mov.w	r2, r2, lsr #24
  200b06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  200b0a:	bfc1      	itttt	gt
  200b0c:	18d2      	addgt	r2, r2, r3
  200b0e:	4041      	eorgt	r1, r0
  200b10:	4048      	eorgt	r0, r1
  200b12:	4041      	eorgt	r1, r0
  200b14:	bfb8      	it	lt
  200b16:	425b      	neglt	r3, r3
  200b18:	2b19      	cmp	r3, #25
  200b1a:	bf88      	it	hi
  200b1c:	4770      	bxhi	lr
  200b1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  200b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200b26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  200b2a:	bf18      	it	ne
  200b2c:	4240      	negne	r0, r0
  200b2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200b32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  200b36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  200b3a:	bf18      	it	ne
  200b3c:	4249      	negne	r1, r1
  200b3e:	ea92 0f03 	teq	r2, r3
  200b42:	d03f      	beq.n	200bc4 <__addsf3+0xd8>
  200b44:	f1a2 0201 	sub.w	r2, r2, #1
  200b48:	fa41 fc03 	asr.w	ip, r1, r3
  200b4c:	eb10 000c 	adds.w	r0, r0, ip
  200b50:	f1c3 0320 	rsb	r3, r3, #32
  200b54:	fa01 f103 	lsl.w	r1, r1, r3
  200b58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  200b5c:	d502      	bpl.n	200b64 <__addsf3+0x78>
  200b5e:	4249      	negs	r1, r1
  200b60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  200b64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  200b68:	d313      	bcc.n	200b92 <__addsf3+0xa6>
  200b6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  200b6e:	d306      	bcc.n	200b7e <__addsf3+0x92>
  200b70:	0840      	lsrs	r0, r0, #1
  200b72:	ea4f 0131 	mov.w	r1, r1, rrx
  200b76:	f102 0201 	add.w	r2, r2, #1
  200b7a:	2afe      	cmp	r2, #254	; 0xfe
  200b7c:	d251      	bcs.n	200c22 <__addsf3+0x136>
  200b7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  200b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200b86:	bf08      	it	eq
  200b88:	f020 0001 	biceq.w	r0, r0, #1
  200b8c:	ea40 0003 	orr.w	r0, r0, r3
  200b90:	4770      	bx	lr
  200b92:	0049      	lsls	r1, r1, #1
  200b94:	eb40 0000 	adc.w	r0, r0, r0
  200b98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  200b9c:	f1a2 0201 	sub.w	r2, r2, #1
  200ba0:	d1ed      	bne.n	200b7e <__addsf3+0x92>
  200ba2:	fab0 fc80 	clz	ip, r0
  200ba6:	f1ac 0c08 	sub.w	ip, ip, #8
  200baa:	ebb2 020c 	subs.w	r2, r2, ip
  200bae:	fa00 f00c 	lsl.w	r0, r0, ip
  200bb2:	bfaa      	itet	ge
  200bb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  200bb8:	4252      	neglt	r2, r2
  200bba:	4318      	orrge	r0, r3
  200bbc:	bfbc      	itt	lt
  200bbe:	40d0      	lsrlt	r0, r2
  200bc0:	4318      	orrlt	r0, r3
  200bc2:	4770      	bx	lr
  200bc4:	f092 0f00 	teq	r2, #0
  200bc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  200bcc:	bf06      	itte	eq
  200bce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  200bd2:	3201      	addeq	r2, #1
  200bd4:	3b01      	subne	r3, #1
  200bd6:	e7b5      	b.n	200b44 <__addsf3+0x58>
  200bd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  200bdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  200be0:	bf18      	it	ne
  200be2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200be6:	d021      	beq.n	200c2c <__addsf3+0x140>
  200be8:	ea92 0f03 	teq	r2, r3
  200bec:	d004      	beq.n	200bf8 <__addsf3+0x10c>
  200bee:	f092 0f00 	teq	r2, #0
  200bf2:	bf08      	it	eq
  200bf4:	4608      	moveq	r0, r1
  200bf6:	4770      	bx	lr
  200bf8:	ea90 0f01 	teq	r0, r1
  200bfc:	bf1c      	itt	ne
  200bfe:	2000      	movne	r0, #0
  200c00:	4770      	bxne	lr
  200c02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  200c06:	d104      	bne.n	200c12 <__addsf3+0x126>
  200c08:	0040      	lsls	r0, r0, #1
  200c0a:	bf28      	it	cs
  200c0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  200c10:	4770      	bx	lr
  200c12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  200c16:	bf3c      	itt	cc
  200c18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  200c1c:	4770      	bxcc	lr
  200c1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  200c22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  200c26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200c2a:	4770      	bx	lr
  200c2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  200c30:	bf16      	itet	ne
  200c32:	4608      	movne	r0, r1
  200c34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  200c38:	4601      	movne	r1, r0
  200c3a:	0242      	lsls	r2, r0, #9
  200c3c:	bf06      	itte	eq
  200c3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  200c42:	ea90 0f01 	teqeq	r0, r1
  200c46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  200c4a:	4770      	bx	lr

00200c4c <__aeabi_ui2f>:
  200c4c:	f04f 0300 	mov.w	r3, #0
  200c50:	e004      	b.n	200c5c <__aeabi_i2f+0x8>
  200c52:	bf00      	nop

00200c54 <__aeabi_i2f>:
  200c54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  200c58:	bf48      	it	mi
  200c5a:	4240      	negmi	r0, r0
  200c5c:	ea5f 0c00 	movs.w	ip, r0
  200c60:	bf08      	it	eq
  200c62:	4770      	bxeq	lr
  200c64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  200c68:	4601      	mov	r1, r0
  200c6a:	f04f 0000 	mov.w	r0, #0
  200c6e:	e01c      	b.n	200caa <__aeabi_l2f+0x2a>

00200c70 <__aeabi_ul2f>:
  200c70:	ea50 0201 	orrs.w	r2, r0, r1
  200c74:	bf08      	it	eq
  200c76:	4770      	bxeq	lr
  200c78:	f04f 0300 	mov.w	r3, #0
  200c7c:	e00a      	b.n	200c94 <__aeabi_l2f+0x14>
  200c7e:	bf00      	nop

00200c80 <__aeabi_l2f>:
  200c80:	ea50 0201 	orrs.w	r2, r0, r1
  200c84:	bf08      	it	eq
  200c86:	4770      	bxeq	lr
  200c88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  200c8c:	d502      	bpl.n	200c94 <__aeabi_l2f+0x14>
  200c8e:	4240      	negs	r0, r0
  200c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200c94:	ea5f 0c01 	movs.w	ip, r1
  200c98:	bf02      	ittt	eq
  200c9a:	4684      	moveq	ip, r0
  200c9c:	4601      	moveq	r1, r0
  200c9e:	2000      	moveq	r0, #0
  200ca0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  200ca4:	bf08      	it	eq
  200ca6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  200caa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  200cae:	fabc f28c 	clz	r2, ip
  200cb2:	3a08      	subs	r2, #8
  200cb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  200cb8:	db10      	blt.n	200cdc <__aeabi_l2f+0x5c>
  200cba:	fa01 fc02 	lsl.w	ip, r1, r2
  200cbe:	4463      	add	r3, ip
  200cc0:	fa00 fc02 	lsl.w	ip, r0, r2
  200cc4:	f1c2 0220 	rsb	r2, r2, #32
  200cc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200ccc:	fa20 f202 	lsr.w	r2, r0, r2
  200cd0:	eb43 0002 	adc.w	r0, r3, r2
  200cd4:	bf08      	it	eq
  200cd6:	f020 0001 	biceq.w	r0, r0, #1
  200cda:	4770      	bx	lr
  200cdc:	f102 0220 	add.w	r2, r2, #32
  200ce0:	fa01 fc02 	lsl.w	ip, r1, r2
  200ce4:	f1c2 0220 	rsb	r2, r2, #32
  200ce8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  200cec:	fa21 f202 	lsr.w	r2, r1, r2
  200cf0:	eb43 0002 	adc.w	r0, r3, r2
  200cf4:	bf08      	it	eq
  200cf6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  200cfa:	4770      	bx	lr

00200cfc <__aeabi_fmul>:
  200cfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200d00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  200d04:	bf1e      	ittt	ne
  200d06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  200d0a:	ea92 0f0c 	teqne	r2, ip
  200d0e:	ea93 0f0c 	teqne	r3, ip
  200d12:	d06f      	beq.n	200df4 <__aeabi_fmul+0xf8>
  200d14:	441a      	add	r2, r3
  200d16:	ea80 0c01 	eor.w	ip, r0, r1
  200d1a:	0240      	lsls	r0, r0, #9
  200d1c:	bf18      	it	ne
  200d1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  200d22:	d01e      	beq.n	200d62 <__aeabi_fmul+0x66>
  200d24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  200d28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  200d2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  200d30:	fba0 3101 	umull	r3, r1, r0, r1
  200d34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  200d38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  200d3c:	bf3e      	ittt	cc
  200d3e:	0049      	lslcc	r1, r1, #1
  200d40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  200d44:	005b      	lslcc	r3, r3, #1
  200d46:	ea40 0001 	orr.w	r0, r0, r1
  200d4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  200d4e:	2afd      	cmp	r2, #253	; 0xfd
  200d50:	d81d      	bhi.n	200d8e <__aeabi_fmul+0x92>
  200d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  200d56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200d5a:	bf08      	it	eq
  200d5c:	f020 0001 	biceq.w	r0, r0, #1
  200d60:	4770      	bx	lr
  200d62:	f090 0f00 	teq	r0, #0
  200d66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  200d6a:	bf08      	it	eq
  200d6c:	0249      	lsleq	r1, r1, #9
  200d6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  200d72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  200d76:	3a7f      	subs	r2, #127	; 0x7f
  200d78:	bfc2      	ittt	gt
  200d7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  200d7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  200d82:	4770      	bxgt	lr
  200d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200d88:	f04f 0300 	mov.w	r3, #0
  200d8c:	3a01      	subs	r2, #1
  200d8e:	dc5d      	bgt.n	200e4c <__aeabi_fmul+0x150>
  200d90:	f112 0f19 	cmn.w	r2, #25
  200d94:	bfdc      	itt	le
  200d96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  200d9a:	4770      	bxle	lr
  200d9c:	f1c2 0200 	rsb	r2, r2, #0
  200da0:	0041      	lsls	r1, r0, #1
  200da2:	fa21 f102 	lsr.w	r1, r1, r2
  200da6:	f1c2 0220 	rsb	r2, r2, #32
  200daa:	fa00 fc02 	lsl.w	ip, r0, r2
  200dae:	ea5f 0031 	movs.w	r0, r1, rrx
  200db2:	f140 0000 	adc.w	r0, r0, #0
  200db6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  200dba:	bf08      	it	eq
  200dbc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  200dc0:	4770      	bx	lr
  200dc2:	f092 0f00 	teq	r2, #0
  200dc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  200dca:	bf02      	ittt	eq
  200dcc:	0040      	lsleq	r0, r0, #1
  200dce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  200dd2:	3a01      	subeq	r2, #1
  200dd4:	d0f9      	beq.n	200dca <__aeabi_fmul+0xce>
  200dd6:	ea40 000c 	orr.w	r0, r0, ip
  200dda:	f093 0f00 	teq	r3, #0
  200dde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200de2:	bf02      	ittt	eq
  200de4:	0049      	lsleq	r1, r1, #1
  200de6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  200dea:	3b01      	subeq	r3, #1
  200dec:	d0f9      	beq.n	200de2 <__aeabi_fmul+0xe6>
  200dee:	ea41 010c 	orr.w	r1, r1, ip
  200df2:	e78f      	b.n	200d14 <__aeabi_fmul+0x18>
  200df4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  200df8:	ea92 0f0c 	teq	r2, ip
  200dfc:	bf18      	it	ne
  200dfe:	ea93 0f0c 	teqne	r3, ip
  200e02:	d00a      	beq.n	200e1a <__aeabi_fmul+0x11e>
  200e04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  200e08:	bf18      	it	ne
  200e0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  200e0e:	d1d8      	bne.n	200dc2 <__aeabi_fmul+0xc6>
  200e10:	ea80 0001 	eor.w	r0, r0, r1
  200e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  200e18:	4770      	bx	lr
  200e1a:	f090 0f00 	teq	r0, #0
  200e1e:	bf17      	itett	ne
  200e20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  200e24:	4608      	moveq	r0, r1
  200e26:	f091 0f00 	teqne	r1, #0
  200e2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  200e2e:	d014      	beq.n	200e5a <__aeabi_fmul+0x15e>
  200e30:	ea92 0f0c 	teq	r2, ip
  200e34:	d101      	bne.n	200e3a <__aeabi_fmul+0x13e>
  200e36:	0242      	lsls	r2, r0, #9
  200e38:	d10f      	bne.n	200e5a <__aeabi_fmul+0x15e>
  200e3a:	ea93 0f0c 	teq	r3, ip
  200e3e:	d103      	bne.n	200e48 <__aeabi_fmul+0x14c>
  200e40:	024b      	lsls	r3, r1, #9
  200e42:	bf18      	it	ne
  200e44:	4608      	movne	r0, r1
  200e46:	d108      	bne.n	200e5a <__aeabi_fmul+0x15e>
  200e48:	ea80 0001 	eor.w	r0, r0, r1
  200e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  200e50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200e58:	4770      	bx	lr
  200e5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200e5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  200e62:	4770      	bx	lr

00200e64 <__aeabi_fdiv>:
  200e64:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  200e6c:	bf1e      	ittt	ne
  200e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  200e72:	ea92 0f0c 	teqne	r2, ip
  200e76:	ea93 0f0c 	teqne	r3, ip
  200e7a:	d069      	beq.n	200f50 <__aeabi_fdiv+0xec>
  200e7c:	eba2 0203 	sub.w	r2, r2, r3
  200e80:	ea80 0c01 	eor.w	ip, r0, r1
  200e84:	0249      	lsls	r1, r1, #9
  200e86:	ea4f 2040 	mov.w	r0, r0, lsl #9
  200e8a:	d037      	beq.n	200efc <__aeabi_fdiv+0x98>
  200e8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  200e90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  200e94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  200e98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  200e9c:	428b      	cmp	r3, r1
  200e9e:	bf38      	it	cc
  200ea0:	005b      	lslcc	r3, r3, #1
  200ea2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  200ea6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  200eaa:	428b      	cmp	r3, r1
  200eac:	bf24      	itt	cs
  200eae:	1a5b      	subcs	r3, r3, r1
  200eb0:	ea40 000c 	orrcs.w	r0, r0, ip
  200eb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  200eb8:	bf24      	itt	cs
  200eba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  200ebe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  200ec2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  200ec6:	bf24      	itt	cs
  200ec8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  200ecc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200ed0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  200ed4:	bf24      	itt	cs
  200ed6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  200eda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  200ede:	011b      	lsls	r3, r3, #4
  200ee0:	bf18      	it	ne
  200ee2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  200ee6:	d1e0      	bne.n	200eaa <__aeabi_fdiv+0x46>
  200ee8:	2afd      	cmp	r2, #253	; 0xfd
  200eea:	f63f af50 	bhi.w	200d8e <__aeabi_fmul+0x92>
  200eee:	428b      	cmp	r3, r1
  200ef0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200ef4:	bf08      	it	eq
  200ef6:	f020 0001 	biceq.w	r0, r0, #1
  200efa:	4770      	bx	lr
  200efc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  200f00:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  200f04:	327f      	adds	r2, #127	; 0x7f
  200f06:	bfc2      	ittt	gt
  200f08:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  200f0c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  200f10:	4770      	bxgt	lr
  200f12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200f16:	f04f 0300 	mov.w	r3, #0
  200f1a:	3a01      	subs	r2, #1
  200f1c:	e737      	b.n	200d8e <__aeabi_fmul+0x92>
  200f1e:	f092 0f00 	teq	r2, #0
  200f22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  200f26:	bf02      	ittt	eq
  200f28:	0040      	lsleq	r0, r0, #1
  200f2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  200f2e:	3a01      	subeq	r2, #1
  200f30:	d0f9      	beq.n	200f26 <__aeabi_fdiv+0xc2>
  200f32:	ea40 000c 	orr.w	r0, r0, ip
  200f36:	f093 0f00 	teq	r3, #0
  200f3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200f3e:	bf02      	ittt	eq
  200f40:	0049      	lsleq	r1, r1, #1
  200f42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  200f46:	3b01      	subeq	r3, #1
  200f48:	d0f9      	beq.n	200f3e <__aeabi_fdiv+0xda>
  200f4a:	ea41 010c 	orr.w	r1, r1, ip
  200f4e:	e795      	b.n	200e7c <__aeabi_fdiv+0x18>
  200f50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  200f54:	ea92 0f0c 	teq	r2, ip
  200f58:	d108      	bne.n	200f6c <__aeabi_fdiv+0x108>
  200f5a:	0242      	lsls	r2, r0, #9
  200f5c:	f47f af7d 	bne.w	200e5a <__aeabi_fmul+0x15e>
  200f60:	ea93 0f0c 	teq	r3, ip
  200f64:	f47f af70 	bne.w	200e48 <__aeabi_fmul+0x14c>
  200f68:	4608      	mov	r0, r1
  200f6a:	e776      	b.n	200e5a <__aeabi_fmul+0x15e>
  200f6c:	ea93 0f0c 	teq	r3, ip
  200f70:	d104      	bne.n	200f7c <__aeabi_fdiv+0x118>
  200f72:	024b      	lsls	r3, r1, #9
  200f74:	f43f af4c 	beq.w	200e10 <__aeabi_fmul+0x114>
  200f78:	4608      	mov	r0, r1
  200f7a:	e76e      	b.n	200e5a <__aeabi_fmul+0x15e>
  200f7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  200f80:	bf18      	it	ne
  200f82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  200f86:	d1ca      	bne.n	200f1e <__aeabi_fdiv+0xba>
  200f88:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  200f8c:	f47f af5c 	bne.w	200e48 <__aeabi_fmul+0x14c>
  200f90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  200f94:	f47f af3c 	bne.w	200e10 <__aeabi_fmul+0x114>
  200f98:	e75f      	b.n	200e5a <__aeabi_fmul+0x15e>
  200f9a:	bf00      	nop

00200f9c <__aeabi_f2iz>:
  200f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  200fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  200fa4:	d30f      	bcc.n	200fc6 <__aeabi_f2iz+0x2a>
  200fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
  200faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  200fae:	d90d      	bls.n	200fcc <__aeabi_f2iz+0x30>
  200fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
  200fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200fb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  200fbc:	fa23 f002 	lsr.w	r0, r3, r2
  200fc0:	bf18      	it	ne
  200fc2:	4240      	negne	r0, r0
  200fc4:	4770      	bx	lr
  200fc6:	f04f 0000 	mov.w	r0, #0
  200fca:	4770      	bx	lr
  200fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
  200fd0:	d101      	bne.n	200fd6 <__aeabi_f2iz+0x3a>
  200fd2:	0242      	lsls	r2, r0, #9
  200fd4:	d105      	bne.n	200fe2 <__aeabi_f2iz+0x46>
  200fd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  200fda:	bf08      	it	eq
  200fdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200fe0:	4770      	bx	lr
  200fe2:	f04f 0000 	mov.w	r0, #0
  200fe6:	4770      	bx	lr
	...

00200ff0 <notify7.lto_priv.29>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200ff0:	4a02      	ldr	r2, [pc, #8]	; (200ffc <notify7.lto_priv.29+0xc>)
  200ff2:	6813      	ldr	r3, [r2, #0]
  200ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200ff8:	6013      	str	r3, [r2, #0]
  200ffa:	4770      	bx	lr
  200ffc:	40007800 	.word	0x40007800

00201000 <notify6.lto_priv.28>:
  USART6->CR1 |= USART_CR1_TXEIE;
  201000:	4a02      	ldr	r2, [pc, #8]	; (20100c <notify6.lto_priv.28+0xc>)
  201002:	6813      	ldr	r3, [r2, #0]
  201004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  201008:	6013      	str	r3, [r2, #0]
  20100a:	4770      	bx	lr
  20100c:	40011400 	.word	0x40011400

00201010 <notify5.lto_priv.27>:
  UART5->CR1 |= USART_CR1_TXEIE;
  201010:	4a02      	ldr	r2, [pc, #8]	; (20101c <notify5.lto_priv.27+0xc>)
  201012:	6813      	ldr	r3, [r2, #0]
  201014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  201018:	6013      	str	r3, [r2, #0]
  20101a:	4770      	bx	lr
  20101c:	40005000 	.word	0x40005000

00201020 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  201020:	b480      	push	{r7}
  201022:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201024:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  201028:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20102a:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20102e:	2300      	movs	r3, #0
  201030:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  201034:	46bd      	mov	sp, r7
  201036:	bc80      	pop	{r7}
  201038:	4770      	bx	lr
  20103a:	bf00      	nop
  20103c:	0000      	movs	r0, r0
	...

00201040 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  201040:	b470      	push	{r4, r5, r6}
  201042:	2320      	movs	r3, #32
  201044:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201048:	4e0d      	ldr	r6, [pc, #52]	; (201080 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20104a:	1e4a      	subs	r2, r1, #1
  20104c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20104e:	4c0d      	ldr	r4, [pc, #52]	; (201084 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201050:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  201052:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  201054:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201056:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  201058:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20105a:	1858      	adds	r0, r3, r1
  20105c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20105e:	1a23      	subs	r3, r4, r0
  201060:	429a      	cmp	r2, r3
  201062:	d806      	bhi.n	201072 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  201064:	4402      	add	r2, r0
  201066:	2300      	movs	r3, #0
  201068:	6032      	str	r2, [r6, #0]
  20106a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20106e:	bc70      	pop	{r4, r5, r6}
  201070:	4770      	bx	lr
    return NULL;
  201072:	2000      	movs	r0, #0
  201074:	2300      	movs	r3, #0
  201076:	f383 8811 	msr	BASEPRI, r3
}
  20107a:	bc70      	pop	{r4, r5, r6}
  20107c:	4770      	bx	lr
  20107e:	bf00      	nop
  201080:	20000a38 	.word	0x20000a38
  201084:	20000a30 	.word	0x20000a30
	...

00201090 <wakeup>:
  201090:	2320      	movs	r3, #32
  201092:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
  201096:	f890 3020 	ldrb.w	r3, [r0, #32]
  20109a:	2b07      	cmp	r3, #7
  20109c:	d80e      	bhi.n	2010bc <wakeup+0x2c>
  20109e:	e8df f003 	tbb	[pc, r3]
  2010a2:	0d28      	.short	0x0d28
  2010a4:	0408240d 	.word	0x0408240d
  2010a8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  2010aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  2010ac:	6893      	ldr	r3, [r2, #8]
  2010ae:	3301      	adds	r3, #1
  2010b0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  2010b2:	e890 000c 	ldmia.w	r0, {r2, r3}
  2010b6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  2010b8:	6802      	ldr	r2, [r0, #0]
  2010ba:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  2010bc:	2200      	movs	r2, #0
  2010be:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  2010c0:	4b0e      	ldr	r3, [pc, #56]	; (2010fc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  2010c2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  2010c6:	b410      	push	{r4}
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  2010c8:	f04f 34ff 	mov.w	r4, #4294967295
  2010cc:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  2010ce:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2010d0:	689a      	ldr	r2, [r3, #8]
  2010d2:	428a      	cmp	r2, r1
  2010d4:	d2fb      	bcs.n	2010ce <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  2010d6:	685a      	ldr	r2, [r3, #4]
  2010d8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  2010da:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  2010dc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  2010de:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2010e0:	6058      	str	r0, [r3, #4]
  2010e2:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
  2010e6:	bc10      	pop	{r4}
  2010e8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2010ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2010ec:	2200      	movs	r2, #0
  2010ee:	601a      	str	r2, [r3, #0]
  2010f0:	e7e4      	b.n	2010bc <wakeup+0x2c>
  2010f2:	2300      	movs	r3, #0
  2010f4:	f383 8811 	msr	BASEPRI, r3
  2010f8:	4770      	bx	lr
  2010fa:	bf00      	nop
  2010fc:	20000844 	.word	0x20000844

00201100 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201100:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201102:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201104:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201106:	4b08      	ldr	r3, [pc, #32]	; (201128 <chSchReadyI+0x28>)
  201108:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  20110a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  20110e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201110:	689a      	ldr	r2, [r3, #8]
  201112:	428a      	cmp	r2, r1
  201114:	d2fb      	bcs.n	20110e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201116:	685a      	ldr	r2, [r3, #4]
}
  201118:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  20111a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20111c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  20111e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201120:	605c      	str	r4, [r3, #4]
}
  201122:	bc10      	pop	{r4}
  201124:	4770      	bx	lr
  201126:	bf00      	nop
  201128:	20000844 	.word	0x20000844
  20112c:	00000000 	.word	0x00000000

00201130 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201132:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201134:	42a0      	cmp	r0, r4
  201136:	d022      	beq.n	20117e <chEvtBroadcastFlagsI+0x4e>
  201138:	460d      	mov	r5, r1
  20113a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20113c:	2600      	movs	r6, #0
  20113e:	e002      	b.n	201146 <chEvtBroadcastFlagsI+0x16>
    elp = elp->next;
  201140:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201142:	42a7      	cmp	r7, r4
  201144:	d01b      	beq.n	20117e <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
  201146:	68e3      	ldr	r3, [r4, #12]
  201148:	432b      	orrs	r3, r5
  20114a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  20114c:	b115      	cbz	r5, 201154 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  20114e:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201150:	4213      	tst	r3, r2
  201152:	d0f5      	beq.n	201140 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
  201154:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  201156:	68a3      	ldr	r3, [r4, #8]
  201158:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20115a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  20115e:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201160:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201162:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201164:	d00c      	beq.n	201180 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201166:	2a0b      	cmp	r2, #11
  201168:	d1ea      	bne.n	201140 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20116a:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20116c:	ea32 0303 	bics.w	r3, r2, r3
  201170:	d1e6      	bne.n	201140 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  201172:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201174:	f7ff ffc4 	bl	201100 <chSchReadyI>
    elp = elp->next;
  201178:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  20117a:	42a7      	cmp	r7, r4
  20117c:	d1e3      	bne.n	201146 <chEvtBroadcastFlagsI+0x16>
  20117e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201180:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  201182:	4213      	tst	r3, r2
  201184:	d0dc      	beq.n	201140 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  201186:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201188:	f7ff ffba 	bl	201100 <chSchReadyI>
  20118c:	e7f4      	b.n	201178 <chEvtBroadcastFlagsI+0x48>
  20118e:	bf00      	nop

00201190 <_idle_thread.lto_priv.39>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  201190:	e7fe      	b.n	201190 <_idle_thread.lto_priv.39>
  201192:	bf00      	nop
	...

002011a0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2011a0:	4b08      	ldr	r3, [pc, #32]	; (2011c4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2011a2:	681a      	ldr	r2, [r3, #0]
  2011a4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2011a6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2011a8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2011ac:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2011ae:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2011b0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2011b2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2011b4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2011b6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2011ba:	619a      	str	r2, [r3, #24]
}
  2011bc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2011be:	f7ff b889 	b.w	2002d4 <_port_switch>
  2011c2:	bf00      	nop
  2011c4:	20000844 	.word	0x20000844
	...

002011d0 <serve_interrupt.lto_priv.40>:
static void serve_interrupt(SerialDriver *sdp) {
  2011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  2011d4:	6d46      	ldr	r6, [r0, #84]	; 0x54
static void serve_interrupt(SerialDriver *sdp) {
  2011d6:	4604      	mov	r4, r0
  uint32_t cr1 = u->CR1;
  2011d8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  2011da:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2011dc:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  2011de:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2011e0:	d154      	bne.n	20128c <serve_interrupt.lto_priv.40+0xbc>
  if (isr & USART_ISR_LBDF) {
  2011e2:	05eb      	lsls	r3, r5, #23
  2011e4:	d446      	bmi.n	201274 <serve_interrupt.lto_priv.40+0xa4>
  if (isr & USART_ISR_RXNE) {
  2011e6:	06a8      	lsls	r0, r5, #26
  2011e8:	d417      	bmi.n	20121a <serve_interrupt.lto_priv.40+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  2011ea:	0639      	lsls	r1, r7, #24
  2011ec:	d501      	bpl.n	2011f2 <serve_interrupt.lto_priv.40+0x22>
  2011ee:	062a      	lsls	r2, r5, #24
  2011f0:	d468      	bmi.n	2012c4 <serve_interrupt.lto_priv.40+0xf4>
  if (isr & USART_ISR_TC) {
  2011f2:	066b      	lsls	r3, r5, #25
  2011f4:	d50f      	bpl.n	201216 <serve_interrupt.lto_priv.40+0x46>
  2011f6:	2320      	movs	r3, #32
  2011f8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  2011fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2011fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201200:	429a      	cmp	r2, r3
  201202:	f000 8089 	beq.w	201318 <serve_interrupt.lto_priv.40+0x148>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  201206:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20120a:	2300      	movs	r3, #0
  20120c:	6037      	str	r7, [r6, #0]
  20120e:	f383 8811 	msr	BASEPRI, r3
  201212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  201216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  20121a:	2320      	movs	r3, #32
  20121c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  201220:	6a72      	ldr	r2, [r6, #36]	; 0x24
  201222:	f894 805c 	ldrb.w	r8, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  201226:	6963      	ldr	r3, [r4, #20]
  201228:	ea08 0802 	and.w	r8, r8, r2
  20122c:	2b00      	cmp	r3, #0
  20122e:	d07c      	beq.n	20132a <serve_interrupt.lto_priv.40+0x15a>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  201230:	6a23      	ldr	r3, [r4, #32]
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  201232:	f104 010c 	add.w	r1, r4, #12
  201236:	6a62      	ldr	r2, [r4, #36]	; 0x24
  201238:	4293      	cmp	r3, r2
  20123a:	d07b      	beq.n	201334 <serve_interrupt.lto_priv.40+0x164>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  20123c:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20123e:	1c58      	adds	r0, r3, #1
  iqp->q_counter++;
  201240:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  201242:	6220      	str	r0, [r4, #32]
  iqp->q_counter++;
  201244:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  201246:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  20124a:	6a22      	ldr	r2, [r4, #32]
  20124c:	69e3      	ldr	r3, [r4, #28]
  20124e:	429a      	cmp	r2, r3
  201250:	d25f      	bcs.n	201312 <serve_interrupt.lto_priv.40+0x142>
  return (bool)(tqp->next != (const thread_t *)tqp);
  201252:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  201254:	4299      	cmp	r1, r3
  201256:	d009      	beq.n	20126c <serve_interrupt.lto_priv.40+0x9c>
  tqp->next             = tp->queue.next;
  201258:	681a      	ldr	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  20125a:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20125e:	4618      	mov	r0, r3
  201260:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201262:	6051      	str	r1, [r2, #4]
  tp->u.rdymsg = msg;
  201264:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201268:	f7ff ff4a 	bl	201100 <chSchReadyI>
  20126c:	2300      	movs	r3, #0
  20126e:	f383 8811 	msr	BASEPRI, r3
  201272:	e7ba      	b.n	2011ea <serve_interrupt.lto_priv.40+0x1a>
  201274:	2320      	movs	r3, #32
  201276:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  20127a:	f44f 7100 	mov.w	r1, #512	; 0x200
  20127e:	1d20      	adds	r0, r4, #4
  201280:	f7ff ff56 	bl	201130 <chEvtBroadcastFlagsI>
  201284:	2300      	movs	r3, #0
  201286:	f383 8811 	msr	BASEPRI, r3
  20128a:	e7ac      	b.n	2011e6 <serve_interrupt.lto_priv.40+0x16>
    sts |= SD_OVERRUN_ERROR;
  20128c:	f015 0f08 	tst.w	r5, #8
  201290:	bf0c      	ite	eq
  201292:	2100      	moveq	r1, #0
  201294:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
  201296:	07eb      	lsls	r3, r5, #31
  201298:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  20129c:	bf48      	it	mi
  20129e:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
  2012a2:	07a8      	lsls	r0, r5, #30
    sts |= SD_FRAMING_ERROR;
  2012a4:	bf48      	it	mi
  2012a6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
  2012aa:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  2012ac:	bf48      	it	mi
  2012ae:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  2012b2:	f383 8811 	msr	BASEPRI, r3
  2012b6:	1d20      	adds	r0, r4, #4
  2012b8:	f7ff ff3a 	bl	201130 <chEvtBroadcastFlagsI>
  2012bc:	2300      	movs	r3, #0
  2012be:	f383 8811 	msr	BASEPRI, r3
  2012c2:	e78e      	b.n	2011e2 <serve_interrupt.lto_priv.40+0x12>
  2012c4:	2320      	movs	r3, #32
  2012c6:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  2012ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b = oqGetI(&sdp->oqueue);
  2012cc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  2012d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2012d2:	429a      	cmp	r2, r3
  2012d4:	d037      	beq.n	201346 <serve_interrupt.lto_priv.40+0x176>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  2012d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2012d8:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  2012da:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  2012dc:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  2012de:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  2012e0:	4288      	cmp	r0, r1
  oqp->q_counter++;
  2012e2:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2012e4:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  2012e8:	d301      	bcc.n	2012ee <serve_interrupt.lto_priv.40+0x11e>
    oqp->q_rdptr = oqp->q_buffer;
  2012ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  2012ec:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  2012ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  2012f0:	459e      	cmp	lr, r3
  2012f2:	d008      	beq.n	201306 <serve_interrupt.lto_priv.40+0x136>
  tqp->next             = tp->queue.next;
  2012f4:	681a      	ldr	r2, [r3, #0]
  tp->u.rdymsg = msg;
  2012f6:	2100      	movs	r1, #0
  (void) chSchReadyI(tp);
  2012f8:	4618      	mov	r0, r3
  2012fa:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  2012fc:	f8c2 e004 	str.w	lr, [r2, #4]
  tp->u.rdymsg = msg;
  201300:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201302:	f7ff fefd 	bl	201100 <chSchReadyI>
      u->TDR = b;
  201306:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  20130a:	2300      	movs	r3, #0
  20130c:	f383 8811 	msr	BASEPRI, r3
  201310:	e76f      	b.n	2011f2 <serve_interrupt.lto_priv.40+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  201312:	69a3      	ldr	r3, [r4, #24]
  201314:	6223      	str	r3, [r4, #32]
  201316:	e79c      	b.n	201252 <serve_interrupt.lto_priv.40+0x82>
    if (oqIsEmptyI(&sdp->oqueue))
  201318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  20131a:	2b00      	cmp	r3, #0
  20131c:	f43f af73 	beq.w	201206 <serve_interrupt.lto_priv.40+0x36>
  201320:	1d20      	adds	r0, r4, #4
  201322:	2110      	movs	r1, #16
  201324:	f7ff ff04 	bl	201130 <chEvtBroadcastFlagsI>
  201328:	e76d      	b.n	201206 <serve_interrupt.lto_priv.40+0x36>
  20132a:	2104      	movs	r1, #4
  20132c:	1860      	adds	r0, r4, r1
  20132e:	f7ff feff 	bl	201130 <chEvtBroadcastFlagsI>
  201332:	e77d      	b.n	201230 <serve_interrupt.lto_priv.40+0x60>
  if (iqIsFullI(iqp)) {
  201334:	6962      	ldr	r2, [r4, #20]
  201336:	2a00      	cmp	r2, #0
  201338:	d080      	beq.n	20123c <serve_interrupt.lto_priv.40+0x6c>
  20133a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  20133e:	1d20      	adds	r0, r4, #4
  201340:	f7ff fef6 	bl	201130 <chEvtBroadcastFlagsI>
  201344:	e792      	b.n	20126c <serve_interrupt.lto_priv.40+0x9c>
  if (oqIsEmptyI(oqp)) {
  201346:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  201348:	2a00      	cmp	r2, #0
  20134a:	d0c4      	beq.n	2012d6 <serve_interrupt.lto_priv.40+0x106>
  20134c:	2108      	movs	r1, #8
  20134e:	1d20      	adds	r0, r4, #4
  201350:	f7ff feee 	bl	201130 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  201354:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  201358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20135c:	6033      	str	r3, [r6, #0]
  20135e:	e7d4      	b.n	20130a <serve_interrupt.lto_priv.40+0x13a>

00201360 <_port_irq_epilogue>:
  201360:	2320      	movs	r3, #32
  201362:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201366:	4b11      	ldr	r3, [pc, #68]	; (2013ac <_port_irq_epilogue+0x4c>)
  201368:	685b      	ldr	r3, [r3, #4]
  20136a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20136e:	d102      	bne.n	201376 <_port_irq_epilogue+0x16>
  201370:	f383 8811 	msr	BASEPRI, r3
  201374:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201376:	b480      	push	{r7}
  201378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20137a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20137e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201382:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201386:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20138a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20138e:	4a08      	ldr	r2, [pc, #32]	; (2013b0 <_port_irq_epilogue+0x50>)
  201390:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201392:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201394:	6889      	ldr	r1, [r1, #8]
  201396:	6892      	ldr	r2, [r2, #8]
  201398:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20139a:	bf8c      	ite	hi
  20139c:	4a05      	ldrhi	r2, [pc, #20]	; (2013b4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20139e:	4a06      	ldrls	r2, [pc, #24]	; (2013b8 <_port_irq_epilogue+0x58>)
  2013a0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2013a4:	46bd      	mov	sp, r7
  2013a6:	bc80      	pop	{r7}
  2013a8:	4770      	bx	lr
  2013aa:	bf00      	nop
  2013ac:	e000ed00 	.word	0xe000ed00
  2013b0:	20000844 	.word	0x20000844
  2013b4:	002002f5 	.word	0x002002f5
  2013b8:	002002f8 	.word	0x002002f8
  2013bc:	00000000 	.word	0x00000000

002013c0 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  2013c0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  2013c2:	4b0b      	ldr	r3, [pc, #44]	; (2013f0 <VectorA4+0x30>)
  2013c4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  2013c6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  2013c8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  2013ca:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  2013cc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  2013ce:	d107      	bne.n	2013e0 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  2013d0:	2002      	movs	r0, #2
  2013d2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2013d4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2013d6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  2013d8:	68d1      	ldr	r1, [r2, #12]
  2013da:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  2013de:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  2013e0:	685b      	ldr	r3, [r3, #4]
  2013e2:	4803      	ldr	r0, [pc, #12]	; (2013f0 <VectorA4+0x30>)
  2013e4:	685b      	ldr	r3, [r3, #4]
  2013e6:	4798      	blx	r3
}
  2013e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2013ec:	f7ff bfb8 	b.w	201360 <_port_irq_epilogue>
  2013f0:	20000834 	.word	0x20000834
	...

00201400 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  201400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201402:	2720      	movs	r7, #32
  201404:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  201408:	4d12      	ldr	r5, [pc, #72]	; (201454 <SysTick_Handler+0x54>)
  20140a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20140c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20140e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201410:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  201414:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201416:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  201418:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20141a:	d013      	beq.n	201444 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20141c:	891c      	ldrh	r4, [r3, #8]
  20141e:	3c01      	subs	r4, #1
  201420:	b2a4      	uxth	r4, r4
  201422:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  201424:	b974      	cbnz	r4, 201444 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  201426:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  201428:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20142a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20142c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20142e:	61ea      	str	r2, [r5, #28]
  201430:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  201434:	6918      	ldr	r0, [r3, #16]
  201436:	4788      	blx	r1
  201438:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20143c:	69eb      	ldr	r3, [r5, #28]
  20143e:	891a      	ldrh	r2, [r3, #8]
  201440:	2a00      	cmp	r2, #0
  201442:	d0f0      	beq.n	201426 <SysTick_Handler+0x26>
  201444:	2300      	movs	r3, #0
  201446:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  20144a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20144e:	f7ff bf87 	b.w	201360 <_port_irq_epilogue>
  201452:	bf00      	nop
  201454:	20000844 	.word	0x20000844
	...

00201460 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201460:	4b08      	ldr	r3, [pc, #32]	; (201484 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  201462:	4809      	ldr	r0, [pc, #36]	; (201488 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201464:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  201466:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201468:	0d89      	lsrs	r1, r1, #22
  20146a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  20146e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  201470:	058c      	lsls	r4, r1, #22
  201472:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  201474:	b10a      	cbz	r2, 20147a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  201476:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  201478:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  20147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20147e:	f7ff bf6f 	b.w	201360 <_port_irq_epilogue>
  201482:	bf00      	nop
  201484:	40026400 	.word	0x40026400
  201488:	200009b0 	.word	0x200009b0
  20148c:	00000000 	.word	0x00000000

00201490 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201490:	4b08      	ldr	r3, [pc, #32]	; (2014b4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  201492:	4809      	ldr	r0, [pc, #36]	; (2014b8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201494:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  201496:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201498:	0c09      	lsrs	r1, r1, #16
  20149a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20149e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  2014a0:	040c      	lsls	r4, r1, #16
  2014a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  2014a4:	b10a      	cbz	r2, 2014aa <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  2014a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
  2014a8:	4790      	blx	r2
}
  2014aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2014ae:	f7ff bf57 	b.w	201360 <_port_irq_epilogue>
  2014b2:	bf00      	nop
  2014b4:	40026400 	.word	0x40026400
  2014b8:	200009b0 	.word	0x200009b0
  2014bc:	00000000 	.word	0x00000000

002014c0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2014c0:	4b08      	ldr	r3, [pc, #32]	; (2014e4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  2014c2:	4809      	ldr	r0, [pc, #36]	; (2014e8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2014c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  2014c6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2014c8:	0989      	lsrs	r1, r1, #6
  2014ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  2014ce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  2014d0:	018c      	lsls	r4, r1, #6
  2014d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  2014d4:	b10a      	cbz	r2, 2014da <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  2014d6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  2014d8:	4790      	blx	r2
}
  2014da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2014de:	f7ff bf3f 	b.w	201360 <_port_irq_epilogue>
  2014e2:	bf00      	nop
  2014e4:	40026400 	.word	0x40026400
  2014e8:	200009b0 	.word	0x200009b0
  2014ec:	00000000 	.word	0x00000000

002014f0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  2014f0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2014f2:	4b07      	ldr	r3, [pc, #28]	; (201510 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  2014f4:	4807      	ldr	r0, [pc, #28]	; (201514 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2014f6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  2014f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2014fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  2014fe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  201500:	b10a      	cbz	r2, 201506 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  201502:	6e40      	ldr	r0, [r0, #100]	; 0x64
  201504:	4790      	blx	r2
}
  201506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20150a:	f7ff bf29 	b.w	201360 <_port_irq_epilogue>
  20150e:	bf00      	nop
  201510:	40026400 	.word	0x40026400
  201514:	200009b0 	.word	0x200009b0
	...

00201520 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201520:	4b08      	ldr	r3, [pc, #32]	; (201544 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  201522:	4809      	ldr	r0, [pc, #36]	; (201548 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201524:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  201526:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201528:	0d89      	lsrs	r1, r1, #22
  20152a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  20152e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  201530:	058c      	lsls	r4, r1, #22
  201532:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  201534:	b10a      	cbz	r2, 20153a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  201536:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  201538:	4790      	blx	r2
}
  20153a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20153e:	f7ff bf0f 	b.w	201360 <_port_irq_epilogue>
  201542:	bf00      	nop
  201544:	40026400 	.word	0x40026400
  201548:	200009b0 	.word	0x200009b0
  20154c:	00000000 	.word	0x00000000

00201550 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201550:	4b08      	ldr	r3, [pc, #32]	; (201574 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  201552:	4809      	ldr	r0, [pc, #36]	; (201578 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201554:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  201556:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201558:	0c09      	lsrs	r1, r1, #16
  20155a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  20155e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  201560:	040c      	lsls	r4, r1, #16
  201562:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  201564:	b10a      	cbz	r2, 20156a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  201566:	6d40      	ldr	r0, [r0, #84]	; 0x54
  201568:	4790      	blx	r2
}
  20156a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20156e:	f7ff bef7 	b.w	201360 <_port_irq_epilogue>
  201572:	bf00      	nop
  201574:	40026400 	.word	0x40026400
  201578:	200009b0 	.word	0x200009b0
  20157c:	00000000 	.word	0x00000000

00201580 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201580:	4b08      	ldr	r3, [pc, #32]	; (2015a4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  201582:	4809      	ldr	r0, [pc, #36]	; (2015a8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201584:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  201586:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201588:	0989      	lsrs	r1, r1, #6
  20158a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20158e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  201590:	018c      	lsls	r4, r1, #6
  201592:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  201594:	b10a      	cbz	r2, 20159a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  201596:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  201598:	4790      	blx	r2
}
  20159a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20159e:	f7ff bedf 	b.w	201360 <_port_irq_epilogue>
  2015a2:	bf00      	nop
  2015a4:	40026400 	.word	0x40026400
  2015a8:	200009b0 	.word	0x200009b0
  2015ac:	00000000 	.word	0x00000000

002015b0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  2015b0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2015b2:	4b07      	ldr	r3, [pc, #28]	; (2015d0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  2015b4:	4807      	ldr	r0, [pc, #28]	; (2015d4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2015b6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  2015b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2015ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  2015be:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  2015c0:	b10a      	cbz	r2, 2015c6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  2015c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
  2015c4:	4790      	blx	r2
}
  2015c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2015ca:	f7ff bec9 	b.w	201360 <_port_irq_epilogue>
  2015ce:	bf00      	nop
  2015d0:	40026400 	.word	0x40026400
  2015d4:	200009b0 	.word	0x200009b0
	...

002015e0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2015e0:	4b08      	ldr	r3, [pc, #32]	; (201604 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  2015e2:	4809      	ldr	r0, [pc, #36]	; (201608 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2015e4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  2015e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2015e8:	0d89      	lsrs	r1, r1, #22
  2015ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  2015ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  2015f0:	058c      	lsls	r4, r1, #22
  2015f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  2015f4:	b10a      	cbz	r2, 2015fa <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  2015f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  2015f8:	4790      	blx	r2
}
  2015fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2015fe:	f7ff beaf 	b.w	201360 <_port_irq_epilogue>
  201602:	bf00      	nop
  201604:	40026000 	.word	0x40026000
  201608:	200009b0 	.word	0x200009b0
  20160c:	00000000 	.word	0x00000000

00201610 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201610:	4b08      	ldr	r3, [pc, #32]	; (201634 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  201612:	4809      	ldr	r0, [pc, #36]	; (201638 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201614:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  201616:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201618:	0c09      	lsrs	r1, r1, #16
  20161a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  20161e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  201620:	040c      	lsls	r4, r1, #16
  201622:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  201624:	b10a      	cbz	r2, 20162a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  201626:	6b40      	ldr	r0, [r0, #52]	; 0x34
  201628:	4790      	blx	r2
}
  20162a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20162e:	f7ff be97 	b.w	201360 <_port_irq_epilogue>
  201632:	bf00      	nop
  201634:	40026000 	.word	0x40026000
  201638:	200009b0 	.word	0x200009b0
  20163c:	00000000 	.word	0x00000000

00201640 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201640:	4b08      	ldr	r3, [pc, #32]	; (201664 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  201642:	4809      	ldr	r0, [pc, #36]	; (201668 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201644:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  201646:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201648:	0989      	lsrs	r1, r1, #6
  20164a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  20164e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  201650:	018c      	lsls	r4, r1, #6
  201652:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  201654:	b10a      	cbz	r2, 20165a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  201656:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  201658:	4790      	blx	r2
}
  20165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20165e:	f7ff be7f 	b.w	201360 <_port_irq_epilogue>
  201662:	bf00      	nop
  201664:	40026000 	.word	0x40026000
  201668:	200009b0 	.word	0x200009b0
  20166c:	00000000 	.word	0x00000000

00201670 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  201670:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201672:	4b07      	ldr	r3, [pc, #28]	; (201690 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  201674:	4807      	ldr	r0, [pc, #28]	; (201694 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201676:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  201678:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20167a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20167e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  201680:	b10a      	cbz	r2, 201686 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  201682:	6a40      	ldr	r0, [r0, #36]	; 0x24
  201684:	4790      	blx	r2
}
  201686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20168a:	f7ff be69 	b.w	201360 <_port_irq_epilogue>
  20168e:	bf00      	nop
  201690:	40026000 	.word	0x40026000
  201694:	200009b0 	.word	0x200009b0
	...

002016a0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2016a0:	4b08      	ldr	r3, [pc, #32]	; (2016c4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  2016a2:	4809      	ldr	r0, [pc, #36]	; (2016c8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2016a4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  2016a6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2016a8:	0d89      	lsrs	r1, r1, #22
  2016aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  2016ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  2016b0:	058c      	lsls	r4, r1, #22
  2016b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  2016b4:	b10a      	cbz	r2, 2016ba <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  2016b6:	69c0      	ldr	r0, [r0, #28]
  2016b8:	4790      	blx	r2
}
  2016ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2016be:	f7ff be4f 	b.w	201360 <_port_irq_epilogue>
  2016c2:	bf00      	nop
  2016c4:	40026000 	.word	0x40026000
  2016c8:	200009b0 	.word	0x200009b0
  2016cc:	00000000 	.word	0x00000000

002016d0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2016d0:	4b08      	ldr	r3, [pc, #32]	; (2016f4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  2016d2:	4809      	ldr	r0, [pc, #36]	; (2016f8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2016d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  2016d6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2016d8:	0c09      	lsrs	r1, r1, #16
  2016da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  2016de:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  2016e0:	040c      	lsls	r4, r1, #16
  2016e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  2016e4:	b10a      	cbz	r2, 2016ea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  2016e6:	6940      	ldr	r0, [r0, #20]
  2016e8:	4790      	blx	r2
}
  2016ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2016ee:	f7ff be37 	b.w	201360 <_port_irq_epilogue>
  2016f2:	bf00      	nop
  2016f4:	40026000 	.word	0x40026000
  2016f8:	200009b0 	.word	0x200009b0
  2016fc:	00000000 	.word	0x00000000

00201700 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201700:	4b08      	ldr	r3, [pc, #32]	; (201724 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  201702:	4809      	ldr	r0, [pc, #36]	; (201728 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201704:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  201706:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201708:	0989      	lsrs	r1, r1, #6
  20170a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20170e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  201710:	018c      	lsls	r4, r1, #6
  201712:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  201714:	b10a      	cbz	r2, 20171a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  201716:	68c0      	ldr	r0, [r0, #12]
  201718:	4790      	blx	r2
}
  20171a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20171e:	f7ff be1f 	b.w	201360 <_port_irq_epilogue>
  201722:	bf00      	nop
  201724:	40026000 	.word	0x40026000
  201728:	200009b0 	.word	0x200009b0
  20172c:	00000000 	.word	0x00000000

00201730 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  201730:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201732:	4b07      	ldr	r3, [pc, #28]	; (201750 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  201734:	4a07      	ldr	r2, [pc, #28]	; (201754 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201736:	6819      	ldr	r1, [r3, #0]
  201738:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  20173c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  20173e:	6813      	ldr	r3, [r2, #0]
  201740:	b10b      	cbz	r3, 201746 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  201742:	6850      	ldr	r0, [r2, #4]
  201744:	4798      	blx	r3
}
  201746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20174a:	f7ff be09 	b.w	201360 <_port_irq_epilogue>
  20174e:	bf00      	nop
  201750:	40026000 	.word	0x40026000
  201754:	200009b0 	.word	0x200009b0
	...

00201760 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
  201762:	4b23      	ldr	r3, [pc, #140]	; (2017f0 <Vector88+0x90>)
  ADC1->SR = 0;
  201764:	2100      	movs	r1, #0
  sr = ADC1->SR;
  201766:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  201768:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  20176a:	0693      	lsls	r3, r2, #26
  20176c:	d535      	bpl.n	2017da <Vector88+0x7a>
  20176e:	4c21      	ldr	r4, [pc, #132]	; (2017f4 <Vector88+0x94>)
  201770:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201772:	6802      	ldr	r2, [r0, #0]
  201774:	6853      	ldr	r3, [r2, #4]
  201776:	2b00      	cmp	r3, #0
  201778:	d02f      	beq.n	2017da <Vector88+0x7a>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
  20177a:	6921      	ldr	r1, [r4, #16]
  20177c:	b369      	cbz	r1, 2017da <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  20177e:	6813      	ldr	r3, [r2, #0]
  201780:	f023 031f 	bic.w	r3, r3, #31
  201784:	6013      	str	r3, [r2, #0]
  201786:	6813      	ldr	r3, [r2, #0]
  201788:	f013 0301 	ands.w	r3, r3, #1
  20178c:	d1fb      	bne.n	201786 <Vector88+0x26>
  20178e:	7a07      	ldrb	r7, [r0, #8]
  201790:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201792:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201794:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201796:	6846      	ldr	r6, [r0, #4]
  201798:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  20179c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  20179e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  2017a0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  2017a2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  2017a4:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2017a6:	b1fd      	cbz	r5, 2017e8 <Vector88+0x88>
  2017a8:	2305      	movs	r3, #5
  2017aa:	4812      	ldr	r0, [pc, #72]	; (2017f4 <Vector88+0x94>)
  2017ac:	7023      	strb	r3, [r4, #0]
  2017ae:	47a8      	blx	r5
  2017b0:	7823      	ldrb	r3, [r4, #0]
  2017b2:	2b05      	cmp	r3, #5
  2017b4:	d015      	beq.n	2017e2 <Vector88+0x82>
  2017b6:	2300      	movs	r3, #0
  2017b8:	6123      	str	r3, [r4, #16]
  2017ba:	2320      	movs	r3, #32
  2017bc:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  2017c0:	6963      	ldr	r3, [r4, #20]
  2017c2:	b13b      	cbz	r3, 2017d4 <Vector88+0x74>
    tp->u.rdymsg = msg;
  2017c4:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  2017c8:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  2017ca:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  2017cc:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  2017ce:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  2017d0:	f7ff fc96 	bl	201100 <chSchReadyI>
  2017d4:	2300      	movs	r3, #0
  2017d6:	f383 8811 	msr	BASEPRI, r3
}
  2017da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2017de:	f7ff bdbf 	b.w	201360 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2017e2:	2302      	movs	r3, #2
  2017e4:	7023      	strb	r3, [r4, #0]
  2017e6:	e7e6      	b.n	2017b6 <Vector88+0x56>
  2017e8:	2302      	movs	r3, #2
  2017ea:	6125      	str	r5, [r4, #16]
  2017ec:	7023      	strb	r3, [r4, #0]
  2017ee:	e7e4      	b.n	2017ba <Vector88+0x5a>
  2017f0:	40012000 	.word	0x40012000
  2017f4:	20000800 	.word	0x20000800
	...

00201800 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201800:	4b0e      	ldr	r3, [pc, #56]	; (20183c <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  201802:	6882      	ldr	r2, [r0, #8]
  201804:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201806:	490e      	ldr	r1, [pc, #56]	; (201840 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201808:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20180a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20180c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20180e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  201810:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201812:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201814:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201816:	6083      	str	r3, [r0, #8]
  tmp->n++;
  201818:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20181a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  20181e:	18e4      	adds	r4, r4, r3
  201820:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201824:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201826:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201828:	bf88      	it	hi
  20182a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  20182c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  20182e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201832:	bf38      	it	cc
  201834:	6003      	strcc	r3, [r0, #0]
}
  201836:	bc30      	pop	{r4, r5}
  201838:	4770      	bx	lr
  20183a:	bf00      	nop
  20183c:	e0001000 	.word	0xe0001000
  201840:	20000844 	.word	0x20000844
	...

00201850 <chThdExit>:
void chThdExit(msg_t msg) {
  201850:	b538      	push	{r3, r4, r5, lr}
  201852:	2220      	movs	r2, #32
  201854:	4603      	mov	r3, r0
  201856:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20185a:	4a10      	ldr	r2, [pc, #64]	; (20189c <chThdExit+0x4c>)
  20185c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20185e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201864:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201866:	4285      	cmp	r5, r0
  201868:	d006      	beq.n	201878 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20186a:	6803      	ldr	r3, [r0, #0]
  20186c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20186e:	f7ff fc47 	bl	201100 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201872:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201874:	42a8      	cmp	r0, r5
  201876:	d1f8      	bne.n	20186a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201878:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20187c:	b943      	cbnz	r3, 201890 <chThdExit+0x40>
  20187e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201882:	079b      	lsls	r3, r3, #30
  201884:	d104      	bne.n	201890 <chThdExit+0x40>
    REG_REMOVE(tp);
  201886:	6922      	ldr	r2, [r4, #16]
  201888:	6963      	ldr	r3, [r4, #20]
  20188a:	611a      	str	r2, [r3, #16]
  20188c:	6922      	ldr	r2, [r4, #16]
  20188e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201890:	200f      	movs	r0, #15
}
  201892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201896:	f7ff bc83 	b.w	2011a0 <chSchGoSleepS>
  20189a:	bf00      	nop
  20189c:	20000844 	.word	0x20000844

002018a0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2018a0:	4a0e      	ldr	r2, [pc, #56]	; (2018dc <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2018a2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2018a4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2018a6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2018a8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2018aa:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2018ac:	6994      	ldr	r4, [r2, #24]
  2018ae:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2018b0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  2018b2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  2018b6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  2018ba:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2018bc:	6190      	str	r0, [r2, #24]
  2018be:	e000      	b.n	2018c2 <chSchDoReschedule+0x22>
  2018c0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  2018c2:	689a      	ldr	r2, [r3, #8]
  2018c4:	4291      	cmp	r1, r2
  2018c6:	d3fb      	bcc.n	2018c0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  2018c8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  2018ca:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  2018cc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2018ce:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2018d0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2018d2:	605c      	str	r4, [r3, #4]
}
  2018d4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2018d6:	f7fe bcfd 	b.w	2002d4 <_port_switch>
  2018da:	bf00      	nop
  2018dc:	20000844 	.word	0x20000844

002018e0 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  2018e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2018e4:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  2018e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  2018e8:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  2018ea:	d031      	beq.n	201950 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  2018ec:	4c1c      	ldr	r4, [pc, #112]	; (201960 <chSchGoSleepTimeoutS+0x80>)
  2018ee:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  2018f0:	481c      	ldr	r0, [pc, #112]	; (201964 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  2018f2:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  2018f4:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  2018f6:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  2018f8:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  2018fa:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  2018fc:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  2018fe:	d905      	bls.n	20190c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201900:	1a89      	subs	r1, r1, r2
    p = p->next;
  201902:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201904:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201906:	891a      	ldrh	r2, [r3, #8]
  201908:	428a      	cmp	r2, r1
  20190a:	d3f9      	bcc.n	201900 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20190c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20190e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201910:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201912:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201916:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201918:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20191a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20191c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20191e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201922:	891a      	ldrh	r2, [r3, #8]
  201924:	1a51      	subs	r1, r2, r1
  201926:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201928:	84a6      	strh	r6, [r4, #36]	; 0x24
  20192a:	f7ff fc39 	bl	2011a0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20192e:	9b04      	ldr	r3, [sp, #16]
  201930:	b153      	cbz	r3, 201948 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201932:	9b01      	ldr	r3, [sp, #4]
  201934:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201938:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20193a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20193c:	4402      	add	r2, r0
  20193e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201940:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201942:	9b01      	ldr	r3, [sp, #4]
  201944:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201946:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201948:	69a3      	ldr	r3, [r4, #24]
}
  20194a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20194c:	b007      	add	sp, #28
  20194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201950:	4c03      	ldr	r4, [pc, #12]	; (201960 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201952:	f7ff fc25 	bl	2011a0 <chSchGoSleepS>
  return currp->u.rdymsg;
  201956:	69a3      	ldr	r3, [r4, #24]
}
  201958:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20195a:	b007      	add	sp, #28
  20195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20195e:	bf00      	nop
  201960:	20000844 	.word	0x20000844
  201964:	00201091 	.word	0x00201091
	...

00201970 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201970:	b161      	cbz	r1, 20198c <chThdEnqueueTimeoutS+0x1c>
  201972:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201974:	4b07      	ldr	r3, [pc, #28]	; (201994 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201976:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201978:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20197a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20197c:	6854      	ldr	r4, [r2, #4]
  20197e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201982:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201984:	6053      	str	r3, [r2, #4]
}
  201986:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201988:	f7ff bfaa 	b.w	2018e0 <chSchGoSleepTimeoutS>
}
  20198c:	f04f 30ff 	mov.w	r0, #4294967295
  201990:	4770      	bx	lr
  201992:	bf00      	nop
  201994:	20000844 	.word	0x20000844
	...

002019a0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  2019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2019a4:	4699      	mov	r9, r3
  2019a6:	b083      	sub	sp, #12
  2019a8:	4604      	mov	r4, r0
  2019aa:	460e      	mov	r6, r1
  2019ac:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  2019ae:	f8d0 801c 	ldr.w	r8, [r0, #28]
  2019b2:	2320      	movs	r3, #32
  2019b4:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  2019b8:	4b26      	ldr	r3, [pc, #152]	; (201a54 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2019ba:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  2019be:	2700      	movs	r7, #0
  2019c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2019c2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  2019c6:	fa19 f383 	uxtah	r3, r9, r3
  2019ca:	b29b      	uxth	r3, r3
  2019cc:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  2019ce:	68a3      	ldr	r3, [r4, #8]
  2019d0:	b313      	cbz	r3, 201a18 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  2019d2:	6961      	ldr	r1, [r4, #20]
  2019d4:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  2019d8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2019da:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  2019dc:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  2019de:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  2019e0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2019e2:	7833      	ldrb	r3, [r6, #0]
  2019e4:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  2019e6:	6961      	ldr	r1, [r4, #20]
  2019e8:	6923      	ldr	r3, [r4, #16]
  2019ea:	4299      	cmp	r1, r3
  2019ec:	d301      	bcc.n	2019f2 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  2019ee:	68e3      	ldr	r3, [r4, #12]
  2019f0:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  2019f2:	f1b8 0f00 	cmp.w	r8, #0
  2019f6:	d001      	beq.n	2019fc <oqWriteTimeout+0x5c>
      nfy(oqp);
  2019f8:	4620      	mov	r0, r4
  2019fa:	47c0      	blx	r8
  2019fc:	2300      	movs	r3, #0
  2019fe:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201a02:	3d01      	subs	r5, #1
    w++;
  201a04:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201a08:	d019      	beq.n	201a3e <oqWriteTimeout+0x9e>
  201a0a:	2320      	movs	r3, #32
  201a0c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201a10:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201a12:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201a14:	2b00      	cmp	r3, #0
  201a16:	d1dc      	bne.n	2019d2 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201a18:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201a1c:	4592      	cmp	sl, r2
  201a1e:	d812      	bhi.n	201a46 <oqWriteTimeout+0xa6>
  201a20:	4a0c      	ldr	r2, [pc, #48]	; (201a54 <oqWriteTimeout+0xb4>)
  201a22:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201a24:	9a01      	ldr	r2, [sp, #4]
  201a26:	1a51      	subs	r1, r2, r1
  201a28:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201a2a:	4589      	cmp	r9, r1
  201a2c:	d305      	bcc.n	201a3a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  201a2e:	4620      	mov	r0, r4
  201a30:	f7ff ff9e 	bl	201970 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201a34:	2800      	cmp	r0, #0
  201a36:	d0ca      	beq.n	2019ce <oqWriteTimeout+0x2e>
  201a38:	2300      	movs	r3, #0
  201a3a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  201a3e:	4638      	mov	r0, r7
  201a40:	b003      	add	sp, #12
  201a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201a46:	4649      	mov	r1, r9
  201a48:	4620      	mov	r0, r4
  201a4a:	f7ff ff91 	bl	201970 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201a4e:	2800      	cmp	r0, #0
  201a50:	d0bd      	beq.n	2019ce <oqWriteTimeout+0x2e>
  201a52:	e7f1      	b.n	201a38 <oqWriteTimeout+0x98>
  201a54:	20000844 	.word	0x20000844
	...

00201a60 <_writet.lto_priv.37>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201a60:	3030      	adds	r0, #48	; 0x30
  201a62:	f7ff bf9d 	b.w	2019a0 <oqWriteTimeout>
  201a66:	bf00      	nop
	...

00201a70 <_write.lto_priv.31>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201a70:	3030      	adds	r0, #48	; 0x30
  201a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201a76:	f7ff bf93 	b.w	2019a0 <oqWriteTimeout>
  201a7a:	bf00      	nop
  201a7c:	0000      	movs	r0, r0
	...

00201a80 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201a82:	4604      	mov	r4, r0
  201a84:	460f      	mov	r7, r1
  201a86:	4616      	mov	r6, r2
  201a88:	2320      	movs	r3, #32
  201a8a:	f383 8811 	msr	BASEPRI, r3
  201a8e:	e003      	b.n	201a98 <oqPutTimeout+0x18>
  201a90:	f7ff ff6e 	bl	201970 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201a94:	2800      	cmp	r0, #0
  201a96:	db19      	blt.n	201acc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201a98:	68a5      	ldr	r5, [r4, #8]
  201a9a:	4631      	mov	r1, r6
  201a9c:	4620      	mov	r0, r4
  201a9e:	2d00      	cmp	r5, #0
  201aa0:	d0f6      	beq.n	201a90 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201aa2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201aa4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201aa6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201aa8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  201aaa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  201aac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201aae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201ab0:	6962      	ldr	r2, [r4, #20]
  201ab2:	6923      	ldr	r3, [r4, #16]
  201ab4:	429a      	cmp	r2, r3
  201ab6:	d301      	bcc.n	201abc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201ab8:	68e3      	ldr	r3, [r4, #12]
  201aba:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  201abc:	69e3      	ldr	r3, [r4, #28]
  201abe:	b10b      	cbz	r3, 201ac4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201ac0:	4620      	mov	r0, r4
  201ac2:	4798      	blx	r3
  201ac4:	2000      	movs	r0, #0
  201ac6:	f380 8811 	msr	BASEPRI, r0
}
  201aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201acc:	f385 8811 	msr	BASEPRI, r5
  201ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201ad2:	bf00      	nop
	...

00201ae0 <_putt.lto_priv.35>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201ae0:	3030      	adds	r0, #48	; 0x30
  201ae2:	f7ff bfcd 	b.w	201a80 <oqPutTimeout>
  201ae6:	bf00      	nop
	...

00201af0 <_put.lto_priv.33>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201af0:	3030      	adds	r0, #48	; 0x30
  201af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201af6:	f7ff bfc3 	b.w	201a80 <oqPutTimeout>
  201afa:	bf00      	nop
  201afc:	0000      	movs	r0, r0
	...

00201b00 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201b04:	4699      	mov	r9, r3
  201b06:	b083      	sub	sp, #12
  201b08:	4604      	mov	r4, r0
  201b0a:	460e      	mov	r6, r1
  201b0c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  201b0e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201b12:	2320      	movs	r3, #32
  201b14:	f383 8811 	msr	BASEPRI, r3
  201b18:	4b26      	ldr	r3, [pc, #152]	; (201bb4 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201b1a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  201b1e:	2700      	movs	r7, #0
  201b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201b22:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201b26:	fa19 f383 	uxtah	r3, r9, r3
  201b2a:	b29b      	uxth	r3, r3
  201b2c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  201b2e:	68a3      	ldr	r3, [r4, #8]
  201b30:	b313      	cbz	r3, 201b78 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201b32:	69a1      	ldr	r1, [r4, #24]
  201b34:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201b38:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201b3a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  201b3c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  201b3e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201b40:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201b42:	780b      	ldrb	r3, [r1, #0]
  201b44:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201b46:	69a1      	ldr	r1, [r4, #24]
  201b48:	6923      	ldr	r3, [r4, #16]
  201b4a:	4299      	cmp	r1, r3
  201b4c:	d301      	bcc.n	201b52 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  201b4e:	68e3      	ldr	r3, [r4, #12]
  201b50:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  201b52:	f1b8 0f00 	cmp.w	r8, #0
  201b56:	d001      	beq.n	201b5c <iqReadTimeout+0x5c>
      nfy(iqp);
  201b58:	4620      	mov	r0, r4
  201b5a:	47c0      	blx	r8
  201b5c:	2300      	movs	r3, #0
  201b5e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  201b62:	3d01      	subs	r5, #1
    r++;
  201b64:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201b68:	d019      	beq.n	201b9e <iqReadTimeout+0x9e>
  201b6a:	2320      	movs	r3, #32
  201b6c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  201b70:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201b72:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  201b74:	2b00      	cmp	r3, #0
  201b76:	d1dc      	bne.n	201b32 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201b78:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201b7c:	4592      	cmp	sl, r2
  201b7e:	d812      	bhi.n	201ba6 <iqReadTimeout+0xa6>
  201b80:	4a0c      	ldr	r2, [pc, #48]	; (201bb4 <iqReadTimeout+0xb4>)
  201b82:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201b84:	9a01      	ldr	r2, [sp, #4]
  201b86:	1a51      	subs	r1, r2, r1
  201b88:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201b8a:	4589      	cmp	r9, r1
  201b8c:	d305      	bcc.n	201b9a <iqReadTimeout+0x9a>
  201b8e:	4620      	mov	r0, r4
  201b90:	f7ff feee 	bl	201970 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201b94:	2800      	cmp	r0, #0
  201b96:	d0ca      	beq.n	201b2e <iqReadTimeout+0x2e>
  201b98:	2300      	movs	r3, #0
  201b9a:	f383 8811 	msr	BASEPRI, r3
}
  201b9e:	4638      	mov	r0, r7
  201ba0:	b003      	add	sp, #12
  201ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201ba6:	4649      	mov	r1, r9
  201ba8:	4620      	mov	r0, r4
  201baa:	f7ff fee1 	bl	201970 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201bae:	2800      	cmp	r0, #0
  201bb0:	d0bd      	beq.n	201b2e <iqReadTimeout+0x2e>
  201bb2:	e7f1      	b.n	201b98 <iqReadTimeout+0x98>
  201bb4:	20000844 	.word	0x20000844
	...

00201bc0 <_readt.lto_priv.38>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201bc0:	300c      	adds	r0, #12
  201bc2:	f7ff bf9d 	b.w	201b00 <iqReadTimeout>
  201bc6:	bf00      	nop
	...

00201bd0 <_read.lto_priv.32>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201bd0:	300c      	adds	r0, #12
  201bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201bd6:	f7ff bf93 	b.w	201b00 <iqReadTimeout>
  201bda:	bf00      	nop
  201bdc:	0000      	movs	r0, r0
	...

00201be0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201be0:	b570      	push	{r4, r5, r6, lr}
  201be2:	2320      	movs	r3, #32
  201be4:	4604      	mov	r4, r0
  201be6:	460e      	mov	r6, r1
  201be8:	f383 8811 	msr	BASEPRI, r3
  201bec:	e003      	b.n	201bf6 <iqGetTimeout+0x16>
  201bee:	f7ff febf 	bl	201970 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201bf2:	2800      	cmp	r0, #0
  201bf4:	db19      	blt.n	201c2a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201bf6:	68a5      	ldr	r5, [r4, #8]
  201bf8:	4631      	mov	r1, r6
  201bfa:	4620      	mov	r0, r4
  201bfc:	2d00      	cmp	r5, #0
  201bfe:	d0f6      	beq.n	201bee <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201c00:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201c02:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201c04:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201c06:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201c08:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201c0a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201c0c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  201c0e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201c10:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201c12:	d301      	bcc.n	201c18 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201c14:	68e3      	ldr	r3, [r4, #12]
  201c16:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201c18:	69e3      	ldr	r3, [r4, #28]
  201c1a:	b10b      	cbz	r3, 201c20 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201c1c:	4620      	mov	r0, r4
  201c1e:	4798      	blx	r3
  201c20:	2300      	movs	r3, #0
  201c22:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201c26:	4628      	mov	r0, r5
}
  201c28:	bd70      	pop	{r4, r5, r6, pc}
  201c2a:	f385 8811 	msr	BASEPRI, r5
  201c2e:	bd70      	pop	{r4, r5, r6, pc}

00201c30 <_gett.lto_priv.36>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201c30:	300c      	adds	r0, #12
  201c32:	f7ff bfd5 	b.w	201be0 <iqGetTimeout>
  201c36:	bf00      	nop
	...

00201c40 <_get.lto_priv.34>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201c40:	300c      	adds	r0, #12
  201c42:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201c46:	f7ff bfcb 	b.w	201be0 <iqGetTimeout>
  201c4a:	bf00      	nop
  201c4c:	0000      	movs	r0, r0
	...

00201c50 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  201c50:	e7fe      	b.n	201c50 <BusFault_Handler>
  201c52:	bf00      	nop
	...

00201c60 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201c60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201c62:	4f12      	ldr	r7, [pc, #72]	; (201cac <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201c64:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201c66:	4d12      	ldr	r5, [pc, #72]	; (201cb0 <__init_ram_areas+0x50>)
  201c68:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  201c6c:	4c11      	ldr	r4, [pc, #68]	; (201cb4 <__init_ram_areas+0x54>)
  201c6e:	4b12      	ldr	r3, [pc, #72]	; (201cb8 <__init_ram_areas+0x58>)
  201c70:	4912      	ldr	r1, [pc, #72]	; (201cbc <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201c72:	429c      	cmp	r4, r3
  201c74:	d911      	bls.n	201c9a <__init_ram_areas+0x3a>
  201c76:	3904      	subs	r1, #4
  201c78:	461a      	mov	r2, r3
      *p = *tp;
  201c7a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  201c7e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201c82:	4294      	cmp	r4, r2
  201c84:	d8f9      	bhi.n	201c7a <__init_ram_areas+0x1a>
  201c86:	43da      	mvns	r2, r3
  201c88:	4414      	add	r4, r2
  201c8a:	f024 0403 	bic.w	r4, r4, #3
  201c8e:	3404      	adds	r4, #4
  201c90:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201c92:	429d      	cmp	r5, r3
  201c94:	d903      	bls.n	201c9e <__init_ram_areas+0x3e>
      *p = 0;
  201c96:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  201c9a:	429d      	cmp	r5, r3
  201c9c:	d8fb      	bhi.n	201c96 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  201c9e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201ca0:	4577      	cmp	r7, lr
  201ca2:	d202      	bcs.n	201caa <__init_ram_areas+0x4a>
  201ca4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201ca8:	e7e3      	b.n	201c72 <__init_ram_areas+0x12>
  201caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201cac:	08002fac 	.word	0x08002fac
  201cb0:	2002059c 	.word	0x2002059c
  201cb4:	2002059c 	.word	0x2002059c
  201cb8:	2002059c 	.word	0x2002059c
  201cbc:	0800380c 	.word	0x0800380c

00201cc0 <__default_exit>:
void __default_exit(void) {
  201cc0:	e7fe      	b.n	201cc0 <__default_exit>
  201cc2:	bf00      	nop
	...

00201cd0 <__late_init>:
void __late_init(void) {}
  201cd0:	4770      	bx	lr
  201cd2:	bf00      	nop
	...

00201ce0 <__core_init>:
void __core_init(void) {
  201ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201ce2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201ce6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  201cea:	4c1b      	ldr	r4, [pc, #108]	; (201d58 <__core_init+0x78>)
  201cec:	2200      	movs	r2, #0
  201cee:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201cf2:	6963      	ldr	r3, [r4, #20]
  201cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201cf8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  201cfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201cfe:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201d02:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201d06:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  201d0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  201d0e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201d12:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201d16:	f3c3 334e 	ubfx	r3, r3, #13, #15
  201d1a:	07b7      	lsls	r7, r6, #30
  201d1c:	015d      	lsls	r5, r3, #5
  201d1e:	ea05 000e 	and.w	r0, r5, lr
  201d22:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201d24:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201d26:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  201d2a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201d2c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201d30:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201d34:	1c53      	adds	r3, r2, #1
  201d36:	d1f6      	bne.n	201d26 <__core_init+0x46>
  201d38:	3d20      	subs	r5, #32
    } while(sets--);
  201d3a:	f115 0f20 	cmn.w	r5, #32
  201d3e:	d1ee      	bne.n	201d1e <__core_init+0x3e>
  201d40:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201d44:	6963      	ldr	r3, [r4, #20]
  201d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201d4a:	6163      	str	r3, [r4, #20]
  201d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201d50:	f3bf 8f6f 	isb	sy
  201d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201d56:	bf00      	nop
  201d58:	e000ed00 	.word	0xe000ed00
  201d5c:	00000000 	.word	0x00000000

00201d60 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  201d60:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);
  201d62:	4803      	ldr	r0, [pc, #12]	; (201d70 <Vector188+0x10>)
  201d64:	f7ff fa34 	bl	2011d0 <serve_interrupt.lto_priv.40>

  OSAL_IRQ_EPILOGUE();
}
  201d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201d6c:	f7ff baf8 	b.w	201360 <_port_irq_epilogue>
  201d70:	20000b5c 	.word	0x20000b5c
	...

00201d80 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
  201d80:	b508      	push	{r3, lr}
  serve_interrupt(&SD6);
  201d82:	4803      	ldr	r0, [pc, #12]	; (201d90 <Vector15C+0x10>)
  201d84:	f7ff fa24 	bl	2011d0 <serve_interrupt.lto_priv.40>
}
  201d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201d8c:	f7ff bae8 	b.w	201360 <_port_irq_epilogue>
  201d90:	20000afc 	.word	0x20000afc
	...

00201da0 <Vector114>:
OSAL_IRQ_HANDLER(STM32_UART5_HANDLER) {
  201da0:	b508      	push	{r3, lr}
  serve_interrupt(&SD5);
  201da2:	4803      	ldr	r0, [pc, #12]	; (201db0 <Vector114+0x10>)
  201da4:	f7ff fa14 	bl	2011d0 <serve_interrupt.lto_priv.40>
}
  201da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201dac:	f7ff bad8 	b.w	201360 <_port_irq_epilogue>
  201db0:	20000a9c 	.word	0x20000a9c
	...

00201dc0 <main>:
#include <stdlib.h>
#include <GPT_Counter.h>
#include <sonar.h>

int main(void)
{
  201dc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  201dc4:	b091      	sub	sp, #68	; 0x44
  tqp->next = (thread_t *)tqp;
  201dc6:	4d88      	ldr	r5, [pc, #544]	; (201fe8 <main+0x228>)
  ch.rlist.prio = NOPRIO;
  201dc8:	2600      	movs	r6, #0
  ch.vtlist.delta = (systime_t)-1;
  201dca:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201dce:	af00      	add	r7, sp, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201dd0:	f105 031c 	add.w	r3, r5, #28
  tmp->best       = (rtcnt_t)-1;
  201dd4:	f04f 32ff 	mov.w	r2, #4294967295
  chTMStartMeasurementX(&tm);
  201dd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
  tmp->cumulative = (rttime_t)0;
  201ddc:	f04f 0800 	mov.w	r8, #0
  201de0:	f04f 0900 	mov.w	r9, #0
  201de4:	602d      	str	r5, [r5, #0]
  chTMStartMeasurementX(&tm);
  201de6:	4620      	mov	r0, r4
  tqp->prev = (thread_t *)tqp;
  201de8:	606d      	str	r5, [r5, #4]
  ch.vtlist.delta = (systime_t)-1;
  201dea:	84a9      	strh	r1, [r5, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201dec:	61eb      	str	r3, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201dee:	622b      	str	r3, [r5, #32]
  tmp->best       = (rtcnt_t)-1;
  201df0:	62ba      	str	r2, [r7, #40]	; 0x28
  ch.rlist.newer = (thread_t *)&ch.rlist;
  201df2:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  201df4:	616d      	str	r5, [r5, #20]
  ch.rlist.prio = NOPRIO;
  201df6:	60ae      	str	r6, [r5, #8]
  ch.vtlist.systime = (systime_t)0;
  201df8:	84ee      	strh	r6, [r5, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201dfa:	672e      	str	r6, [r5, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  201dfc:	62fe      	str	r6, [r7, #44]	; 0x2c
  tmp->last       = (rtcnt_t)0;
  201dfe:	633e      	str	r6, [r7, #48]	; 0x30
  tmp->n          = (ucnt_t)0;
  201e00:	637e      	str	r6, [r7, #52]	; 0x34
  reg_value  =  (reg_value                                   |
  201e02:	f8df a228 	ldr.w	sl, [pc, #552]	; 20202c <main+0x26c>
  tmp->cumulative = (rttime_t)0;
  201e06:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
  chTMStartMeasurementX(&tm);
  201e0a:	f000 fd49 	bl	2028a0 <chTMStartMeasurementX.constprop.21>
  chTMStopMeasurementX(&tm);
  201e0e:	4620      	mov	r0, r4
  201e10:	f7ff fcf6 	bl	201800 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  201e14:	4b75      	ldr	r3, [pc, #468]	; (201fec <main+0x22c>)
  201e16:	4976      	ldr	r1, [pc, #472]	; (201ff0 <main+0x230>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201e18:	f64f 09ff 	movw	r9, #63743	; 0xf8ff
  nextmem = __heap_base__;
  201e1c:	4a75      	ldr	r2, [pc, #468]	; (201ff4 <main+0x234>)
  tp->prio      = prio;
  201e1e:	f04f 0c80 	mov.w	ip, #128	; 0x80
  201e22:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  201e24:	f103 0810 	add.w	r8, r3, #16
  201e28:	4973      	ldr	r1, [pc, #460]	; (201ff8 <main+0x238>)
  endmem  = __heap_end__;
  201e2a:	4874      	ldr	r0, [pc, #464]	; (201ffc <main+0x23c>)
  nextmem = __heap_base__;
  201e2c:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  201e2e:	2101      	movs	r1, #1
  endmem  = __heap_end__;
  201e30:	4a73      	ldr	r2, [pc, #460]	; (202000 <main+0x240>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  201e32:	f885 604d 	strb.w	r6, [r5, #77]	; 0x4d
  201e36:	6010      	str	r0, [r2, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  201e38:	4a72      	ldr	r2, [pc, #456]	; (202004 <main+0x244>)
  ch.tm.offset = tm.last;
  201e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
  201e3c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
  201e40:	6728      	str	r0, [r5, #112]	; 0x70
  REG_INSERT(tp);
  201e42:	f105 002c 	add.w	r0, r5, #44	; 0x2c
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201e46:	ea0e 0e09 	and.w	lr, lr, r9
  tp->prio      = prio;
  201e4a:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  tp->realprio  = prio;
  201e4e:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68
  reg_value  =  (reg_value                                   |
  201e52:	ea4e 0a0a 	orr.w	sl, lr, sl
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201e56:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 202030 <main+0x270>
  REG_INSERT(tp);
  201e5a:	f8d5 e014 	ldr.w	lr, [r5, #20]
  tp->name      = name;
  201e5e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 202034 <main+0x274>
  tp->epending  = (eventmask_t)0;
  201e62:	662e      	str	r6, [r5, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  201e64:	619e      	str	r6, [r3, #24]
  201e66:	f8c3 8010 	str.w	r8, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  201e6a:	f8c3 8014 	str.w	r8, [r3, #20]
  tlp->next = (thread_t *)tlp;
  201e6e:	f105 0854 	add.w	r8, r5, #84	; 0x54
  REG_INSERT(tp);
  201e72:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  201e76:	f885 104e 	strb.w	r1, [r5, #78]	; 0x4e
  tp->mtxlist   = NULL;
  201e7a:	666e      	str	r6, [r5, #100]	; 0x64
  REG_INSERT(tp);
  201e7c:	63ed      	str	r5, [r5, #60]	; 0x3c
  tp->name      = name;
  201e7e:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
  REG_INSERT(tp);
  201e82:	f8ce 0010 	str.w	r0, [lr, #16]
  tqp->next = (thread_t *)tqp;
  201e86:	f105 0e58 	add.w	lr, r5, #88	; 0x58
  SCB->AIRCR =  reg_value;
  201e8a:	f8c2 a00c 	str.w	sl, [r2, #12]
  201e8e:	f8dc 000c 	ldr.w	r0, [ip, #12]
  H_NEXT(&default_heap.header) = NULL;
  201e92:	609e      	str	r6, [r3, #8]
  H_PAGES(&default_heap.header) = 0;
  201e94:	60de      	str	r6, [r3, #12]
  201e96:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  201e9a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
  tlp->next = (thread_t *)tlp;
  201e9e:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201ea2:	64ae      	str	r6, [r5, #72]	; 0x48
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  201ea4:	f04f 0810 	mov.w	r8, #16
  201ea8:	616b      	str	r3, [r5, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  201eaa:	61ab      	str	r3, [r5, #24]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201eac:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
  DWT->LAR = 0xC5ACCE55U;
  201eb0:	4b55      	ldr	r3, [pc, #340]	; (202008 <main+0x248>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201eb2:	f8cc 000c 	str.w	r0, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  201eb6:	4855      	ldr	r0, [pc, #340]	; (20200c <main+0x24c>)
  tqp->next = (thread_t *)tqp;
  201eb8:	f8c5 e058 	str.w	lr, [r5, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201ebc:	f8c5 e05c 	str.w	lr, [r5, #92]	; 0x5c
  201ec0:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201ec4:	6818      	ldr	r0, [r3, #0]
  201ec6:	4308      	orrs	r0, r1
  201ec8:	6018      	str	r0, [r3, #0]
  201eca:	f04f 0320 	mov.w	r3, #32
  201ece:	f882 801f 	strb.w	r8, [r2, #31]
  201ed2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201ed6:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
  201eda:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201edc:	2320      	movs	r3, #32
  201ede:	f383 8811 	msr	BASEPRI, r3
  tp->wabase = tdp->wbase;
  201ee2:	4a4b      	ldr	r2, [pc, #300]	; (202010 <main+0x250>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ee4:	f8df c150 	ldr.w	ip, [pc, #336]	; 202038 <main+0x278>
  tp->prio      = prio;
  201ee8:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
  REG_INSERT(tp);
  201eec:	f102 0090 	add.w	r0, r2, #144	; 0x90
  tp->realprio  = prio;
  201ef0:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ef4:	f102 0e6c 	add.w	lr, r2, #108	; 0x6c
  tp->refs      = (trefs_t)1;
  201ef8:	f882 10b2 	strb.w	r1, [r2, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201efc:	4945      	ldr	r1, [pc, #276]	; (202014 <main+0x254>)
  REG_INSERT(tp);
  201efe:	696b      	ldr	r3, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201f00:	f8c2 c06c 	str.w	ip, [r2, #108]	; 0x6c
  tp->state     = CH_STATE_WTSTART;
  201f04:	f04f 0c02 	mov.w	ip, #2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201f08:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  tp->name      = name;
  201f0c:	4942      	ldr	r1, [pc, #264]	; (202018 <main+0x258>)
  tp->state     = CH_STATE_WTSTART;
  201f0e:	f882 c0b0 	strb.w	ip, [r2, #176]	; 0xb0
  REG_INSERT(tp);
  201f12:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201f16:	f882 60b1 	strb.w	r6, [r2, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201f1a:	f8c2 60c4 	str.w	r6, [r2, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201f1e:	f8c2 e09c 	str.w	lr, [r2, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  201f22:	f102 0eb8 	add.w	lr, r2, #184	; 0xb8
  tp->name      = name;
  201f26:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201f2a:	6716      	str	r6, [r2, #112]	; 0x70
  tp->mtxlist   = NULL;
  201f2c:	f8c2 60c8 	str.w	r6, [r2, #200]	; 0xc8
  REG_INSERT(tp);
  201f30:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  201f34:	f8c2 20ac 	str.w	r2, [r2, #172]	; 0xac
  REG_INSERT(tp);
  201f38:	6118      	str	r0, [r3, #16]
  tqp->next = (thread_t *)tqp;
  201f3a:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  thread_t *otp = currp;
  201f3e:	f8d5 c018 	ldr.w	ip, [r5, #24]
  ntp->u.rdymsg = msg;
  201f42:	f8c2 60b4 	str.w	r6, [r2, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  201f46:	f8dc 1008 	ldr.w	r1, [ip, #8]
  201f4a:	6168      	str	r0, [r5, #20]
  tlp->next = (thread_t *)tlp;
  201f4c:	f8c2 e0b8 	str.w	lr, [r2, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  201f50:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  201f54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  201f58:	2900      	cmp	r1, #0
  201f5a:	f000 838d 	beq.w	202678 <main+0x8b8>
  tp->state = CH_STATE_READY;
  201f5e:	f882 60b0 	strb.w	r6, [r2, #176]	; 0xb0
    cp = cp->queue.next;
  201f62:	682d      	ldr	r5, [r5, #0]
  } while (cp->prio >= tp->prio);
  201f64:	68ab      	ldr	r3, [r5, #8]
  201f66:	2b00      	cmp	r3, #0
  201f68:	d1fb      	bne.n	201f62 <main+0x1a2>
  tp->queue.next             = cp;
  201f6a:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  201f6e:	6869      	ldr	r1, [r5, #4]
  201f70:	60bb      	str	r3, [r7, #8]
  201f72:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  201f76:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
  201f78:	6068      	str	r0, [r5, #4]
  201f7a:	f383 8811 	msr	BASEPRI, r3
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  201f7e:	4a27      	ldr	r2, [pc, #156]	; (20201c <main+0x25c>)
  201f80:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  201f84:	4d26      	ldr	r5, [pc, #152]	; (202020 <main+0x260>)
  rccResetAHB1(~0);
  201f86:	6910      	ldr	r0, [r2, #16]
  201f88:	6111      	str	r1, [r2, #16]
  201f8a:	6113      	str	r3, [r2, #16]
  rccResetAHB2(~0);
  201f8c:	6950      	ldr	r0, [r2, #20]
  201f8e:	6151      	str	r1, [r2, #20]
  201f90:	6153      	str	r3, [r2, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  201f92:	6a10      	ldr	r0, [r2, #32]
  201f94:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  201f98:	6210      	str	r0, [r2, #32]
  201f9a:	6213      	str	r3, [r2, #32]
  rccResetAPB2(~0);
  201f9c:	6a50      	ldr	r0, [r2, #36]	; 0x24
  201f9e:	6251      	str	r1, [r2, #36]	; 0x24
  201fa0:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  201fa2:	6829      	ldr	r1, [r5, #0]
  201fa4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  201fa8:	6029      	str	r1, [r5, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  201faa:	6f11      	ldr	r1, [r2, #112]	; 0x70
  201fac:	f401 7140 	and.w	r1, r1, #768	; 0x300
  201fb0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  201fb4:	d004      	beq.n	201fc0 <main+0x200>
    RCC->BDCR = RCC_BDCR_BDRST;
  201fb6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    RCC->BDCR = 0;
  201fba:	68bb      	ldr	r3, [r7, #8]
    RCC->BDCR = RCC_BDCR_BDRST;
  201fbc:	6711      	str	r1, [r2, #112]	; 0x70
    RCC->BDCR = 0;
  201fbe:	6713      	str	r3, [r2, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201fc0:	4a16      	ldr	r2, [pc, #88]	; (20201c <main+0x25c>)
  201fc2:	68bb      	ldr	r3, [r7, #8]
  201fc4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201fc6:	4610      	mov	r0, r2
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201fc8:	f041 0119 	orr.w	r1, r1, #25
  201fcc:	6711      	str	r1, [r2, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201fce:	6f02      	ldr	r2, [r0, #112]	; 0x70
  201fd0:	0792      	lsls	r2, r2, #30
  201fd2:	d5fc      	bpl.n	201fce <main+0x20e>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201fd4:	4812      	ldr	r0, [pc, #72]	; (202020 <main+0x260>)
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
  201fd6:	2500      	movs	r5, #0
  201fd8:	4912      	ldr	r1, [pc, #72]	; (202024 <main+0x264>)
  201fda:	6842      	ldr	r2, [r0, #4]
  201fdc:	4e12      	ldr	r6, [pc, #72]	; (202028 <main+0x268>)
  201fde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  201fe2:	6042      	str	r2, [r0, #4]
  201fe4:	e02c      	b.n	202040 <main+0x280>
  201fe6:	bf00      	nop
  201fe8:	20000844 	.word	0x20000844
  201fec:	20000990 	.word	0x20000990
  201ff0:	00201041 	.word	0x00201041
  201ff4:	20000a38 	.word	0x20000a38
  201ff8:	200205a0 	.word	0x200205a0
  201ffc:	20080000 	.word	0x20080000
  202000:	20000a30 	.word	0x20000a30
  202004:	e000ed00 	.word	0xe000ed00
  202008:	e0001000 	.word	0xe0001000
  20200c:	c5acce55 	.word	0xc5acce55
  202010:	200008b8 	.word	0x200008b8
  202014:	002002e5 	.word	0x002002e5
  202018:	08003114 	.word	0x08003114
  20201c:	40023800 	.word	0x40023800
  202020:	40007000 	.word	0x40007000
  202024:	08003048 	.word	0x08003048
  202028:	40026010 	.word	0x40026010
  20202c:	05fa0300 	.word	0x05fa0300
  202030:	e000edf0 	.word	0xe000edf0
  202034:	080030fc 	.word	0x080030fc
  202038:	00201191 	.word	0x00201191
  20203c:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    dma_isr_redir[i].dma_func = NULL;
  202040:	4acb      	ldr	r2, [pc, #812]	; (202370 <main+0x5b0>)
  202042:	310c      	adds	r1, #12
    _stm32_dma_streams[i].stream->CR = 0U;
  202044:	6035      	str	r5, [r6, #0]
    dma_isr_redir[i].dma_func = NULL;
  202046:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  20204a:	3301      	adds	r3, #1
  20204c:	2b10      	cmp	r3, #16
  20204e:	d1f5      	bne.n	20203c <main+0x27c>
  202050:	60bb      	str	r3, [r7, #8]
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  202052:	f04f 32ff 	mov.w	r2, #4294967295
  202056:	4bc7      	ldr	r3, [pc, #796]	; (202374 <main+0x5b4>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  202058:	f240 76ff 	movw	r6, #2047	; 0x7ff
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  20205c:	49c6      	ldr	r1, [pc, #792]	; (202378 <main+0x5b8>)
  gpiop->ODR     = config->odr;
  20205e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->LIFCR = 0xFFFFFFFFU;
  202062:	609a      	str	r2, [r3, #8]
  202064:	f64b 7b7e 	movw	fp, #49022	; 0xbf7e
  DMA1->HIFCR = 0xFFFFFFFFU;
  202068:	60da      	str	r2, [r3, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  20206a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
  DMA2->LIFCR = 0xFFFFFFFFU;
  20206e:	608a      	str	r2, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  202070:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  DMA2->HIFCR = 0xFFFFFFFFU;
  202074:	60ca      	str	r2, [r1, #12]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  202076:	f04f 0901 	mov.w	r9, #1
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  20207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  20207c:	49bf      	ldr	r1, [pc, #764]	; (20237c <main+0x5bc>)
  20207e:	ea43 0e06 	orr.w	lr, r3, r6
  202082:	4bbf      	ldr	r3, [pc, #764]	; (202380 <main+0x5c0>)
  tqp->next = (thread_t *)tqp;
  202084:	f101 0a18 	add.w	sl, r1, #24
  sdp->vmt = &vmt;
  202088:	f8df 8364 	ldr.w	r8, [pc, #868]	; 2023f0 <main+0x630>
  20208c:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  202090:	f8d3 e050 	ldr.w	lr, [r3, #80]	; 0x50
  202094:	ea4e 0e06 	orr.w	lr, lr, r6
  gpiop->OTYPER  = config->otyper;
  202098:	4eba      	ldr	r6, [pc, #744]	; (202384 <main+0x5c4>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  20209a:	f8c3 e050 	str.w	lr, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
  20209e:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
  gpiop->PUPDR   = config->pupdr;
  2020a2:	f8df e350 	ldr.w	lr, [pc, #848]	; 2023f4 <main+0x634>
  gpiop->OTYPER  = config->otyper;
  2020a6:	6075      	str	r5, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2020a8:	60b2      	str	r2, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
  2020aa:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->AFRL    = config->afrl;
  2020ae:	f8df e348 	ldr.w	lr, [pc, #840]	; 2023f8 <main+0x638>
  gpiop->ODR     = config->odr;
  2020b2:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
  2020b4:	f8c6 e020 	str.w	lr, [r6, #32]
  gpiop->AFRH    = config->afrh;
  2020b8:	f8df e340 	ldr.w	lr, [pc, #832]	; 2023fc <main+0x63c>
  2020bc:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2020c0:	f8df e33c 	ldr.w	lr, [pc, #828]	; 202400 <main+0x640>
  2020c4:	f8c6 e000 	str.w	lr, [r6]
  gpiop->OTYPER  = config->otyper;
  2020c8:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2020ca:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
  2020cc:	f102 428a 	add.w	r2, r2, #1157627904	; 0x45000000
  2020d0:	f8df e330 	ldr.w	lr, [pc, #816]	; 202404 <main+0x644>
  2020d4:	f102 1255 	add.w	r2, r2, #5570645	; 0x550055
  2020d8:	f502 52a8 	add.w	r2, r2, #5376	; 0x1500
  2020dc:	60da      	str	r2, [r3, #12]
  gpiop->AFRH    = config->afrh;
  2020de:	f44f 0230 	mov.w	r2, #11534336	; 0xb00000
  gpiop->ODR     = config->odr;
  2020e2:	f8c3 b014 	str.w	fp, [r3, #20]
  gpiop->AFRL    = config->afrl;
  2020e6:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
  2020e8:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2020ea:	4aa7      	ldr	r2, [pc, #668]	; (202388 <main+0x5c8>)
  gpiop->OTYPER  = config->otyper;
  2020ec:	f8df b318 	ldr.w	fp, [pc, #792]	; 202408 <main+0x648>
  gpiop->MODER   = config->moder;
  2020f0:	601a      	str	r2, [r3, #0]
  gpiop->OSPEEDR = config->ospeedr;
  2020f2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
  gpiop->PUPDR   = config->pupdr;
  2020f6:	4aa5      	ldr	r2, [pc, #660]	; (20238c <main+0x5cc>)
  gpiop->OTYPER  = config->otyper;
  2020f8:	f8cb 5004 	str.w	r5, [fp, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2020fc:	f8cb 3008 	str.w	r3, [fp, #8]
  gpiop->MODER   = config->moder;
  202100:	f640 2308 	movw	r3, #2568	; 0xa08
  gpiop->PUPDR   = config->pupdr;
  202104:	f8cb 200c 	str.w	r2, [fp, #12]
  gpiop->AFRL    = config->afrl;
  202108:	4aa1      	ldr	r2, [pc, #644]	; (202390 <main+0x5d0>)
  gpiop->ODR     = config->odr;
  20210a:	f8cb 0014 	str.w	r0, [fp, #20]
  gpiop->AFRL    = config->afrl;
  20210e:	f8cb 2020 	str.w	r2, [fp, #32]
  gpiop->AFRH    = config->afrh;
  202112:	f8cb 5024 	str.w	r5, [fp, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202116:	f8cb 3000 	str.w	r3, [fp]
  gpiop->OSPEEDR = config->ospeedr;
  20211a:	f46f 1340 	mvn.w	r3, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  20211e:	f8c6 5c04 	str.w	r5, [r6, #3076]	; 0xc04
  gpiop->PUPDR   = config->pupdr;
  202122:	4a9c      	ldr	r2, [pc, #624]	; (202394 <main+0x5d4>)
  gpiop->OSPEEDR = config->ospeedr;
  202124:	f8c6 3c08 	str.w	r3, [r6, #3080]	; 0xc08
  gpiop->AFRH    = config->afrh;
  202128:	2377      	movs	r3, #119	; 0x77
  gpiop->PUPDR   = config->pupdr;
  20212a:	f8c6 2c0c 	str.w	r2, [r6, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
  20212e:	f8c6 0c14 	str.w	r0, [r6, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
  202132:	f8c6 5c20 	str.w	r5, [r6, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
  202136:	f8c6 3c24 	str.w	r3, [r6, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
  20213a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
  gpiop->OSPEEDR = config->ospeedr;
  20213e:	4a96      	ldr	r2, [pc, #600]	; (202398 <main+0x5d8>)
  gpiop->MODER   = config->moder;
  202140:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
  gpiop->OTYPER  = config->otyper;
  202144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  gpiop->OSPEEDR = config->ospeedr;
  202148:	4e94      	ldr	r6, [pc, #592]	; (20239c <main+0x5dc>)
  gpiop->OTYPER  = config->otyper;
  20214a:	f5a3 23fe 	sub.w	r3, r3, #520192	; 0x7f000
  20214e:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202150:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
  202152:	f8c3 c00c 	str.w	ip, [r3, #12]
  gpiop->ODR     = config->odr;
  202156:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
  202158:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
  20215a:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20215c:	601d      	str	r5, [r3, #0]
  gpiop->OTYPER  = config->otyper;
  20215e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  202162:	605d      	str	r5, [r3, #4]
  202164:	4a8e      	ldr	r2, [pc, #568]	; (2023a0 <main+0x5e0>)
  gpiop->OSPEEDR = config->ospeedr;
  202166:	609e      	str	r6, [r3, #8]
  202168:	4e8e      	ldr	r6, [pc, #568]	; (2023a4 <main+0x5e4>)
  gpiop->PUPDR   = config->pupdr;
  20216a:	f8c3 c00c 	str.w	ip, [r3, #12]
  gpiop->ODR     = config->odr;
  20216e:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
  202170:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
  202172:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202174:	601d      	str	r5, [r3, #0]
  202176:	f04f 6308 	mov.w	r3, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
  20217a:	6055      	str	r5, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20217c:	6096      	str	r6, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  20217e:	4e8a      	ldr	r6, [pc, #552]	; (2023a8 <main+0x5e8>)
  202180:	60d6      	str	r6, [r2, #12]
  gpiop->AFRH    = config->afrh;
  202182:	4e8a      	ldr	r6, [pc, #552]	; (2023ac <main+0x5ec>)
  gpiop->ODR     = config->odr;
  202184:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
  202186:	6215      	str	r5, [r2, #32]
  gpiop->AFRH    = config->afrh;
  202188:	6256      	str	r6, [r2, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
  20218a:	4e89      	ldr	r6, [pc, #548]	; (2023b0 <main+0x5f0>)
  gpiop->MODER   = config->moder;
  20218c:	6013      	str	r3, [r2, #0]
  gpiop->OSPEEDR = config->ospeedr;
  20218e:	230f      	movs	r3, #15
  gpiop->OTYPER  = config->otyper;
  202190:	6075      	str	r5, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202192:	60b3      	str	r3, [r6, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202194:	f04f 0360 	mov.w	r3, #96	; 0x60
  gpiop->PUPDR   = config->pupdr;
  202198:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
  20219c:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
  20219e:	6235      	str	r5, [r6, #32]
  gpiop->AFRH    = config->afrh;
  2021a0:	6275      	str	r5, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2021a2:	6035      	str	r5, [r6, #0]
  gpiop->OTYPER  = config->otyper;
  2021a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
  2021a8:	6075      	str	r5, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2021aa:	60b5      	str	r5, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
  2021ac:	f8c6 c00c 	str.w	ip, [r6, #12]
  adcp->config   = NULL;
  2021b0:	604d      	str	r5, [r1, #4]
  gpiop->ODR     = config->odr;
  2021b2:	6170      	str	r0, [r6, #20]
  adcp->samples  = NULL;
  2021b4:	608d      	str	r5, [r1, #8]
  gpiop->AFRL    = config->afrl;
  2021b6:	6235      	str	r5, [r6, #32]
  adcp->depth    = 0;
  2021b8:	60cd      	str	r5, [r1, #12]
  gpiop->AFRH    = config->afrh;
  2021ba:	6275      	str	r5, [r6, #36]	; 0x24
  adcp->grpp     = NULL;
  2021bc:	610d      	str	r5, [r1, #16]
  gpiop->MODER   = config->moder;
  2021be:	6035      	str	r5, [r6, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  2021c0:	614d      	str	r5, [r1, #20]
  gpiop->OTYPER  = config->otyper;
  2021c2:	f8c6 5404 	str.w	r5, [r6, #1028]	; 0x404
  2021c6:	620d      	str	r5, [r1, #32]
  gpiop->OSPEEDR = config->ospeedr;
  2021c8:	f8c6 5408 	str.w	r5, [r6, #1032]	; 0x408
  2021cc:	f8c1 a018 	str.w	sl, [r1, #24]
  gpiop->PUPDR   = config->pupdr;
  2021d0:	f8c6 c40c 	str.w	ip, [r6, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  2021d4:	f8c1 a01c 	str.w	sl, [r1, #28]
  gpiop->ODR     = config->odr;
  2021d8:	f8c6 0414 	str.w	r0, [r6, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2021dc:	f8c6 5420 	str.w	r5, [r6, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2021e0:	f8c6 5424 	str.w	r5, [r6, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2021e4:	f8c6 5400 	str.w	r5, [r6, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2021e8:	f8c6 5804 	str.w	r5, [r6, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2021ec:	f8c6 5808 	str.w	r5, [r6, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2021f0:	f8c6 c80c 	str.w	ip, [r6, #2060]	; 0x80c
  2021f4:	46c4      	mov	ip, r8
  gpiop->ODR     = config->odr;
  2021f6:	f8c6 0814 	str.w	r0, [r6, #2068]	; 0x814
  ADCD1.adc = ADC1;
  2021fa:	486e      	ldr	r0, [pc, #440]	; (2023b4 <main+0x5f4>)
  gpiop->AFRL    = config->afrl;
  2021fc:	f8c6 5820 	str.w	r5, [r6, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202200:	f8c6 5824 	str.w	r5, [r6, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  202204:	f8c6 5800 	str.w	r5, [r6, #2048]	; 0x800
  202208:	6288      	str	r0, [r1, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  20220a:	486b      	ldr	r0, [pc, #428]	; (2023b8 <main+0x5f8>)
  20220c:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 20240c <main+0x64c>
  202210:	62c8      	str	r0, [r1, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  202212:	486a      	ldr	r0, [pc, #424]	; (2023bc <main+0x5fc>)
  202214:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 2023d8 <main+0x618>
  adcp->state    = ADC_STOP;
  202218:	f881 9000 	strb.w	r9, [r1]
  20221c:	6308      	str	r0, [r1, #48]	; 0x30
  20221e:	f88a 3312 	strb.w	r3, [sl, #786]	; 0x312
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202222:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  oqp->q_counter = size;
  202226:	68b9      	ldr	r1, [r7, #8]
  202228:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20222c:	f8ca 3000 	str.w	r3, [sl]
  sdp->state = SD_STOP;
  202230:	4673      	mov	r3, lr
  iqp->q_counter = 0;
  202232:	f8ce 5014 	str.w	r5, [lr, #20]
  oqp->q_counter = size;
  202236:	f8ce 1038 	str.w	r1, [lr, #56]	; 0x38
  iqp->q_buffer  = bp;
  20223a:	4961      	ldr	r1, [pc, #388]	; (2023c0 <main+0x600>)
  oqp->q_notify  = onfy;
  20223c:	4861      	ldr	r0, [pc, #388]	; (2023c4 <main+0x604>)
  iqp->q_buffer  = bp;
  20223e:	f8ce 1018 	str.w	r1, [lr, #24]
  iqp->q_rdptr   = bp;
  202242:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
  iqp->q_wrptr   = bp;
  202246:	f8ce 1020 	str.w	r1, [lr, #32]
  iqp->q_top     = bp + size;
  20224a:	3110      	adds	r1, #16
  oqp->q_notify  = onfy;
  20224c:	f8ce 004c 	str.w	r0, [lr, #76]	; 0x4c
  iqp->q_top     = bp + size;
  202250:	f8ce 101c 	str.w	r1, [lr, #28]
  oqp->q_buffer  = bp;
  202254:	495c      	ldr	r1, [pc, #368]	; (2023c8 <main+0x608>)
  sdp->vmt = &vmt;
  202256:	485d      	ldr	r0, [pc, #372]	; (2023cc <main+0x60c>)
  202258:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  20225c:	f8ce 1048 	str.w	r1, [lr, #72]	; 0x48
  oqp->q_wrptr   = bp;
  202260:	f8ce 1044 	str.w	r1, [lr, #68]	; 0x44
  oqp->q_top     = bp + size;
  202264:	3110      	adds	r1, #16
  sdp->state = SD_STOP;
  202266:	f88e 9008 	strb.w	r9, [lr, #8]
  20226a:	f8ce 1040 	str.w	r1, [lr, #64]	; 0x40

#if STM32_SERIAL_USE_UART5
  sdObjectInit(&SD5);
  iqObjectInit(&SD5.iqueue, sd_in_buf5, sizeof sd_in_buf5, NULL, &SD5);
  oqObjectInit(&SD5.oqueue, sd_out_buf5, sizeof sd_out_buf5, notify5, &SD5);
  SD5.usart = UART5;
  20226e:	4958      	ldr	r1, [pc, #352]	; (2023d0 <main+0x610>)
  iqp->q_notify  = infy;
  202270:	f8ce 5028 	str.w	r5, [lr, #40]	; 0x28
  iqp->q_link    = link;
  202274:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  oqp->q_link    = link;
  202278:	f8c3 e050 	str.w	lr, [r3, #80]	; 0x50
  20227c:	f8ce 1054 	str.w	r1, [lr, #84]	; 0x54
  GPTD1.tim = STM32_TIM1;
  202280:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
  sdp->vmt = &vmt;
  202284:	f84e 0b04 	str.w	r0, [lr], #4
  202288:	4e52      	ldr	r6, [pc, #328]	; (2023d4 <main+0x614>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  20228a:	f8c3 e004 	str.w	lr, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20228e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  202292:	f886 9000 	strb.w	r9, [r6]
  202296:	60f1      	str	r1, [r6, #12]
  gptp->config = NULL;
  202298:	6075      	str	r5, [r6, #4]
  20229a:	f88a 3335 	strb.w	r3, [sl, #821]	; 0x335
  tqp->next = (thread_t *)tqp;
  20229e:	4b4e      	ldr	r3, [pc, #312]	; (2023d8 <main+0x618>)
  2022a0:	4a4e      	ldr	r2, [pc, #312]	; (2023dc <main+0x61c>)
  2022a2:	f103 010c 	add.w	r1, r3, #12
  2022a6:	4696      	mov	lr, r2
  2022a8:	60d9      	str	r1, [r3, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2022aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  2022ae:	f8ca 3184 	str.w	r3, [sl, #388]	; 0x184
  tqp->prev = (thread_t *)tqp;
  2022b2:	f1a1 030c 	sub.w	r3, r1, #12
  2022b6:	6119      	str	r1, [r3, #16]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2022b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  oqp->q_buffer  = bp;
  2022bc:	4948      	ldr	r1, [pc, #288]	; (2023e0 <main+0x620>)
  2022be:	f8ca 3004 	str.w	r3, [sl, #4]
  tqp->next = (thread_t *)tqp;
  2022c2:	4b45      	ldr	r3, [pc, #276]	; (2023d8 <main+0x618>)
  2022c4:	f84c 0b04 	str.w	r0, [ip], #4
  2022c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
  2022cc:	f8c8 c004 	str.w	ip, [r8, #4]
  oqp->q_top     = bp + size;
  2022d0:	f101 0c10 	add.w	ip, r1, #16
  2022d4:	6318      	str	r0, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  2022d6:	6358      	str	r0, [r3, #52]	; 0x34
  SD5.clock = STM32_UART5CLK;
  2022d8:	4842      	ldr	r0, [pc, #264]	; (2023e4 <main+0x624>)
  iqp->q_counter = 0;
  2022da:	f8c8 5014 	str.w	r5, [r8, #20]
  2022de:	6598      	str	r0, [r3, #88]	; 0x58
  oqp->q_counter = size;
  2022e0:	68bb      	ldr	r3, [r7, #8]
  sdp->state = SD_STOP;
  2022e2:	f888 9008 	strb.w	r9, [r8, #8]
  2022e6:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2022ea:	f06f 033f 	mvn.w	r3, #63	; 0x3f
  iqp->q_notify  = infy;
  2022ee:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
  iqp->q_link    = link;
  2022f2:	f8c8 802c 	str.w	r8, [r8, #44]	; 0x2c
  2022f6:	f88a 3347 	strb.w	r3, [sl, #839]	; 0x347
  iqp->q_buffer  = bp;
  2022fa:	4b3b      	ldr	r3, [pc, #236]	; (2023e8 <main+0x628>)
  sdp->vmt = &vmt;
  2022fc:	4833      	ldr	r0, [pc, #204]	; (2023cc <main+0x60c>)
  2022fe:	f8c8 3018 	str.w	r3, [r8, #24]
  iqp->q_rdptr   = bp;
  202302:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  iqp->q_wrptr   = bp;
  202306:	f8c8 3020 	str.w	r3, [r8, #32]
  iqp->q_top     = bp + size;
  20230a:	3310      	adds	r3, #16
  oqp->q_link    = link;
  20230c:	f8c8 8050 	str.w	r8, [r8, #80]	; 0x50
  iqp->q_top     = bp + size;
  202310:	f8c8 301c 	str.w	r3, [r8, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202314:	2380      	movs	r3, #128	; 0x80
  202316:	f8ca 3188 	str.w	r3, [sl, #392]	; 0x188
  sdp->state = SD_STOP;
  20231a:	f882 9008 	strb.w	r9, [r2, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20231e:	f8ca 3008 	str.w	r3, [sl, #8]
  sdp->vmt = &vmt;
  202322:	f84e 0b04 	str.w	r0, [lr], #4
  tqp->next = (thread_t *)tqp;
  202326:	f108 0030 	add.w	r0, r8, #48	; 0x30
  20232a:	f8c2 e004 	str.w	lr, [r2, #4]
  20232e:	f108 0e0c 	add.w	lr, r8, #12
  oqp->q_top     = bp + size;
  202332:	f8c8 c040 	str.w	ip, [r8, #64]	; 0x40
  oqp->q_notify  = onfy;
  202336:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 202410 <main+0x650>
  iqp->q_buffer  = bp;
  20233a:	4b2c      	ldr	r3, [pc, #176]	; (2023ec <main+0x62c>)
  oqp->q_buffer  = bp;
  20233c:	f8c8 103c 	str.w	r1, [r8, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  202340:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
  oqp->q_wrptr   = bp;
  202344:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
  202348:	f102 010c 	add.w	r1, r2, #12
  20234c:	f8c8 e00c 	str.w	lr, [r8, #12]
  oqp->q_notify  = onfy;
  202350:	f8c8 c04c 	str.w	ip, [r8, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
  202354:	f8c8 e010 	str.w	lr, [r8, #16]

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6);
  iqObjectInit(&SD6.iqueue, sd_in_buf6, sizeof sd_in_buf6, NULL, &SD6);
  oqObjectInit(&SD6.oqueue, sd_out_buf6, sizeof sd_out_buf6, notify6, &SD6);
  SD6.usart = USART6;
  202358:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 202414 <main+0x654>
  SD6.clock = STM32_USART6CLK;
  20235c:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 202418 <main+0x658>
  SD6.usart = USART6;
  202360:	f8c8 c054 	str.w	ip, [r8, #84]	; 0x54
  tqp->next = (thread_t *)tqp;
  202364:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  202368:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
  20236c:	e056      	b.n	20241c <main+0x65c>
  20236e:	bf00      	nop
  202370:	200009b0 	.word	0x200009b0
  202374:	40026000 	.word	0x40026000
  202378:	40026400 	.word	0x40026400
  20237c:	20000800 	.word	0x20000800
  202380:	40023800 	.word	0x40023800
  202384:	40020000 	.word	0x40020000
  202388:	18004001 	.word	0x18004001
  20238c:	01555051 	.word	0x01555051
  202390:	00bb00b0 	.word	0x00bb00b0
  202394:	55505555 	.word	0x55505555
  202398:	cffffff3 	.word	0xcffffff3
  20239c:	003fcfff 	.word	0x003fcfff
  2023a0:	40021800 	.word	0x40021800
  2023a4:	3cccf000 	.word	0x3cccf000
  2023a8:	51155555 	.word	0x51155555
  2023ac:	00b0b000 	.word	0x00b0b000
  2023b0:	40021c00 	.word	0x40021c00
  2023b4:	40012000 	.word	0x40012000
  2023b8:	080030cc 	.word	0x080030cc
  2023bc:	00022c16 	.word	0x00022c16
  2023c0:	20000a3c 	.word	0x20000a3c
  2023c4:	00201011 	.word	0x00201011
  2023c8:	20000a6c 	.word	0x20000a6c
  2023cc:	08003134 	.word	0x08003134
  2023d0:	40005000 	.word	0x40005000
  2023d4:	20000834 	.word	0x20000834
  2023d8:	20000a9c 	.word	0x20000a9c
  2023dc:	20000b5c 	.word	0x20000b5c
  2023e0:	20000a7c 	.word	0x20000a7c
  2023e4:	0337f980 	.word	0x0337f980
  2023e8:	20000a4c 	.word	0x20000a4c
  2023ec:	20000a5c 	.word	0x20000a5c
  2023f0:	20000afc 	.word	0x20000afc
  2023f4:	40005551 	.word	0x40005551
  2023f8:	b0000bb0 	.word	0xb0000bb0
  2023fc:	000aaa0a 	.word	0x000aaa0a
  202400:	2aae8028 	.word	0x2aae8028
  202404:	55555550 	.word	0x55555550
  202408:	40020800 	.word	0x40020800
  20240c:	e000e100 	.word	0xe000e100
  202410:	00201001 	.word	0x00201001
  202414:	40011400 	.word	0x40011400
  202418:	066ff300 	.word	0x066ff300
  SD6.clock = STM32_USART6CLK;
  20241c:	f8c8 e058 	str.w	lr, [r8, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  202420:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
  202424:	60d1      	str	r1, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  202426:	6111      	str	r1, [r2, #16]
  iqp->q_counter = 0;
  202428:	6155      	str	r5, [r2, #20]
  iqp->q_buffer  = bp;
  20242a:	6193      	str	r3, [r2, #24]
  iqp->q_rdptr   = bp;
  20242c:	6253      	str	r3, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  20242e:	6213      	str	r3, [r2, #32]
  iqp->q_top     = bp + size;
  202430:	3310      	adds	r3, #16
  iqp->q_notify  = infy;
  202432:	6295      	str	r5, [r2, #40]	; 0x28
  iqp->q_top     = bp + size;
  202434:	61d3      	str	r3, [r2, #28]
  oqp->q_counter = size;
  202436:	68bb      	ldr	r3, [r7, #8]
  oqp->q_buffer  = bp;
  202438:	f8df 9344 	ldr.w	r9, [pc, #836]	; 202780 <main+0x9c0>
  oqp->q_counter = size;
  20243c:	6393      	str	r3, [r2, #56]	; 0x38
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20243e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
  oqp->q_notify  = onfy;
  202442:	48bd      	ldr	r0, [pc, #756]	; (202738 <main+0x978>)
  oqp->q_top     = bp + size;
  202444:	f109 0e10 	add.w	lr, r9, #16
  202448:	f88a 3352 	strb.w	r3, [sl, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20244c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  iqp->q_link    = link;
  202450:	62d2      	str	r2, [r2, #44]	; 0x2c
  202452:	f8ca 3188 	str.w	r3, [sl, #392]	; 0x188
  oqp->q_link    = link;
  202456:	6512      	str	r2, [r2, #80]	; 0x50
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202458:	f8ca 3008 	str.w	r3, [sl, #8]
#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  SD7.clock = STM32_UART7CLK;
  20245c:	4bb7      	ldr	r3, [pc, #732]	; (20273c <main+0x97c>)
  oqp->q_buffer  = bp;
  20245e:	f8c2 903c 	str.w	r9, [r2, #60]	; 0x3c
  202462:	6593      	str	r3, [r2, #88]	; 0x58
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  202464:	2307      	movs	r3, #7
  oqp->q_rdptr   = bp;
  202466:	f8c2 9048 	str.w	r9, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  20246a:	f8c2 9044 	str.w	r9, [r2, #68]	; 0x44
  oqp->q_notify  = onfy;
  20246e:	64d0      	str	r0, [r2, #76]	; 0x4c
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  202470:	49b3      	ldr	r1, [pc, #716]	; (202740 <main+0x980>)
  SD7.usart = UART7;
  202472:	f8df 9310 	ldr.w	r9, [pc, #784]	; 202784 <main+0x9c4>
  202476:	48b3      	ldr	r0, [pc, #716]	; (202744 <main+0x984>)
  oqp->q_top     = bp + size;
  202478:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
  20247c:	f8c2 9054 	str.w	r9, [r2, #84]	; 0x54

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  202480:	f8df e304 	ldr.w	lr, [pc, #772]	; 202788 <main+0x9c8>
  202484:	6048      	str	r0, [r1, #4]
  tqp->next = (thread_t *)tqp;
  202486:	f8c2 c030 	str.w	ip, [r2, #48]	; 0x30
  SysTick->VAL = 0;
  20248a:	608d      	str	r5, [r1, #8]
  tqp->prev = (thread_t *)tqp;
  20248c:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  202490:	600b      	str	r3, [r1, #0]
  202492:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  202496:	f88e 3023 	strb.w	r3, [lr, #35]	; 0x23
  20249a:	2320      	movs	r3, #32
  20249c:	f383 8811 	msr	BASEPRI, r3
  sd_lld_start(sdp, config);
  2024a0:	4610      	mov	r0, r2
  2024a2:	607a      	str	r2, [r7, #4]
  sdp->state = SD_READY;
  2024a4:	f04f 0902 	mov.w	r9, #2
  sd_lld_start(sdp, config);
  2024a8:	f000 fa12 	bl	2028d0 <sd_lld_start.constprop.7>
  sdp->state = SD_READY;
  2024ac:	687a      	ldr	r2, [r7, #4]
  2024ae:	f882 9008 	strb.w	r9, [r2, #8]
  2024b2:	f385 8811 	msr	BASEPRI, r5
  2024b6:	2320      	movs	r3, #32
  2024b8:	f383 8811 	msr	BASEPRI, r3
  sd_lld_start(sdp, config);
  2024bc:	4640      	mov	r0, r8
  2024be:	f000 fa07 	bl	2028d0 <sd_lld_start.constprop.7>
  sdp->state = SD_READY;
  2024c2:	f888 9008 	strb.w	r9, [r8, #8]
  2024c6:	f385 8811 	msr	BASEPRI, r5
  2024ca:	2320      	movs	r3, #32
  2024cc:	f383 8811 	msr	BASEPRI, r3
  sd_lld_start(sdp, config);
  2024d0:	489d      	ldr	r0, [pc, #628]	; (202748 <main+0x988>)
  2024d2:	f000 f9fd 	bl	2028d0 <sd_lld_start.constprop.7>
  sdp->state = SD_READY;
  2024d6:	4b9c      	ldr	r3, [pc, #624]	; (202748 <main+0x988>)
  2024d8:	f883 9008 	strb.w	r9, [r3, #8]
  2024dc:	f385 8811 	msr	BASEPRI, r5
{
    sdStart( frontLeftSonar, &UARTcfg );
    sdStart( leftSonar     , &UARTcfg );
    sdStart( backLeftSonar , &UARTcfg );

    palSetLineMode( frontLeftSonarTX, PAL_MODE_ALTERNATE(8) );      // TX for front left sensor
  2024e0:	f44f 7180 	mov.w	r1, #256	; 0x100
  2024e4:	4899      	ldr	r0, [pc, #612]	; (20274c <main+0x98c>)
  2024e6:	f000 fa33 	bl	202950 <_pal_lld_setgroupmode.constprop.5>
    palSetLineMode( frontLeftSonarRX, PAL_MODE_ALTERNATE(8) );      // RX for front left sensor
  2024ea:	2180      	movs	r1, #128	; 0x80
  2024ec:	4897      	ldr	r0, [pc, #604]	; (20274c <main+0x98c>)
  2024ee:	f000 fa2f 	bl	202950 <_pal_lld_setgroupmode.constprop.5>
    palSetLineMode( leftSonarTX, PAL_MODE_ALTERNATE(8) );           // TX for left sensor
  2024f2:	4658      	mov	r0, fp
  2024f4:	2140      	movs	r1, #64	; 0x40
  2024f6:	f000 fa2b 	bl	202950 <_pal_lld_setgroupmode.constprop.5>
    palSetLineMode( leftSonarRX, PAL_MODE_ALTERNATE(8) );           // RX for left sensor
  2024fa:	4658      	mov	r0, fp
  2024fc:	2180      	movs	r1, #128	; 0x80
  2024fe:	f000 fa27 	bl	202950 <_pal_lld_setgroupmode.constprop.5>
    palSetLineMode( backLeftSonarTX, PAL_MODE_ALTERNATE(8) );       // TX for back left sensor
  202502:	4893      	ldr	r0, [pc, #588]	; (202750 <main+0x990>)
  202504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  202508:	f000 fa22 	bl	202950 <_pal_lld_setgroupmode.constprop.5>
    palSetLineMode( backLeftSonarRX, PAL_MODE_ALTERNATE(8) );       // RX for back left sensor
  20250c:	4890      	ldr	r0, [pc, #576]	; (202750 <main+0x990>)
  20250e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  202512:	f000 fa1d 	bl	202950 <_pal_lld_setgroupmode.constprop.5>

    palSetPad(GPIOF, 4); //High level pin 4 for Sonar front left
  202516:	68b9      	ldr	r1, [r7, #8]
  202518:	4b8e      	ldr	r3, [pc, #568]	; (202754 <main+0x994>)
    palSetPad(GPIOF, 5); //High level pin 4 for Sonar left
  20251a:	f04f 0220 	mov.w	r2, #32
    palSetPad(GPIOF, 4); //High level pin 4 for Sonar front left
  20251e:	8319      	strh	r1, [r3, #24]
    palSetPad(GPIOF, 5); //High level pin 4 for Sonar left
  202520:	831a      	strh	r2, [r3, #24]
  202522:	2320      	movs	r3, #32
    palSetPad(GPIOC, 4); //High level pin 4 for Sonar back left
  202524:	f8ab 1018 	strh.w	r1, [fp, #24]
  202528:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  20252c:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  20252e:	4a8a      	ldr	r2, [pc, #552]	; (202758 <main+0x998>)
  202530:	2b01      	cmp	r3, #1
  202532:	6072      	str	r2, [r6, #4]
  202534:	f000 80e0 	beq.w	2026f8 <main+0x938>
  202538:	68b3      	ldr	r3, [r6, #8]
  20253a:	4a88      	ldr	r2, [pc, #544]	; (20275c <main+0x99c>)
  20253c:	095b      	lsrs	r3, r3, #5
  20253e:	fba2 2303 	umull	r2, r3, r2, r3
  202542:	09db      	lsrs	r3, r3, #7
  202544:	3b01      	subs	r3, #1
  202546:	b29b      	uxth	r3, r3
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  202548:	68f1      	ldr	r1, [r6, #12]
  20254a:	2200      	movs	r2, #0
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  20254c:	2002      	movs	r0, #2
  20254e:	600a      	str	r2, [r1, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  202550:	604a      	str	r2, [r1, #4]
  202552:	7030      	strb	r0, [r6, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  202554:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  202556:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  202558:	60ca      	str	r2, [r1, #12]
  20255a:	f382 8811 	msr	BASEPRI, r2
    halInit();
    serial_init();

    GPT_Counter_Init();

    float time = 0, delta;
  20255e:	f04f 0800 	mov.w	r8, #0
  202562:	f8df b228 	ldr.w	fp, [pc, #552]	; 20278c <main+0x9cc>

    if(firstValues == false)
    {
        for (int i=0; i<window; i++)
        {
            value = sdGet(type_sonar);
  202566:	4d7e      	ldr	r5, [pc, #504]	; (202760 <main+0x9a0>)
    gptStart(GPT_Timer1, &GPT1cfg);
}

void GPT_Counter_Start(void)
{
    gpt_ticks = 0;
  202568:	2200      	movs	r2, #0
  20256a:	497e      	ldr	r1, [pc, #504]	; (202764 <main+0x9a4>)
  20256c:	2320      	movs	r3, #32
  20256e:	600a      	str	r2, [r1, #0]
  202570:	f383 8811 	msr	BASEPRI, r3
  if (NULL != gptp->config->callback)
  202574:	6871      	ldr	r1, [r6, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  202576:	f04f 0c03 	mov.w	ip, #3
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  20257a:	68f3      	ldr	r3, [r6, #12]
  20257c:	f24c 3e50 	movw	lr, #50000	; 0xc350
  if (NULL != gptp->config->callback)
  202580:	6849      	ldr	r1, [r1, #4]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202582:	2001      	movs	r0, #1
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  202584:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  202588:	f886 c000 	strb.w	ip, [r6]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  20258c:	6158      	str	r0, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  20258e:	625a      	str	r2, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  202590:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  202592:	b111      	cbz	r1, 20259a <main+0x7da>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  202594:	68da      	ldr	r2, [r3, #12]
  202596:	4302      	orrs	r2, r0
  202598:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  20259a:	2185      	movs	r1, #133	; 0x85
  20259c:	2200      	movs	r2, #0
  20259e:	6019      	str	r1, [r3, #0]
  2025a0:	f382 8811 	msr	BASEPRI, r2
    if(firstValues == false)
  2025a4:	f89b 3000 	ldrb.w	r3, [fp]
{
  2025a8:	46e9      	mov	r9, sp
    uint32_t value = 0;
  2025aa:	613a      	str	r2, [r7, #16]
    if(firstValues == false)
  2025ac:	bb93      	cbnz	r3, 202614 <main+0x854>
  2025ae:	469a      	mov	sl, r3
  2025b0:	e006      	b.n	2025c0 <main+0x800>

                palToggleLine(LINE_LED3);
            }
            else
            {
                i--;
  2025b2:	f10a 3aff 	add.w	sl, sl, #4294967295
        for (int i=0; i<window; i++)
  2025b6:	f10a 0a01 	add.w	sl, sl, #1
  2025ba:	f1ba 0f09 	cmp.w	sl, #9
  2025be:	dc26      	bgt.n	20260e <main+0x84e>
            value = sdGet(type_sonar);
  2025c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  2025c4:	4628      	mov	r0, r5
  2025c6:	f7ff fb0b 	bl	201be0 <iqGetTimeout>
            if (value == 'R')
  2025ca:	2852      	cmp	r0, #82	; 0x52
            value = sdGet(type_sonar);
  2025cc:	6138      	str	r0, [r7, #16]
            if (value == 'R')
  2025ce:	d1f0      	bne.n	2025b2 <main+0x7f2>
                sdRead(type_sonar, (uint8_t *)&value , digits_num);
  2025d0:	2204      	movs	r2, #4
  2025d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2025d6:	f107 0110 	add.w	r1, r7, #16
  2025da:	4628      	mov	r0, r5
  2025dc:	f7ff fa90 	bl	201b00 <iqReadTimeout>
                filterWindow[i] = atoi(&value);
  2025e0:	f107 0010 	add.w	r0, r7, #16
  2025e4:	f000 fc0c 	bl	202e00 <atoi>
  2025e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
  2025ec:	eb03 034a 	add.w	r3, r3, sl, lsl #1
        for (int i=0; i<window; i++)
  2025f0:	f10a 0a01 	add.w	sl, sl, #1
                filterWindow[i] = atoi(&value);
  2025f4:	f823 0c2c 	strh.w	r0, [r3, #-44]
                chThdSleepMilliseconds(30);
  2025f8:	f000 f95a 	bl	2028b0 <chThdSleep.constprop.19>
                palToggleLine(LINE_LED3);
  2025fc:	4b54      	ldr	r3, [pc, #336]	; (202750 <main+0x990>)
        for (int i=0; i<window; i++)
  2025fe:	f1ba 0f09 	cmp.w	sl, #9
                palToggleLine(LINE_LED3);
  202602:	4a53      	ldr	r2, [pc, #332]	; (202750 <main+0x990>)
  202604:	695b      	ldr	r3, [r3, #20]
  202606:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
  20260a:	6153      	str	r3, [r2, #20]
        for (int i=0; i<window; i++)
  20260c:	ddd8      	ble.n	2025c0 <main+0x800>
            }
        }
        firstValues = true;
  20260e:	2301      	movs	r3, #1
  202610:	f88b 3000 	strb.w	r3, [fp]
    }

    if(firstValues == true)
    {
        value = sdGet(type_sonar);
  202614:	f64f 71ff 	movw	r1, #65535	; 0xffff
  202618:	4628      	mov	r0, r5
  20261a:	f7ff fae1 	bl	201be0 <iqGetTimeout>
        if (value == 'R')
  20261e:	2852      	cmp	r0, #82	; 0x52
        value = sdGet(type_sonar);
  202620:	6138      	str	r0, [r7, #16]
        if (value == 'R')
  202622:	d02c      	beq.n	20267e <main+0x8be>
  202624:	46cd      	mov	sp, r9

    while (true)
    {
        GPT_Counter_Start();
        filteredValue = get_sonar_dist(&SD6, 4, 10);
        chThdSleepMilliseconds(30);
  202626:	f000 f943 	bl	2028b0 <chThdSleep.constprop.19>
    gptStartContinuous(GPT_Timer1, TMR_TICKS_2_OVRFLOW);
}

uint32_t GPT_Get_Time (void)
{
    total_time = gpt_ticks + gptGetCounterX(GPT_Timer1);
  20262a:	68f2      	ldr	r2, [r6, #12]
  20262c:	4b4d      	ldr	r3, [pc, #308]	; (202764 <main+0x9a4>)
  20262e:	6a50      	ldr	r0, [r2, #36]	; 0x24
  202630:	681b      	ldr	r3, [r3, #0]
  202632:	4418      	add	r0, r3
    uint32_t measure = (int)RTC2US( SYSTEM_FREQUENCY * 1.0, total_time );
  202634:	3801      	subs	r0, #1
  202636:	f7fd ffa3 	bl	200580 <__aeabi_ui2d>
  20263a:	a33d      	add	r3, pc, #244	; (adr r3, 202730 <main+0x970>)
  20263c:	e9d3 2300 	ldrd	r2, r3, [r3]
  202640:	f7fe f93e 	bl	2008c0 <__aeabi_ddiv>
  202644:	2200      	movs	r2, #0
  202646:	4b48      	ldr	r3, [pc, #288]	; (202768 <main+0x9a8>)
  202648:	f7fd fe5e 	bl	200308 <__adddf3>
  20264c:	f7fe fa20 	bl	200a90 <__aeabi_d2iz>
        delta = GPT_Get_Time() + 30;
  202650:	301e      	adds	r0, #30
  202652:	f7fe fafb 	bl	200c4c <__aeabi_ui2f>
        time += delta/1000;
  202656:	4945      	ldr	r1, [pc, #276]	; (20276c <main+0x9ac>)
  202658:	f7fe fc04 	bl	200e64 <__aeabi_fdiv>
  20265c:	4601      	mov	r1, r0
  20265e:	4640      	mov	r0, r8
  202660:	f7fe fa44 	bl	200aec <__addsf3>
  202664:	4680      	mov	r8, r0

        chprintf(((BaseSequentialStream *)&SD6), "Time:(%d)\tFlt:(%d)\n\r", (int)time, filteredValue);
  202666:	f7fe fc99 	bl	200f9c <__aeabi_f2iz>
  20266a:	68fb      	ldr	r3, [r7, #12]
  20266c:	4602      	mov	r2, r0
  20266e:	4940      	ldr	r1, [pc, #256]	; (202770 <main+0x9b0>)
  202670:	4840      	ldr	r0, [pc, #256]	; (202774 <main+0x9b4>)
  202672:	f000 f9b5 	bl	2029e0 <chprintf.constprop.3>
  202676:	e777      	b.n	202568 <main+0x7a8>
  tp->state = CH_STATE_READY;
  202678:	f88c 1020 	strb.w	r1, [ip, #32]
  20267c:	e7fe      	b.n	20267c <main+0x8bc>
        {
            num = filterWindow[window/2];
  20267e:	8bfb      	ldrh	r3, [r7, #30]
  202680:	4622      	mov	r2, r4
{
  202682:	f8c7 d008 	str.w	sp, [r7, #8]
            num = filterWindow[window/2];
  202686:	60fb      	str	r3, [r7, #12]
  202688:	f107 0314 	add.w	r3, r7, #20
  20268c:	469a      	mov	sl, r3
        z[k]=x[k];
  20268e:	f833 1b02 	ldrh.w	r1, [r3], #2
    for (unsigned int k=0; k<window; k++)
  202692:	42a3      	cmp	r3, r4
        z[k]=x[k];
  202694:	f822 1b02 	strh.w	r1, [r2], #2
    for (unsigned int k=0; k<window; k++)
  202698:	d1f9      	bne.n	20268e <main+0x8ce>
  20269a:	f04f 0c09 	mov.w	ip, #9
        for (uint16_t j=0; j<(window-i-1); j++)
  20269e:	2200      	movs	r2, #0
            if (x[j]<x[j+1])
  2026a0:	0053      	lsls	r3, r2, #1
  2026a2:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
        for (uint16_t j=0; j<(window-i-1); j++)
  2026a6:	1c50      	adds	r0, r2, #1
            if (x[j]<x[j+1])
  2026a8:	3302      	adds	r3, #2
  2026aa:	f834 e003 	ldrh.w	lr, [r4, r3]
  2026ae:	4571      	cmp	r1, lr
  2026b0:	d202      	bcs.n	2026b8 <main+0x8f8>
                x[j] = x[j + 1];
  2026b2:	f824 e012 	strh.w	lr, [r4, r2, lsl #1]
                x[j + 1] = buff;
  2026b6:	52e1      	strh	r1, [r4, r3]
        for (uint16_t j=0; j<(window-i-1); j++)
  2026b8:	b282      	uxth	r2, r0
  2026ba:	4562      	cmp	r2, ip
  2026bc:	dbf0      	blt.n	2026a0 <main+0x8e0>
    for (uint16_t i=0; i<(window-1); i++ )
  2026be:	f1bc 0c01 	subs.w	ip, ip, #1
  2026c2:	d1ec      	bne.n	20269e <main+0x8de>
  2026c4:	f8d7 d008 	ldr.w	sp, [r7, #8]
            flt_num = Filter_Mediana(filterWindow, window);
            for (int i=0; i<window-1; i++)
            {
                filterWindow[i] = filterWindow[i+1];
  2026c8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  2026cc:	f82a 3b02 	strh.w	r3, [sl], #2
            for (int i=0; i<window-1; i++)
  2026d0:	f107 0326 	add.w	r3, r7, #38	; 0x26
  2026d4:	4553      	cmp	r3, sl
  2026d6:	d1f7      	bne.n	2026c8 <main+0x908>
            }
            sdRead(type_sonar, (uint8_t *)&value , digits_num);
  2026d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2026dc:	2204      	movs	r2, #4
  2026de:	f107 0110 	add.w	r1, r7, #16
  2026e2:	4628      	mov	r0, r5
  2026e4:	f7ff fa0c 	bl	201b00 <iqReadTimeout>
            filterWindow[window-1] = atoi(&value);
  2026e8:	f107 0010 	add.w	r0, r7, #16
  2026ec:	f000 fb88 	bl	202e00 <atoi>
            chThdSleepMilliseconds(30);
  2026f0:	f000 f8de 	bl	2028b0 <chThdSleep.constprop.19>
  2026f4:	46cd      	mov	sp, r9
  2026f6:	e796      	b.n	202626 <main+0x866>
      rccEnableTIM1(FALSE);
  2026f8:	4b1f      	ldr	r3, [pc, #124]	; (202778 <main+0x9b8>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2026fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  2026fe:	4a1e      	ldr	r2, [pc, #120]	; (202778 <main+0x9b8>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202700:	f04f 0e70 	mov.w	lr, #112	; 0x70
  202704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      gptp->clock = STM32_TIMCLK2;
  202706:	481d      	ldr	r0, [pc, #116]	; (20277c <main+0x9bc>)
      rccEnableTIM1(FALSE);
  202708:	f043 0301 	orr.w	r3, r3, #1
  20270c:	6453      	str	r3, [r2, #68]	; 0x44
      gptp->clock = STM32_TIMCLK2;
  20270e:	f640 036f 	movw	r3, #2159	; 0x86f
      rccResetTIM1();
  202712:	6a52      	ldr	r2, [r2, #36]	; 0x24
      gptp->clock = STM32_TIMCLK2;
  202714:	60b0      	str	r0, [r6, #8]
      rccResetTIM1();
  202716:	f042 0201 	orr.w	r2, r2, #1
  20271a:	4817      	ldr	r0, [pc, #92]	; (202778 <main+0x9b8>)
  20271c:	6242      	str	r2, [r0, #36]	; 0x24
  20271e:	6245      	str	r5, [r0, #36]	; 0x24
  202720:	f88a e319 	strb.w	lr, [sl, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202724:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202728:	f8ca 1000 	str.w	r1, [sl]
  20272c:	e70c      	b.n	202548 <main+0x788>
  20272e:	bf00      	nop
  202730:	9999999a 	.word	0x9999999a
  202734:	3fb99999 	.word	0x3fb99999
  202738:	00200ff1 	.word	0x00200ff1
  20273c:	0337f980 	.word	0x0337f980
  202740:	e000e010 	.word	0xe000e010
  202744:	00034bbf 	.word	0x00034bbf
  202748:	20000a9c 	.word	0x20000a9c
  20274c:	40021000 	.word	0x40021000
  202750:	40020400 	.word	0x40020400
  202754:	40021400 	.word	0x40021400
  202758:	0800302c 	.word	0x0800302c
  20275c:	0a7c5ac5 	.word	0x0a7c5ac5
  202760:	20000b08 	.word	0x20000b08
  202764:	20000bbc 	.word	0x20000bbc
  202768:	3ff00000 	.word	0x3ff00000
  20276c:	447a0000 	.word	0x447a0000
  202770:	0800311c 	.word	0x0800311c
  202774:	20000afc 	.word	0x20000afc
  202778:	40023800 	.word	0x40023800
  20277c:	0cdfe600 	.word	0x0cdfe600
  202780:	20000a8c 	.word	0x20000a8c
  202784:	40007800 	.word	0x40007800
  202788:	e000ed00 	.word	0xe000ed00
  20278c:	20000a34 	.word	0x20000a34

00202790 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  202790:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202792:	4b33      	ldr	r3, [pc, #204]	; (202860 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  202794:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  202798:	4a32      	ldr	r2, [pc, #200]	; (202864 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20279a:	4c33      	ldr	r4, [pc, #204]	; (202868 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20279c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20279e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2027a0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2027a2:	681a      	ldr	r2, [r3, #0]
  2027a4:	f042 0201 	orr.w	r2, r2, #1
  2027a8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2027aa:	680b      	ldr	r3, [r1, #0]
  2027ac:	079b      	lsls	r3, r3, #30
  2027ae:	d5fc      	bpl.n	2027aa <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2027b0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2027b2:	4a2b      	ldr	r2, [pc, #172]	; (202860 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2027b4:	f023 0303 	bic.w	r3, r3, #3
  2027b8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  2027ba:	688b      	ldr	r3, [r1, #8]
  2027bc:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2027be:	6893      	ldr	r3, [r2, #8]
  2027c0:	f013 030c 	ands.w	r3, r3, #12
  2027c4:	d1fb      	bne.n	2027be <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2027c6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2027c8:	4925      	ldr	r1, [pc, #148]	; (202860 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2027ca:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2027ce:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2027d0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2027d2:	6813      	ldr	r3, [r2, #0]
  2027d4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2027d8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2027da:	680b      	ldr	r3, [r1, #0]
  2027dc:	039d      	lsls	r5, r3, #14
  2027de:	d5fc      	bpl.n	2027da <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2027e0:	4b22      	ldr	r3, [pc, #136]	; (20286c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2027e2:	4820      	ldr	r0, [pc, #128]	; (202864 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2027e4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  2027e6:	680b      	ldr	r3, [r1, #0]
  2027e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2027ec:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2027ee:	6843      	ldr	r3, [r0, #4]
  2027f0:	045c      	lsls	r4, r3, #17
  2027f2:	d5fc      	bpl.n	2027ee <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  2027f4:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2027f6:	4a1b      	ldr	r2, [pc, #108]	; (202864 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  2027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2027fc:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2027fe:	6853      	ldr	r3, [r2, #4]
  202800:	03d9      	lsls	r1, r3, #15
  202802:	d5fc      	bpl.n	2027fe <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  202804:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  202806:	4917      	ldr	r1, [pc, #92]	; (202864 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  202808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20280c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20280e:	684b      	ldr	r3, [r1, #4]
  202810:	039a      	lsls	r2, r3, #14
  202812:	d5fc      	bpl.n	20280e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  202814:	4a12      	ldr	r2, [pc, #72]	; (202860 <__early_init+0xd0>)
  202816:	6813      	ldr	r3, [r2, #0]
  202818:	019b      	lsls	r3, r3, #6
  20281a:	d5fc      	bpl.n	202816 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20281c:	4b14      	ldr	r3, [pc, #80]	; (202870 <__early_init+0xe0>)
  20281e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202822:	4d14      	ldr	r5, [pc, #80]	; (202874 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  202824:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202828:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20282a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20282c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202830:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  202834:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  202836:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202838:	4909      	ldr	r1, [pc, #36]	; (202860 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20283a:	f043 0302 	orr.w	r3, r3, #2
  20283e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202840:	688b      	ldr	r3, [r1, #8]
  202842:	f003 030c 	and.w	r3, r3, #12
  202846:	2b08      	cmp	r3, #8
  202848:	d1fa      	bne.n	202840 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20284a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  202850:	644b      	str	r3, [r1, #68]	; 0x44
  202852:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  202854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  202858:	bc30      	pop	{r4, r5}
  20285a:	664b      	str	r3, [r1, #100]	; 0x64
  20285c:	4770      	bx	lr
  20285e:	bf00      	nop
  202860:	40023800 	.word	0x40023800
  202864:	40007000 	.word	0x40007000
  202868:	10000400 	.word	0x10000400
  20286c:	09406c08 	.word	0x09406c08
  202870:	40023c00 	.word	0x40023c00
  202874:	30999400 	.word	0x30999400
	...

00202880 <GPT_Counter_CB.lto_priv.30>:
    gpt_ticks += TMR_TICKS_2_OVRFLOW;
  202880:	4a03      	ldr	r2, [pc, #12]	; (202890 <GPT_Counter_CB.lto_priv.30+0x10>)
  202882:	f24c 3350 	movw	r3, #50000	; 0xc350
  202886:	6811      	ldr	r1, [r2, #0]
  202888:	440b      	add	r3, r1
  20288a:	6013      	str	r3, [r2, #0]
  20288c:	4770      	bx	lr
  20288e:	bf00      	nop
  202890:	20000bbc 	.word	0x20000bbc
	...

002028a0 <chTMStartMeasurementX.constprop.21>:
  return DWT->CYCCNT;
  2028a0:	4b01      	ldr	r3, [pc, #4]	; (2028a8 <chTMStartMeasurementX.constprop.21+0x8>)
  2028a2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  2028a4:	6083      	str	r3, [r0, #8]
  2028a6:	4770      	bx	lr
  2028a8:	e0001000 	.word	0xe0001000
  2028ac:	00000000 	.word	0x00000000

002028b0 <chThdSleep.constprop.19>:
void chThdSleep(systime_t time) {
  2028b0:	b508      	push	{r3, lr}
  2028b2:	2320      	movs	r3, #32
  2028b4:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  2028b8:	211e      	movs	r1, #30
  2028ba:	2008      	movs	r0, #8
  2028bc:	f7ff f810 	bl	2018e0 <chSchGoSleepTimeoutS>
  2028c0:	2300      	movs	r3, #0
  2028c2:	f383 8811 	msr	BASEPRI, r3
  2028c6:	bd08      	pop	{r3, pc}
	...

002028d0 <sd_lld_start.constprop.7>:
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  2028d0:	7a03      	ldrb	r3, [r0, #8]
  2028d2:	2b01      	cmp	r3, #1
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
  2028d4:	b470      	push	{r4, r5, r6}
  if (sdp->state == SD_STOP) {
  2028d6:	d014      	beq.n	202902 <sd_lld_start.constprop.7+0x32>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2028d8:	6d82      	ldr	r2, [r0, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2028da:	2640      	movs	r6, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2028dc:	4916      	ldr	r1, [pc, #88]	; (202938 <sd_lld_start.constprop.7+0x68>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2028de:	2501      	movs	r5, #1
  USART_TypeDef *u = sdp->usart;
  2028e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2028e2:	f240 142d 	movw	r4, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2028e6:	fba1 1202 	umull	r1, r2, r1, r2
  u->ICR = 0xFFFFFFFFU;
  2028ea:	f04f 31ff 	mov.w	r1, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2028ee:	0a92      	lsrs	r2, r2, #10
  2028f0:	60da      	str	r2, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2028f2:	605e      	str	r6, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2028f4:	609d      	str	r5, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2028f6:	601c      	str	r4, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
  2028f8:	6219      	str	r1, [r3, #32]
    sdp->rxmask = 0xFF;
  2028fa:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      rccEnableLPUART1(FALSE);
    }
#endif
  }
  usart_init(sdp, config);
}
  2028fe:	bc70      	pop	{r4, r5, r6}
  202900:	4770      	bx	lr
    if (&SD5 == sdp) {
  202902:	4b0e      	ldr	r3, [pc, #56]	; (20293c <sd_lld_start.constprop.7+0x6c>)
  202904:	4298      	cmp	r0, r3
  202906:	d011      	beq.n	20292c <sd_lld_start.constprop.7+0x5c>
    if (&SD6 == sdp) {
  202908:	4b0d      	ldr	r3, [pc, #52]	; (202940 <sd_lld_start.constprop.7+0x70>)
  20290a:	4298      	cmp	r0, r3
  20290c:	d008      	beq.n	202920 <sd_lld_start.constprop.7+0x50>
    if (&SD7 == sdp) {
  20290e:	4b0d      	ldr	r3, [pc, #52]	; (202944 <sd_lld_start.constprop.7+0x74>)
  202910:	4298      	cmp	r0, r3
  202912:	d1e1      	bne.n	2028d8 <sd_lld_start.constprop.7+0x8>
      rccEnableUART7(FALSE);
  202914:	4a0c      	ldr	r2, [pc, #48]	; (202948 <sd_lld_start.constprop.7+0x78>)
  202916:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  20291c:	6413      	str	r3, [r2, #64]	; 0x40
  20291e:	e7db      	b.n	2028d8 <sd_lld_start.constprop.7+0x8>
      rccEnableUSART6(FALSE);
  202920:	4a09      	ldr	r2, [pc, #36]	; (202948 <sd_lld_start.constprop.7+0x78>)
  202922:	6c53      	ldr	r3, [r2, #68]	; 0x44
  202924:	f043 0320 	orr.w	r3, r3, #32
  202928:	6453      	str	r3, [r2, #68]	; 0x44
  20292a:	e7d5      	b.n	2028d8 <sd_lld_start.constprop.7+0x8>
      rccEnableUART5(FALSE);
  20292c:	4a06      	ldr	r2, [pc, #24]	; (202948 <sd_lld_start.constprop.7+0x78>)
  20292e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  202934:	6413      	str	r3, [r2, #64]	; 0x40
  202936:	e7cf      	b.n	2028d8 <sd_lld_start.constprop.7+0x8>
  202938:	1b4e81b5 	.word	0x1b4e81b5
  20293c:	20000a9c 	.word	0x20000a9c
  202940:	20000afc 	.word	0x20000afc
  202944:	20000b5c 	.word	0x20000b5c
  202948:	40023800 	.word	0x40023800
  20294c:	00000000 	.word	0x00000000

00202950 <_pal_lld_setgroupmode.constprop.5>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  202950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  202954:	f04f 0c0f 	mov.w	ip, #15
  uint32_t bit     = 0;
  202958:	2400      	movs	r4, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  20295a:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
  20295c:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
  202960:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  202964:	2703      	movs	r7, #3
  202966:	e00f      	b.n	202988 <_pal_lld_setgroupmode.constprop.5+0x38>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  202968:	6a06      	ldr	r6, [r0, #32]
  20296a:	ea26 0202 	bic.w	r2, r6, r2
  20296e:	ea42 0209 	orr.w	r2, r2, r9
  202972:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  202974:	6802      	ldr	r2, [r0, #0]
  202976:	4013      	ands	r3, r2
  202978:	432b      	orrs	r3, r5
  20297a:	6003      	str	r3, [r0, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20297c:	0849      	lsrs	r1, r1, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  20297e:	f104 0401 	add.w	r4, r4, #1
    moder <<= 2;
  202982:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  202986:	d027      	beq.n	2029d8 <_pal_lld_setgroupmode.constprop.5+0x88>
      m2 = 3 << (bit * 2);
  202988:	0063      	lsls	r3, r4, #1
      altrmask = altr << ((bit & 7) * 4);
  20298a:	f004 0207 	and.w	r2, r4, #7
    if ((mask & 1) != 0) {
  20298e:	f011 0f01 	tst.w	r1, #1
      m1 = 1 << bit;
  202992:	fa0e f604 	lsl.w	r6, lr, r4
      m2 = 3 << (bit * 2);
  202996:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20299a:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20299e:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  2029a2:	d0eb      	beq.n	20297c <_pal_lld_setgroupmode.constprop.5+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2029a4:	f8d0 a004 	ldr.w	sl, [r0, #4]
        if (bit < 8)
  2029a8:	2c07      	cmp	r4, #7
      altrmask = altr << ((bit & 7) * 4);
  2029aa:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  2029ae:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2029b2:	ea2a 0606 	bic.w	r6, sl, r6
  2029b6:	6046      	str	r6, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2029b8:	6886      	ldr	r6, [r0, #8]
  2029ba:	ea06 0603 	and.w	r6, r6, r3
  2029be:	6086      	str	r6, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2029c0:	68c6      	ldr	r6, [r0, #12]
  2029c2:	ea06 0603 	and.w	r6, r6, r3
  2029c6:	60c6      	str	r6, [r0, #12]
        if (bit < 8)
  2029c8:	d9ce      	bls.n	202968 <_pal_lld_setgroupmode.constprop.5+0x18>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2029ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
  2029cc:	ea26 0202 	bic.w	r2, r6, r2
  2029d0:	ea42 0209 	orr.w	r2, r2, r9
  2029d4:	6242      	str	r2, [r0, #36]	; 0x24
  2029d6:	e7cd      	b.n	202974 <_pal_lld_setgroupmode.constprop.5+0x24>
  }
}
  2029d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  2029dc:	0000      	movs	r0, r0
	...

002029e0 <chprintf.constprop.3>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  2029e0:	b40e      	push	{r1, r2, r3}
  2029e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2029e6:	b086      	sub	sp, #24
  int n = 0;
  2029e8:	2300      	movs	r3, #0
    c = *fmt++;
  2029ea:	f04f 0954 	mov.w	r9, #84	; 0x54
  2029ee:	f8df a280 	ldr.w	sl, [pc, #640]	; 202c70 <chprintf.constprop.3+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  2029f2:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  2029f4:	4c9d      	ldr	r4, [pc, #628]	; (202c6c <chprintf.constprop.3+0x28c>)
  int n = 0;
  2029f6:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  2029f8:	9502      	str	r5, [sp, #8]
  2029fa:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  2029fe:	9a00      	ldr	r2, [sp, #0]
  202a00:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  202a02:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  202a06:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  202a08:	9901      	ldr	r1, [sp, #4]
  202a0a:	689b      	ldr	r3, [r3, #8]
  202a0c:	4898      	ldr	r0, [pc, #608]	; (202c70 <chprintf.constprop.3+0x290>)
      n++;
  202a0e:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  202a10:	4798      	blx	r3
  202a12:	7823      	ldrb	r3, [r4, #0]
  202a14:	9301      	str	r3, [sp, #4]
    if (c == 0)
  202a16:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  202a18:	1c74      	adds	r4, r6, #1
    if (c == 0)
  202a1a:	2b00      	cmp	r3, #0
  202a1c:	f000 8120 	beq.w	202c60 <chprintf.constprop.3+0x280>
    if (c != '%') {
  202a20:	2b25      	cmp	r3, #37	; 0x25
  202a22:	d1ec      	bne.n	2029fe <chprintf.constprop.3+0x1e>
    if (*fmt == '-') {
  202a24:	7871      	ldrb	r1, [r6, #1]
  202a26:	292d      	cmp	r1, #45	; 0x2d
  202a28:	f000 814b 	beq.w	202cc2 <chprintf.constprop.3+0x2e2>
    left_align = FALSE;
  202a2c:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  202a30:	2930      	cmp	r1, #48	; 0x30
  202a32:	f000 8141 	beq.w	202cb8 <chprintf.constprop.3+0x2d8>
    filler = ' ';
  202a36:	f04f 0820 	mov.w	r8, #32
  202a3a:	1c62      	adds	r2, r4, #1
    width = 0;
  202a3c:	2400      	movs	r4, #0
  202a3e:	e005      	b.n	202a4c <chprintf.constprop.3+0x6c>
        c = va_arg(ap, int);
  202a40:	782b      	ldrb	r3, [r5, #0]
  202a42:	3504      	adds	r5, #4
  202a44:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  202a48:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  202a4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  202a50:	4616      	mov	r6, r2
      width = width * 10 + c;
  202a52:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  202a56:	b2db      	uxtb	r3, r3
  202a58:	2b09      	cmp	r3, #9
  202a5a:	d9f3      	bls.n	202a44 <chprintf.constprop.3+0x64>
      else if (c == '*')
  202a5c:	292a      	cmp	r1, #42	; 0x2a
  202a5e:	d0ef      	beq.n	202a40 <chprintf.constprop.3+0x60>
    if (c == '.') {
  202a60:	292e      	cmp	r1, #46	; 0x2e
  202a62:	f04f 0200 	mov.w	r2, #0
  202a66:	d04a      	beq.n	202afe <chprintf.constprop.3+0x11e>
    if (c == 'l' || c == 'L') {
  202a68:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  202a6c:	2b4c      	cmp	r3, #76	; 0x4c
  202a6e:	d155      	bne.n	202b1c <chprintf.constprop.3+0x13c>
      if (*fmt)
  202a70:	7833      	ldrb	r3, [r6, #0]
  202a72:	9301      	str	r3, [sp, #4]
  202a74:	b11b      	cbz	r3, 202a7e <chprintf.constprop.3+0x9e>
        c = *fmt++;
  202a76:	4619      	mov	r1, r3
  202a78:	3601      	adds	r6, #1
  202a7a:	7833      	ldrb	r3, [r6, #0]
  202a7c:	9301      	str	r3, [sp, #4]
    switch (c) {
  202a7e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  202a82:	2b34      	cmp	r3, #52	; 0x34
  202a84:	f200 810c 	bhi.w	202ca0 <chprintf.constprop.3+0x2c0>
  202a88:	e8df f013 	tbh	[pc, r3, lsl #1]
  202a8c:	010a018f 	.word	0x010a018f
  202a90:	010a010a 	.word	0x010a010a
  202a94:	018f010a 	.word	0x018f010a
  202a98:	010a010a 	.word	0x010a010a
  202a9c:	010a010a 	.word	0x010a010a
  202aa0:	014d010a 	.word	0x014d010a
  202aa4:	010a010a 	.word	0x010a010a
  202aa8:	010a010a 	.word	0x010a010a
  202aac:	0152010a 	.word	0x0152010a
  202ab0:	010a010a 	.word	0x010a010a
  202ab4:	010a0187 	.word	0x010a0187
  202ab8:	010a010a 	.word	0x010a010a
  202abc:	010a010a 	.word	0x010a010a
  202ac0:	010a010a 	.word	0x010a010a
  202ac4:	010a010a 	.word	0x010a010a
  202ac8:	00f6010a 	.word	0x00f6010a
  202acc:	010a018f 	.word	0x010a018f
  202ad0:	010a010a 	.word	0x010a010a
  202ad4:	018f010a 	.word	0x018f010a
  202ad8:	010a010a 	.word	0x010a010a
  202adc:	010a010a 	.word	0x010a010a
  202ae0:	014d010a 	.word	0x014d010a
  202ae4:	010a010a 	.word	0x010a010a
  202ae8:	0089010a 	.word	0x0089010a
  202aec:	0152010a 	.word	0x0152010a
  202af0:	010a010a 	.word	0x010a010a
  202af4:	0187      	.short	0x0187
          c = va_arg(ap, int);
  202af6:	782b      	ldrb	r3, [r5, #0]
  202af8:	3504      	adds	r5, #4
        precision += c;
  202afa:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  202afe:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  202b02:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  202b06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  202b0a:	b2db      	uxtb	r3, r3
  202b0c:	2b09      	cmp	r3, #9
  202b0e:	d9f4      	bls.n	202afa <chprintf.constprop.3+0x11a>
        else if (c == '*')
  202b10:	292a      	cmp	r1, #42	; 0x2a
  202b12:	d0f0      	beq.n	202af6 <chprintf.constprop.3+0x116>
    if (c == 'l' || c == 'L') {
  202b14:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  202b18:	2b4c      	cmp	r3, #76	; 0x4c
  202b1a:	d0a9      	beq.n	202a70 <chprintf.constprop.3+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  202b1c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  202b20:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  202b24:	b2db      	uxtb	r3, r3
    switch (c) {
  202b26:	2834      	cmp	r0, #52	; 0x34
  202b28:	f200 80b8 	bhi.w	202c9c <chprintf.constprop.3+0x2bc>
  202b2c:	e8df f010 	tbh	[pc, r0, lsl #1]
  202b30:	00b6010a 	.word	0x00b6010a
  202b34:	00b600b6 	.word	0x00b600b6
  202b38:	010a00b6 	.word	0x010a00b6
  202b3c:	00b600b6 	.word	0x00b600b6
  202b40:	00b600b6 	.word	0x00b600b6
  202b44:	010300b6 	.word	0x010300b6
  202b48:	00b600b6 	.word	0x00b600b6
  202b4c:	00b600b6 	.word	0x00b600b6
  202b50:	00ce00b6 	.word	0x00ce00b6
  202b54:	00b600b6 	.word	0x00b600b6
  202b58:	00b60138 	.word	0x00b60138
  202b5c:	00b600b6 	.word	0x00b600b6
  202b60:	00b600b6 	.word	0x00b600b6
  202b64:	00b600b6 	.word	0x00b600b6
  202b68:	00b600b6 	.word	0x00b600b6
  202b6c:	00a200b6 	.word	0x00a200b6
  202b70:	00b6010a 	.word	0x00b6010a
  202b74:	00b600b6 	.word	0x00b600b6
  202b78:	010a00b6 	.word	0x010a00b6
  202b7c:	00b600b6 	.word	0x00b600b6
  202b80:	00b600b6 	.word	0x00b600b6
  202b84:	010300b6 	.word	0x010300b6
  202b88:	00b600b6 	.word	0x00b600b6
  202b8c:	003500b6 	.word	0x003500b6
  202b90:	00ce00b6 	.word	0x00ce00b6
  202b94:	00b600b6 	.word	0x00b600b6
  202b98:	0138      	.short	0x0138
  202b9a:	7833      	ldrb	r3, [r6, #0]
  202b9c:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  202b9e:	682f      	ldr	r7, [r5, #0]
  202ba0:	3504      	adds	r5, #4
  202ba2:	2f00      	cmp	r7, #0
  202ba4:	f000 8111 	beq.w	202dca <chprintf.constprop.3+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  202ba8:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  202baa:	2a00      	cmp	r2, #0
  202bac:	f040 810a 	bne.w	202dc4 <chprintf.constprop.3+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  202bb0:	2b00      	cmp	r3, #0
  202bb2:	f000 811c 	beq.w	202dee <chprintf.constprop.3+0x40e>
  202bb6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  202bba:	463a      	mov	r2, r7
  202bbc:	e001      	b.n	202bc2 <chprintf.constprop.3+0x1e2>
  202bbe:	3b01      	subs	r3, #1
  202bc0:	d403      	bmi.n	202bca <chprintf.constprop.3+0x1ea>
  202bc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  202bc6:	2900      	cmp	r1, #0
  202bc8:	d1f9      	bne.n	202bbe <chprintf.constprop.3+0x1de>
  202bca:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  202bcc:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  202bd0:	1aa4      	subs	r4, r4, r2
  202bd2:	f102 39ff 	add.w	r9, r2, #4294967295
  202bd6:	d45b      	bmi.n	202c90 <chprintf.constprop.3+0x2b0>
    if (left_align == FALSE)
  202bd8:	f1bc 0f00 	cmp.w	ip, #0
  202bdc:	d168      	bne.n	202cb0 <chprintf.constprop.3+0x2d0>
  202bde:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  202be2:	2c00      	cmp	r4, #0
  202be4:	d063      	beq.n	202cae <chprintf.constprop.3+0x2ce>
      if (*s == '-' && filler == '0') {
  202be6:	783b      	ldrb	r3, [r7, #0]
  202be8:	2b2d      	cmp	r3, #45	; 0x2d
  202bea:	d103      	bne.n	202bf4 <chprintf.constprop.3+0x214>
  202bec:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  202bf0:	f000 80f0 	beq.w	202dd4 <chprintf.constprop.3+0x3f4>
        streamPut(chp, (uint8_t)filler);
  202bf4:	f8da 3000 	ldr.w	r3, [sl]
  202bf8:	4641      	mov	r1, r8
  202bfa:	4650      	mov	r0, sl
  202bfc:	689b      	ldr	r3, [r3, #8]
  202bfe:	4798      	blx	r3
      } while (++width != 0);
  202c00:	f11b 0b01 	adds.w	fp, fp, #1
  202c04:	d1f6      	bne.n	202bf4 <chprintf.constprop.3+0x214>
  202c06:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  202c08:	f1b9 0f00 	cmp.w	r9, #0
  202c0c:	4423      	add	r3, r4
  202c0e:	9300      	str	r3, [sp, #0]
  202c10:	f6ff af01 	blt.w	202a16 <chprintf.constprop.3+0x36>
  202c14:	465c      	mov	r4, fp
  202c16:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  202c18:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  202c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  202c20:	f817 1b01 	ldrb.w	r1, [r7], #1
  202c24:	4650      	mov	r0, sl
  202c26:	689b      	ldr	r3, [r3, #8]
  202c28:	4798      	blx	r3
    while (--i >= 0) {
  202c2a:	f1bb 3fff 	cmp.w	fp, #4294967295
  202c2e:	d1f3      	bne.n	202c18 <chprintf.constprop.3+0x238>
  202c30:	9b00      	ldr	r3, [sp, #0]
  202c32:	3301      	adds	r3, #1
  202c34:	444b      	add	r3, r9
  202c36:	9300      	str	r3, [sp, #0]
    while (width) {
  202c38:	2c00      	cmp	r4, #0
  202c3a:	f43f aeec 	beq.w	202a16 <chprintf.constprop.3+0x36>
  202c3e:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  202c40:	f8da 3000 	ldr.w	r3, [sl]
  202c44:	4641      	mov	r1, r8
  202c46:	4650      	mov	r0, sl
  202c48:	689b      	ldr	r3, [r3, #8]
  202c4a:	4798      	blx	r3
    while (width) {
  202c4c:	3f01      	subs	r7, #1
  202c4e:	d1f7      	bne.n	202c40 <chprintf.constprop.3+0x260>
  202c50:	9b00      	ldr	r3, [sp, #0]
  202c52:	4423      	add	r3, r4
    c = *fmt++;
  202c54:	1c74      	adds	r4, r6, #1
  202c56:	9300      	str	r3, [sp, #0]
    if (c == 0)
  202c58:	9b01      	ldr	r3, [sp, #4]
  202c5a:	2b00      	cmp	r3, #0
  202c5c:	f47f aee0 	bne.w	202a20 <chprintf.constprop.3+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  202c60:	9800      	ldr	r0, [sp, #0]
  202c62:	b006      	add	sp, #24
  202c64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202c68:	b003      	add	sp, #12
  202c6a:	4770      	bx	lr
  202c6c:	0800311d 	.word	0x0800311d
  202c70:	20000afc 	.word	0x20000afc
  202c74:	7833      	ldrb	r3, [r6, #0]
  202c76:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  202c78:	682b      	ldr	r3, [r5, #0]
  202c7a:	af06      	add	r7, sp, #24
  202c7c:	3504      	adds	r5, #4
  202c7e:	f04f 0900 	mov.w	r9, #0
  202c82:	2201      	movs	r2, #1
      filler = ' ';
  202c84:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  202c88:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  202c8c:	1aa4      	subs	r4, r4, r2
  202c8e:	d5a3      	bpl.n	202bd8 <chprintf.constprop.3+0x1f8>
    while (--i >= 0) {
  202c90:	f1b9 0f00 	cmp.w	r9, #0
  202c94:	f6ff aebf 	blt.w	202a16 <chprintf.constprop.3+0x36>
      width = 0;
  202c98:	2400      	movs	r4, #0
  202c9a:	e7bc      	b.n	202c16 <chprintf.constprop.3+0x236>
  202c9c:	7833      	ldrb	r3, [r6, #0]
  202c9e:	9301      	str	r3, [sp, #4]
      *p++ = c;
  202ca0:	af06      	add	r7, sp, #24
  202ca2:	f04f 0900 	mov.w	r9, #0
  202ca6:	2201      	movs	r2, #1
  202ca8:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  202cac:	e7ee      	b.n	202c8c <chprintf.constprop.3+0x2ac>
    if (width < 0) {
  202cae:	465c      	mov	r4, fp
    while (--i >= 0) {
  202cb0:	f1b9 0f00 	cmp.w	r9, #0
  202cb4:	daaf      	bge.n	202c16 <chprintf.constprop.3+0x236>
  202cb6:	e7bf      	b.n	202c38 <chprintf.constprop.3+0x258>
  202cb8:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  202cba:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  202cbe:	3401      	adds	r4, #1
  202cc0:	e6bb      	b.n	202a3a <chprintf.constprop.3+0x5a>
      fmt++;
  202cc2:	1cb4      	adds	r4, r6, #2
  202cc4:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  202cc6:	f04f 0c01 	mov.w	ip, #1
  202cca:	e6b1      	b.n	202a30 <chprintf.constprop.3+0x50>
    switch (c) {
  202ccc:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  202cd0:	2b19      	cmp	r3, #25
  202cd2:	d934      	bls.n	202d3e <chprintf.constprop.3+0x35e>
        l = va_arg(ap, unsigned int);
  202cd4:	682f      	ldr	r7, [r5, #0]
  202cd6:	3504      	adds	r5, #4
  202cd8:	7833      	ldrb	r3, [r6, #0]
  202cda:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  202cdc:	f10d 0117 	add.w	r1, sp, #23
  202ce0:	e000      	b.n	202ce4 <chprintf.constprop.3+0x304>
  } while ((ll /= radix) != 0);
  202ce2:	4601      	mov	r1, r0
    *--q = i;
  202ce4:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  202ce6:	fbb7 f2fe 	udiv	r2, r7, lr
  202cea:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  202cee:	4617      	mov	r7, r2
    i += '0';
  202cf0:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  202cf4:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  202cf6:	bfc8      	it	gt
  202cf8:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  202cfc:	b2db      	uxtb	r3, r3
  202cfe:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  202d02:	2a00      	cmp	r2, #0
  202d04:	d1ed      	bne.n	202ce2 <chprintf.constprop.3+0x302>
  i = (int)(p + MAX_FILLER - q);
  202d06:	f10d 0217 	add.w	r2, sp, #23
  202d0a:	af03      	add	r7, sp, #12
  202d0c:	1a12      	subs	r2, r2, r0
  202d0e:	46be      	mov	lr, r7
  202d10:	4410      	add	r0, r2
  202d12:	e001      	b.n	202d18 <chprintf.constprop.3+0x338>
  202d14:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  202d18:	4288      	cmp	r0, r1
    *p++ = *q++;
  202d1a:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  202d1e:	d1f9      	bne.n	202d14 <chprintf.constprop.3+0x334>
  202d20:	f102 39ff 	add.w	r9, r2, #4294967295
  202d24:	e7b2      	b.n	202c8c <chprintf.constprop.3+0x2ac>
    switch (c) {
  202d26:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  202d2a:	682f      	ldr	r7, [r5, #0]
  202d2c:	3504      	adds	r5, #4
  202d2e:	e7d5      	b.n	202cdc <chprintf.constprop.3+0x2fc>
    switch (c) {
  202d30:	f04f 0e0a 	mov.w	lr, #10
  202d34:	e7f9      	b.n	202d2a <chprintf.constprop.3+0x34a>
      if (is_long)
  202d36:	2b19      	cmp	r3, #25
    switch (c) {
  202d38:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  202d3c:	d8ca      	bhi.n	202cd4 <chprintf.constprop.3+0x2f4>
  202d3e:	7833      	ldrb	r3, [r6, #0]
  202d40:	9301      	str	r3, [sp, #4]
  202d42:	e7f2      	b.n	202d2a <chprintf.constprop.3+0x34a>
      if (is_long)
  202d44:	2b19      	cmp	r3, #25
  202d46:	d92e      	bls.n	202da6 <chprintf.constprop.3+0x3c6>
        l = va_arg(ap, int);
  202d48:	6829      	ldr	r1, [r5, #0]
  202d4a:	3504      	adds	r5, #4
  202d4c:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  202d4e:	2900      	cmp	r1, #0
  202d50:	9301      	str	r3, [sp, #4]
  202d52:	db2e      	blt.n	202db2 <chprintf.constprop.3+0x3d2>
    p = tmpbuf;
  202d54:	af03      	add	r7, sp, #12
  202d56:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  202d58:	f102 0b0b 	add.w	fp, r2, #11
  202d5c:	4658      	mov	r0, fp
    i = (int)(l % radix);
  202d5e:	4b26      	ldr	r3, [pc, #152]	; (202df8 <chprintf.constprop.3+0x418>)
  202d60:	fba3 e301 	umull	lr, r3, r3, r1
  202d64:	08db      	lsrs	r3, r3, #3
  202d66:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  202d6a:	469e      	mov	lr, r3
  202d6c:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  202d70:	4671      	mov	r1, lr
    i += '0';
  202d72:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  202d74:	b2db      	uxtb	r3, r3
  202d76:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  202d7a:	2900      	cmp	r1, #0
  202d7c:	d1ef      	bne.n	202d5e <chprintf.constprop.3+0x37e>
  i = (int)(p + MAX_FILLER - q);
  202d7e:	ebab 0100 	sub.w	r1, fp, r0
  202d82:	4411      	add	r1, r2
  202d84:	e001      	b.n	202d8a <chprintf.constprop.3+0x3aa>
  202d86:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  202d8a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  202d8e:	428a      	cmp	r2, r1
  202d90:	d1f9      	bne.n	202d86 <chprintf.constprop.3+0x3a6>
  202d92:	1bd2      	subs	r2, r2, r7
  202d94:	f102 39ff 	add.w	r9, r2, #4294967295
  202d98:	e778      	b.n	202c8c <chprintf.constprop.3+0x2ac>
    switch (c) {
  202d9a:	f04f 0e10 	mov.w	lr, #16
  202d9e:	e7c4      	b.n	202d2a <chprintf.constprop.3+0x34a>
  202da0:	f04f 0e10 	mov.w	lr, #16
  202da4:	e794      	b.n	202cd0 <chprintf.constprop.3+0x2f0>
  202da6:	7833      	ldrb	r3, [r6, #0]
  202da8:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  202daa:	6829      	ldr	r1, [r5, #0]
  202dac:	3504      	adds	r5, #4
      if (l < 0) {
  202dae:	2900      	cmp	r1, #0
  202db0:	dad0      	bge.n	202d54 <chprintf.constprop.3+0x374>
        *p++ = '-';
  202db2:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  202db6:	4249      	negs	r1, r1
        *p++ = '-';
  202db8:	f10d 020d 	add.w	r2, sp, #13
  202dbc:	af03      	add	r7, sp, #12
  202dbe:	f88d 300c 	strb.w	r3, [sp, #12]
  202dc2:	e7c9      	b.n	202d58 <chprintf.constprop.3+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  202dc4:	b19b      	cbz	r3, 202dee <chprintf.constprop.3+0x40e>
  202dc6:	1e53      	subs	r3, r2, #1
  202dc8:	e6f7      	b.n	202bba <chprintf.constprop.3+0x1da>
      if (precision == 0)
  202dca:	b90a      	cbnz	r2, 202dd0 <chprintf.constprop.3+0x3f0>
        precision = 32767;
  202dcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  202dd0:	4f0a      	ldr	r7, [pc, #40]	; (202dfc <chprintf.constprop.3+0x41c>)
  202dd2:	e7f8      	b.n	202dc6 <chprintf.constprop.3+0x3e6>
        n++;
  202dd4:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  202dd6:	212d      	movs	r1, #45	; 0x2d
  202dd8:	f8da 3000 	ldr.w	r3, [sl]
  202ddc:	4650      	mov	r0, sl
        n++;
  202dde:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  202de0:	3701      	adds	r7, #1
  202de2:	689b      	ldr	r3, [r3, #8]
  202de4:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  202de8:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  202dea:	4798      	blx	r3
  202dec:	e702      	b.n	202bf4 <chprintf.constprop.3+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  202dee:	f04f 39ff 	mov.w	r9, #4294967295
  202df2:	f04f 0820 	mov.w	r8, #32
  202df6:	e6ef      	b.n	202bd8 <chprintf.constprop.3+0x1f8>
  202df8:	cccccccd 	.word	0xcccccccd
  202dfc:	08003154 	.word	0x08003154

00202e00 <atoi>:
  202e00:	220a      	movs	r2, #10
  202e02:	2100      	movs	r1, #0
  202e04:	f000 b894 	b.w	202f30 <strtol>

00202e08 <_strtol_l.isra.0>:
  202e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202e0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  202e10:	460f      	mov	r7, r1
  202e12:	4680      	mov	r8, r0
  202e14:	4616      	mov	r6, r2
  202e16:	461d      	mov	r5, r3
  202e18:	468a      	mov	sl, r1
  202e1a:	e000      	b.n	202e1e <_strtol_l.isra.0+0x16>
  202e1c:	46a2      	mov	sl, r4
  202e1e:	4654      	mov	r4, sl
  202e20:	4648      	mov	r0, r9
  202e22:	f814 bb01 	ldrb.w	fp, [r4], #1
  202e26:	f000 f899 	bl	202f5c <__locale_ctype_ptr_l>
  202e2a:	4458      	add	r0, fp
  202e2c:	7842      	ldrb	r2, [r0, #1]
  202e2e:	f012 0208 	ands.w	r2, r2, #8
  202e32:	d1f3      	bne.n	202e1c <_strtol_l.isra.0+0x14>
  202e34:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  202e38:	d04f      	beq.n	202eda <_strtol_l.isra.0+0xd2>
  202e3a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  202e3e:	bf04      	itt	eq
  202e40:	f894 b000 	ldrbeq.w	fp, [r4]
  202e44:	f10a 0402 	addeq.w	r4, sl, #2
  202e48:	b11d      	cbz	r5, 202e52 <_strtol_l.isra.0+0x4a>
  202e4a:	2d10      	cmp	r5, #16
  202e4c:	d056      	beq.n	202efc <_strtol_l.isra.0+0xf4>
  202e4e:	46ac      	mov	ip, r5
  202e50:	e004      	b.n	202e5c <_strtol_l.isra.0+0x54>
  202e52:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  202e56:	d060      	beq.n	202f1a <_strtol_l.isra.0+0x112>
  202e58:	250a      	movs	r5, #10
  202e5a:	46ac      	mov	ip, r5
  202e5c:	2a00      	cmp	r2, #0
  202e5e:	bf0c      	ite	eq
  202e60:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  202e64:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  202e68:	2100      	movs	r1, #0
  202e6a:	fbb9 fefc 	udiv	lr, r9, ip
  202e6e:	4608      	mov	r0, r1
  202e70:	fb0c 9a1e 	mls	sl, ip, lr, r9
  202e74:	e005      	b.n	202e82 <_strtol_l.isra.0+0x7a>
  202e76:	d029      	beq.n	202ecc <_strtol_l.isra.0+0xc4>
  202e78:	fb0c 3000 	mla	r0, ip, r0, r3
  202e7c:	2101      	movs	r1, #1
  202e7e:	f814 bb01 	ldrb.w	fp, [r4], #1
  202e82:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  202e86:	2b09      	cmp	r3, #9
  202e88:	d905      	bls.n	202e96 <_strtol_l.isra.0+0x8e>
  202e8a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  202e8e:	2b19      	cmp	r3, #25
  202e90:	d80b      	bhi.n	202eaa <_strtol_l.isra.0+0xa2>
  202e92:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  202e96:	429d      	cmp	r5, r3
  202e98:	dd0f      	ble.n	202eba <_strtol_l.isra.0+0xb2>
  202e9a:	f1b1 3fff 	cmp.w	r1, #4294967295
  202e9e:	d0ee      	beq.n	202e7e <_strtol_l.isra.0+0x76>
  202ea0:	4586      	cmp	lr, r0
  202ea2:	d2e8      	bcs.n	202e76 <_strtol_l.isra.0+0x6e>
  202ea4:	f04f 31ff 	mov.w	r1, #4294967295
  202ea8:	e7e9      	b.n	202e7e <_strtol_l.isra.0+0x76>
  202eaa:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  202eae:	2b19      	cmp	r3, #25
  202eb0:	d803      	bhi.n	202eba <_strtol_l.isra.0+0xb2>
  202eb2:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  202eb6:	429d      	cmp	r5, r3
  202eb8:	dcef      	bgt.n	202e9a <_strtol_l.isra.0+0x92>
  202eba:	1c4b      	adds	r3, r1, #1
  202ebc:	d013      	beq.n	202ee6 <_strtol_l.isra.0+0xde>
  202ebe:	b102      	cbz	r2, 202ec2 <_strtol_l.isra.0+0xba>
  202ec0:	4240      	negs	r0, r0
  202ec2:	b146      	cbz	r6, 202ed6 <_strtol_l.isra.0+0xce>
  202ec4:	b9c1      	cbnz	r1, 202ef8 <_strtol_l.isra.0+0xf0>
  202ec6:	6037      	str	r7, [r6, #0]
  202ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  202ecc:	459a      	cmp	sl, r3
  202ece:	dad3      	bge.n	202e78 <_strtol_l.isra.0+0x70>
  202ed0:	f04f 31ff 	mov.w	r1, #4294967295
  202ed4:	e7d3      	b.n	202e7e <_strtol_l.isra.0+0x76>
  202ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  202eda:	f894 b000 	ldrb.w	fp, [r4]
  202ede:	2201      	movs	r2, #1
  202ee0:	f10a 0402 	add.w	r4, sl, #2
  202ee4:	e7b0      	b.n	202e48 <_strtol_l.isra.0+0x40>
  202ee6:	2322      	movs	r3, #34	; 0x22
  202ee8:	f8c8 3000 	str.w	r3, [r8]
  202eec:	b1ee      	cbz	r6, 202f2a <_strtol_l.isra.0+0x122>
  202eee:	1e67      	subs	r7, r4, #1
  202ef0:	4648      	mov	r0, r9
  202ef2:	6037      	str	r7, [r6, #0]
  202ef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  202ef8:	4681      	mov	r9, r0
  202efa:	e7f8      	b.n	202eee <_strtol_l.isra.0+0xe6>
  202efc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  202f00:	d1a5      	bne.n	202e4e <_strtol_l.isra.0+0x46>
  202f02:	7823      	ldrb	r3, [r4, #0]
  202f04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  202f08:	2b58      	cmp	r3, #88	; 0x58
  202f0a:	d1a0      	bne.n	202e4e <_strtol_l.isra.0+0x46>
  202f0c:	f04f 0c10 	mov.w	ip, #16
  202f10:	f894 b001 	ldrb.w	fp, [r4, #1]
  202f14:	4665      	mov	r5, ip
  202f16:	3402      	adds	r4, #2
  202f18:	e7a0      	b.n	202e5c <_strtol_l.isra.0+0x54>
  202f1a:	7823      	ldrb	r3, [r4, #0]
  202f1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  202f20:	2b58      	cmp	r3, #88	; 0x58
  202f22:	d0f3      	beq.n	202f0c <_strtol_l.isra.0+0x104>
  202f24:	2508      	movs	r5, #8
  202f26:	46ac      	mov	ip, r5
  202f28:	e798      	b.n	202e5c <_strtol_l.isra.0+0x54>
  202f2a:	4648      	mov	r0, r9
  202f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00202f30 <strtol>:
  202f30:	b530      	push	{r4, r5, lr}
  202f32:	4c08      	ldr	r4, [pc, #32]	; (202f54 <strtol+0x24>)
  202f34:	4b08      	ldr	r3, [pc, #32]	; (202f58 <strtol+0x28>)
  202f36:	6825      	ldr	r5, [r4, #0]
  202f38:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  202f3a:	b083      	sub	sp, #12
  202f3c:	2c00      	cmp	r4, #0
  202f3e:	bf08      	it	eq
  202f40:	461c      	moveq	r4, r3
  202f42:	9400      	str	r4, [sp, #0]
  202f44:	4613      	mov	r3, r2
  202f46:	460a      	mov	r2, r1
  202f48:	4601      	mov	r1, r0
  202f4a:	4628      	mov	r0, r5
  202f4c:	f7ff ff5c 	bl	202e08 <_strtol_l.isra.0>
  202f50:	b003      	add	sp, #12
  202f52:	bd30      	pop	{r4, r5, pc}
  202f54:	20020000 	.word	0x20020000
  202f58:	20020430 	.word	0x20020430

00202f5c <__locale_ctype_ptr_l>:
  202f5c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  202f60:	4770      	bx	lr
  202f62:	bf00      	nop

00202f64 <__ascii_mbtowc>:
  202f64:	b082      	sub	sp, #8
  202f66:	b149      	cbz	r1, 202f7c <__ascii_mbtowc+0x18>
  202f68:	b15a      	cbz	r2, 202f82 <__ascii_mbtowc+0x1e>
  202f6a:	b16b      	cbz	r3, 202f88 <__ascii_mbtowc+0x24>
  202f6c:	7813      	ldrb	r3, [r2, #0]
  202f6e:	600b      	str	r3, [r1, #0]
  202f70:	7812      	ldrb	r2, [r2, #0]
  202f72:	1c10      	adds	r0, r2, #0
  202f74:	bf18      	it	ne
  202f76:	2001      	movne	r0, #1
  202f78:	b002      	add	sp, #8
  202f7a:	4770      	bx	lr
  202f7c:	a901      	add	r1, sp, #4
  202f7e:	2a00      	cmp	r2, #0
  202f80:	d1f3      	bne.n	202f6a <__ascii_mbtowc+0x6>
  202f82:	4610      	mov	r0, r2
  202f84:	b002      	add	sp, #8
  202f86:	4770      	bx	lr
  202f88:	f06f 0001 	mvn.w	r0, #1
  202f8c:	e7f4      	b.n	202f78 <__ascii_mbtowc+0x14>
  202f8e:	bf00      	nop

00202f90 <__ascii_wctomb>:
  202f90:	b121      	cbz	r1, 202f9c <__ascii_wctomb+0xc>
  202f92:	2aff      	cmp	r2, #255	; 0xff
  202f94:	d804      	bhi.n	202fa0 <__ascii_wctomb+0x10>
  202f96:	700a      	strb	r2, [r1, #0]
  202f98:	2001      	movs	r0, #1
  202f9a:	4770      	bx	lr
  202f9c:	4608      	mov	r0, r1
  202f9e:	4770      	bx	lr
  202fa0:	238a      	movs	r3, #138	; 0x8a
  202fa2:	6003      	str	r3, [r0, #0]
  202fa4:	f04f 30ff 	mov.w	r0, #4294967295
  202fa8:	4770      	bx	lr
  202faa:	bf00      	nop
