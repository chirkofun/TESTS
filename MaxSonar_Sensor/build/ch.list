
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fa57 	bl	2016d0 <__core_init>
  200222:	f001 f825 	bl	201270 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 f9f1 	bl	201650 <__init_ram_areas>
  20026e:	f001 fa27 	bl	2016c0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 fcbd 	bl	200c00 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 ba0b 	b.w	2016b0 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	080019e4 	.word	0x080019e4
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000ab8 	.word	0x20000ab8
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 f986 	bl	201600 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 f834 	bl	201360 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200300:	4a02      	ldr	r2, [pc, #8]	; (20030c <notify7+0xc>)
  200302:	6813      	ldr	r3, [r2, #0]
  200304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200308:	6013      	str	r3, [r2, #0]
  20030a:	4770      	bx	lr
  20030c:	40007800 	.word	0x40007800

00200310 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200310:	b470      	push	{r4, r5, r6}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200312:	2320      	movs	r3, #32
  200314:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200318:	4e0d      	ldr	r6, [pc, #52]	; (200350 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20031a:	1e4a      	subs	r2, r1, #1
  20031c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20031e:	4c0d      	ldr	r4, [pc, #52]	; (200354 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200320:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200322:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200324:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200326:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200328:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20032a:	1858      	adds	r0, r3, r1
  20032c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20032e:	1a23      	subs	r3, r4, r0
  200330:	429a      	cmp	r2, r3
  200332:	d806      	bhi.n	200342 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200334:	4402      	add	r2, r0
  200336:	2300      	movs	r3, #0
  200338:	6032      	str	r2, [r6, #0]
  20033a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20033e:	bc70      	pop	{r4, r5, r6}
  200340:	4770      	bx	lr
    return NULL;
  200342:	2000      	movs	r0, #0
  200344:	2300      	movs	r3, #0
  200346:	f383 8811 	msr	BASEPRI, r3
}
  20034a:	bc70      	pop	{r4, r5, r6}
  20034c:	4770      	bx	lr
  20034e:	bf00      	nop
  200350:	20000a34 	.word	0x20000a34
  200354:	20000a30 	.word	0x20000a30
	...

00200360 <_port_irq_epilogue>:
  200360:	2320      	movs	r3, #32
  200362:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200366:	4b11      	ldr	r3, [pc, #68]	; (2003ac <_port_irq_epilogue+0x4c>)
  200368:	685b      	ldr	r3, [r3, #4]
  20036a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20036e:	d102      	bne.n	200376 <_port_irq_epilogue+0x16>
  200370:	f383 8811 	msr	BASEPRI, r3
  200374:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200376:	b480      	push	{r7}
  200378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20037a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20037e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200382:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200386:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20038a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20038e:	4a08      	ldr	r2, [pc, #32]	; (2003b0 <_port_irq_epilogue+0x50>)
  200390:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200392:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200394:	6889      	ldr	r1, [r1, #8]
  200396:	6892      	ldr	r2, [r2, #8]
  200398:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20039a:	bf8c      	ite	hi
  20039c:	4a05      	ldrhi	r2, [pc, #20]	; (2003b4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20039e:	4a06      	ldrls	r2, [pc, #24]	; (2003b8 <_port_irq_epilogue+0x58>)
  2003a0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2003a4:	46bd      	mov	sp, r7
  2003a6:	bc80      	pop	{r7}
  2003a8:	4770      	bx	lr
  2003aa:	bf00      	nop
  2003ac:	e000ed00 	.word	0xe000ed00
  2003b0:	20000844 	.word	0x20000844
  2003b4:	002002f5 	.word	0x002002f5
  2003b8:	002002f8 	.word	0x002002f8
  2003bc:	00000000 	.word	0x00000000

002003c0 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  2003c0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  2003c2:	4b0b      	ldr	r3, [pc, #44]	; (2003f0 <VectorA4+0x30>)
  2003c4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  2003c6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  2003c8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  2003ca:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  2003cc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  2003ce:	d107      	bne.n	2003e0 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  2003d0:	2002      	movs	r0, #2
  2003d2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2003d4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2003d6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  2003d8:	68d1      	ldr	r1, [r2, #12]
  2003da:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  2003de:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  2003e0:	685b      	ldr	r3, [r3, #4]
  2003e2:	4803      	ldr	r0, [pc, #12]	; (2003f0 <VectorA4+0x30>)
  2003e4:	685b      	ldr	r3, [r3, #4]
  2003e6:	4798      	blx	r3
}
  2003e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2003ec:	f7ff bfb8 	b.w	200360 <_port_irq_epilogue>
  2003f0:	20000834 	.word	0x20000834
	...

00200400 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200402:	2720      	movs	r7, #32
  200404:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200408:	4d12      	ldr	r5, [pc, #72]	; (200454 <SysTick_Handler+0x54>)
  20040a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20040c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20040e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200410:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200414:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200416:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200418:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20041a:	d013      	beq.n	200444 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20041c:	891c      	ldrh	r4, [r3, #8]
  20041e:	3c01      	subs	r4, #1
  200420:	b2a4      	uxth	r4, r4
  200422:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200424:	b974      	cbnz	r4, 200444 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200426:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200428:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20042a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20042c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20042e:	61ea      	str	r2, [r5, #28]
  200430:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200434:	6918      	ldr	r0, [r3, #16]
  200436:	4788      	blx	r1
  200438:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20043c:	69eb      	ldr	r3, [r5, #28]
  20043e:	891a      	ldrh	r2, [r3, #8]
  200440:	2a00      	cmp	r2, #0
  200442:	d0f0      	beq.n	200426 <SysTick_Handler+0x26>
  200444:	2300      	movs	r3, #0
  200446:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  20044a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20044e:	f7ff bf87 	b.w	200360 <_port_irq_epilogue>
  200452:	bf00      	nop
  200454:	20000844 	.word	0x20000844
	...

00200460 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200460:	4b08      	ldr	r3, [pc, #32]	; (200484 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  200462:	4809      	ldr	r0, [pc, #36]	; (200488 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200464:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  200466:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200468:	0d89      	lsrs	r1, r1, #22
  20046a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  20046e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  200470:	058c      	lsls	r4, r1, #22
  200472:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  200474:	b10a      	cbz	r2, 20047a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  200476:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  200478:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  20047a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20047e:	f7ff bf6f 	b.w	200360 <_port_irq_epilogue>
  200482:	bf00      	nop
  200484:	40026400 	.word	0x40026400
  200488:	200009b0 	.word	0x200009b0
  20048c:	00000000 	.word	0x00000000

00200490 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200490:	4b08      	ldr	r3, [pc, #32]	; (2004b4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  200492:	4809      	ldr	r0, [pc, #36]	; (2004b8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200494:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  200496:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200498:	0c09      	lsrs	r1, r1, #16
  20049a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20049e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  2004a0:	040c      	lsls	r4, r1, #16
  2004a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  2004a4:	b10a      	cbz	r2, 2004aa <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  2004a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
  2004a8:	4790      	blx	r2
}
  2004aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2004ae:	f7ff bf57 	b.w	200360 <_port_irq_epilogue>
  2004b2:	bf00      	nop
  2004b4:	40026400 	.word	0x40026400
  2004b8:	200009b0 	.word	0x200009b0
  2004bc:	00000000 	.word	0x00000000

002004c0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2004c0:	4b08      	ldr	r3, [pc, #32]	; (2004e4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  2004c2:	4809      	ldr	r0, [pc, #36]	; (2004e8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2004c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  2004c6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2004c8:	0989      	lsrs	r1, r1, #6
  2004ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  2004ce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  2004d0:	018c      	lsls	r4, r1, #6
  2004d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  2004d4:	b10a      	cbz	r2, 2004da <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  2004d6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  2004d8:	4790      	blx	r2
}
  2004da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2004de:	f7ff bf3f 	b.w	200360 <_port_irq_epilogue>
  2004e2:	bf00      	nop
  2004e4:	40026400 	.word	0x40026400
  2004e8:	200009b0 	.word	0x200009b0
  2004ec:	00000000 	.word	0x00000000

002004f0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  2004f0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2004f2:	4b07      	ldr	r3, [pc, #28]	; (200510 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  2004f4:	4807      	ldr	r0, [pc, #28]	; (200514 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2004f6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  2004f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2004fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  2004fe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  200500:	b10a      	cbz	r2, 200506 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  200502:	6e40      	ldr	r0, [r0, #100]	; 0x64
  200504:	4790      	blx	r2
}
  200506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20050a:	f7ff bf29 	b.w	200360 <_port_irq_epilogue>
  20050e:	bf00      	nop
  200510:	40026400 	.word	0x40026400
  200514:	200009b0 	.word	0x200009b0
	...

00200520 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200520:	4b08      	ldr	r3, [pc, #32]	; (200544 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  200522:	4809      	ldr	r0, [pc, #36]	; (200548 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200524:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  200526:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200528:	0d89      	lsrs	r1, r1, #22
  20052a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  20052e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  200530:	058c      	lsls	r4, r1, #22
  200532:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  200534:	b10a      	cbz	r2, 20053a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  200536:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  200538:	4790      	blx	r2
}
  20053a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20053e:	f7ff bf0f 	b.w	200360 <_port_irq_epilogue>
  200542:	bf00      	nop
  200544:	40026400 	.word	0x40026400
  200548:	200009b0 	.word	0x200009b0
  20054c:	00000000 	.word	0x00000000

00200550 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200550:	4b08      	ldr	r3, [pc, #32]	; (200574 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  200552:	4809      	ldr	r0, [pc, #36]	; (200578 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200554:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  200556:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200558:	0c09      	lsrs	r1, r1, #16
  20055a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  20055e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  200560:	040c      	lsls	r4, r1, #16
  200562:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  200564:	b10a      	cbz	r2, 20056a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  200566:	6d40      	ldr	r0, [r0, #84]	; 0x54
  200568:	4790      	blx	r2
}
  20056a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20056e:	f7ff bef7 	b.w	200360 <_port_irq_epilogue>
  200572:	bf00      	nop
  200574:	40026400 	.word	0x40026400
  200578:	200009b0 	.word	0x200009b0
  20057c:	00000000 	.word	0x00000000

00200580 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200580:	4b08      	ldr	r3, [pc, #32]	; (2005a4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  200582:	4809      	ldr	r0, [pc, #36]	; (2005a8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200584:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  200586:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200588:	0989      	lsrs	r1, r1, #6
  20058a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20058e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  200590:	018c      	lsls	r4, r1, #6
  200592:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  200594:	b10a      	cbz	r2, 20059a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  200596:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  200598:	4790      	blx	r2
}
  20059a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20059e:	f7ff bedf 	b.w	200360 <_port_irq_epilogue>
  2005a2:	bf00      	nop
  2005a4:	40026400 	.word	0x40026400
  2005a8:	200009b0 	.word	0x200009b0
  2005ac:	00000000 	.word	0x00000000

002005b0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  2005b0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2005b2:	4b07      	ldr	r3, [pc, #28]	; (2005d0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  2005b4:	4807      	ldr	r0, [pc, #28]	; (2005d4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2005b6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  2005b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2005ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  2005be:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  2005c0:	b10a      	cbz	r2, 2005c6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  2005c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
  2005c4:	4790      	blx	r2
}
  2005c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2005ca:	f7ff bec9 	b.w	200360 <_port_irq_epilogue>
  2005ce:	bf00      	nop
  2005d0:	40026400 	.word	0x40026400
  2005d4:	200009b0 	.word	0x200009b0
	...

002005e0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2005e0:	4b08      	ldr	r3, [pc, #32]	; (200604 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  2005e2:	4809      	ldr	r0, [pc, #36]	; (200608 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2005e4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  2005e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2005e8:	0d89      	lsrs	r1, r1, #22
  2005ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  2005ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  2005f0:	058c      	lsls	r4, r1, #22
  2005f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  2005f4:	b10a      	cbz	r2, 2005fa <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  2005f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  2005f8:	4790      	blx	r2
}
  2005fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2005fe:	f7ff beaf 	b.w	200360 <_port_irq_epilogue>
  200602:	bf00      	nop
  200604:	40026000 	.word	0x40026000
  200608:	200009b0 	.word	0x200009b0
  20060c:	00000000 	.word	0x00000000

00200610 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200610:	4b08      	ldr	r3, [pc, #32]	; (200634 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  200612:	4809      	ldr	r0, [pc, #36]	; (200638 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200614:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  200616:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200618:	0c09      	lsrs	r1, r1, #16
  20061a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  20061e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  200620:	040c      	lsls	r4, r1, #16
  200622:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  200624:	b10a      	cbz	r2, 20062a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  200626:	6b40      	ldr	r0, [r0, #52]	; 0x34
  200628:	4790      	blx	r2
}
  20062a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20062e:	f7ff be97 	b.w	200360 <_port_irq_epilogue>
  200632:	bf00      	nop
  200634:	40026000 	.word	0x40026000
  200638:	200009b0 	.word	0x200009b0
  20063c:	00000000 	.word	0x00000000

00200640 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200640:	4b08      	ldr	r3, [pc, #32]	; (200664 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  200642:	4809      	ldr	r0, [pc, #36]	; (200668 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200644:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  200646:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200648:	0989      	lsrs	r1, r1, #6
  20064a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  20064e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  200650:	018c      	lsls	r4, r1, #6
  200652:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  200654:	b10a      	cbz	r2, 20065a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  200656:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200658:	4790      	blx	r2
}
  20065a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20065e:	f7ff be7f 	b.w	200360 <_port_irq_epilogue>
  200662:	bf00      	nop
  200664:	40026000 	.word	0x40026000
  200668:	200009b0 	.word	0x200009b0
  20066c:	00000000 	.word	0x00000000

00200670 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  200670:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200672:	4b07      	ldr	r3, [pc, #28]	; (200690 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  200674:	4807      	ldr	r0, [pc, #28]	; (200694 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200676:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  200678:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20067a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20067e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  200680:	b10a      	cbz	r2, 200686 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  200682:	6a40      	ldr	r0, [r0, #36]	; 0x24
  200684:	4790      	blx	r2
}
  200686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20068a:	f7ff be69 	b.w	200360 <_port_irq_epilogue>
  20068e:	bf00      	nop
  200690:	40026000 	.word	0x40026000
  200694:	200009b0 	.word	0x200009b0
	...

002006a0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2006a0:	4b08      	ldr	r3, [pc, #32]	; (2006c4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  2006a2:	4809      	ldr	r0, [pc, #36]	; (2006c8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2006a4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  2006a6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2006a8:	0d89      	lsrs	r1, r1, #22
  2006aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  2006ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  2006b0:	058c      	lsls	r4, r1, #22
  2006b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  2006b4:	b10a      	cbz	r2, 2006ba <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  2006b6:	69c0      	ldr	r0, [r0, #28]
  2006b8:	4790      	blx	r2
}
  2006ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2006be:	f7ff be4f 	b.w	200360 <_port_irq_epilogue>
  2006c2:	bf00      	nop
  2006c4:	40026000 	.word	0x40026000
  2006c8:	200009b0 	.word	0x200009b0
  2006cc:	00000000 	.word	0x00000000

002006d0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2006d0:	4b08      	ldr	r3, [pc, #32]	; (2006f4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  2006d2:	4809      	ldr	r0, [pc, #36]	; (2006f8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2006d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  2006d6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2006d8:	0c09      	lsrs	r1, r1, #16
  2006da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  2006de:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  2006e0:	040c      	lsls	r4, r1, #16
  2006e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  2006e4:	b10a      	cbz	r2, 2006ea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  2006e6:	6940      	ldr	r0, [r0, #20]
  2006e8:	4790      	blx	r2
}
  2006ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2006ee:	f7ff be37 	b.w	200360 <_port_irq_epilogue>
  2006f2:	bf00      	nop
  2006f4:	40026000 	.word	0x40026000
  2006f8:	200009b0 	.word	0x200009b0
  2006fc:	00000000 	.word	0x00000000

00200700 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200700:	4b08      	ldr	r3, [pc, #32]	; (200724 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  200702:	4809      	ldr	r0, [pc, #36]	; (200728 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200704:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  200706:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200708:	0989      	lsrs	r1, r1, #6
  20070a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20070e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  200710:	018c      	lsls	r4, r1, #6
  200712:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  200714:	b10a      	cbz	r2, 20071a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  200716:	68c0      	ldr	r0, [r0, #12]
  200718:	4790      	blx	r2
}
  20071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20071e:	f7ff be1f 	b.w	200360 <_port_irq_epilogue>
  200722:	bf00      	nop
  200724:	40026000 	.word	0x40026000
  200728:	200009b0 	.word	0x200009b0
  20072c:	00000000 	.word	0x00000000

00200730 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  200730:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200732:	4b07      	ldr	r3, [pc, #28]	; (200750 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  200734:	4a07      	ldr	r2, [pc, #28]	; (200754 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200736:	6819      	ldr	r1, [r3, #0]
  200738:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  20073c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  20073e:	6813      	ldr	r3, [r2, #0]
  200740:	b10b      	cbz	r3, 200746 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  200742:	6850      	ldr	r0, [r2, #4]
  200744:	4798      	blx	r3
}
  200746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20074a:	f7ff be09 	b.w	200360 <_port_irq_epilogue>
  20074e:	bf00      	nop
  200750:	40026000 	.word	0x40026000
  200754:	200009b0 	.word	0x200009b0
	...

00200760 <SVC_Handler>:
void SVC_Handler(void) {
  200760:	b480      	push	{r7}
  200762:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200764:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200768:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20076a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20076e:	2300      	movs	r3, #0
  200770:	f383 8811 	msr	BASEPRI, r3
}
  200774:	46bd      	mov	sp, r7
  200776:	bc80      	pop	{r7}
  200778:	4770      	bx	lr
  20077a:	bf00      	nop
  20077c:	0000      	movs	r0, r0
	...

00200780 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200780:	4b0e      	ldr	r3, [pc, #56]	; (2007bc <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  200782:	6882      	ldr	r2, [r0, #8]
  200784:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  200786:	490e      	ldr	r1, [pc, #56]	; (2007c0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  200788:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20078a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20078c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20078e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  200790:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  200792:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  200794:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  200796:	6083      	str	r3, [r0, #8]
  tmp->n++;
  200798:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20079a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  20079e:	18e4      	adds	r4, r4, r3
  2007a0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2007a4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2007a6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2007a8:	bf88      	it	hi
  2007aa:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2007ac:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2007ae:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2007b2:	bf38      	it	cc
  2007b4:	6003      	strcc	r3, [r0, #0]
}
  2007b6:	bc30      	pop	{r4, r5}
  2007b8:	4770      	bx	lr
  2007ba:	bf00      	nop
  2007bc:	e0001000 	.word	0xe0001000
  2007c0:	20000844 	.word	0x20000844
	...

002007d0 <wakeup>:
  2007d0:	2320      	movs	r3, #32
  2007d2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  2007d6:	f890 3020 	ldrb.w	r3, [r0, #32]
  2007da:	2b07      	cmp	r3, #7
  2007dc:	d80e      	bhi.n	2007fc <wakeup+0x2c>
  2007de:	e8df f003 	tbb	[pc, r3]
  2007e2:	0d28      	.short	0x0d28
  2007e4:	0408240d 	.word	0x0408240d
  2007e8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  2007ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  2007ec:	6893      	ldr	r3, [r2, #8]
  2007ee:	3301      	adds	r3, #1
  2007f0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  2007f2:	e890 000c 	ldmia.w	r0, {r2, r3}
  2007f6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  2007f8:	6802      	ldr	r2, [r0, #0]
  2007fa:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  2007fc:	2200      	movs	r2, #0
  2007fe:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200800:	4b0e      	ldr	r3, [pc, #56]	; (20083c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200802:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200806:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200808:	f04f 34ff 	mov.w	r4, #4294967295
  20080c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20080e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200810:	689a      	ldr	r2, [r3, #8]
  200812:	428a      	cmp	r2, r1
  200814:	d2fb      	bcs.n	20080e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200816:	685a      	ldr	r2, [r3, #4]
  200818:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20081a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20081c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20081e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200820:	6058      	str	r0, [r3, #4]
  200822:	f381 8811 	msr	BASEPRI, r1
}
  200826:	bc10      	pop	{r4}
  200828:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20082a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20082c:	2200      	movs	r2, #0
  20082e:	601a      	str	r2, [r3, #0]
  200830:	e7e4      	b.n	2007fc <wakeup+0x2c>
  200832:	2300      	movs	r3, #0
  200834:	f383 8811 	msr	BASEPRI, r3
  200838:	4770      	bx	lr
  20083a:	bf00      	nop
  20083c:	20000844 	.word	0x20000844

00200840 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  200840:	e7fe      	b.n	200840 <_idle_thread>
  200842:	bf00      	nop
	...

00200850 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200850:	e7fe      	b.n	200850 <BusFault_Handler>
  200852:	bf00      	nop
	...

00200860 <chSchGoSleepS>:
  thread_t *otp = currp;
  200860:	4b08      	ldr	r3, [pc, #32]	; (200884 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200862:	681a      	ldr	r2, [r3, #0]
  200864:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200866:	b430      	push	{r4, r5}
  otp->state = newstate;
  200868:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  20086c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  20086e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200870:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200872:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200874:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200876:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20087a:	619a      	str	r2, [r3, #24]
}
  20087c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  20087e:	f7ff bd29 	b.w	2002d4 <_port_switch>
  200882:	bf00      	nop
  200884:	20000844 	.word	0x20000844
	...

00200890 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  200890:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200894:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  200896:	b5f0      	push	{r4, r5, r6, r7, lr}
  200898:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20089a:	d031      	beq.n	200900 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20089c:	4c1c      	ldr	r4, [pc, #112]	; (200910 <chSchGoSleepTimeoutS+0x80>)
  20089e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  2008a0:	481c      	ldr	r0, [pc, #112]	; (200914 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  2008a2:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  2008a4:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  2008a6:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  2008a8:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  2008aa:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  2008ac:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  2008ae:	d905      	bls.n	2008bc <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  2008b0:	1a89      	subs	r1, r1, r2
    p = p->next;
  2008b2:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  2008b4:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  2008b6:	891a      	ldrh	r2, [r3, #8]
  2008b8:	428a      	cmp	r2, r1
  2008ba:	d3f9      	bcc.n	2008b0 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  2008bc:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  2008be:	aa01      	add	r2, sp, #4
  vtp->next = p;
  2008c0:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  2008c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  2008c6:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  2008c8:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  2008ca:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  2008cc:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  2008ce:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  2008d2:	891a      	ldrh	r2, [r3, #8]
  2008d4:	1a51      	subs	r1, r2, r1
  2008d6:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  2008d8:	84a6      	strh	r6, [r4, #36]	; 0x24
  2008da:	f7ff ffc1 	bl	200860 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  2008de:	9b04      	ldr	r3, [sp, #16]
  2008e0:	b153      	cbz	r3, 2008f8 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  2008e2:	9b01      	ldr	r3, [sp, #4]
  2008e4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  2008e8:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  2008ea:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  2008ec:	4402      	add	r2, r0
  2008ee:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  2008f0:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  2008f2:	9b01      	ldr	r3, [sp, #4]
  2008f4:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  2008f6:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  2008f8:	69a3      	ldr	r3, [r4, #24]
}
  2008fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2008fc:	b007      	add	sp, #28
  2008fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200900:	4c03      	ldr	r4, [pc, #12]	; (200910 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  200902:	f7ff ffad 	bl	200860 <chSchGoSleepS>
  return currp->u.rdymsg;
  200906:	69a3      	ldr	r3, [r4, #24]
}
  200908:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20090a:	b007      	add	sp, #28
  20090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20090e:	bf00      	nop
  200910:	20000844 	.word	0x20000844
  200914:	002007d1 	.word	0x002007d1
	...

00200920 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
  200920:	b161      	cbz	r1, 20093c <chThdEnqueueTimeoutS+0x1c>
  200922:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  200924:	4b07      	ldr	r3, [pc, #28]	; (200944 <chThdEnqueueTimeoutS+0x24>)

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  200926:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  200928:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20092a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20092c:	6854      	ldr	r4, [r2, #4]
  20092e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  200932:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  200934:	6053      	str	r3, [r2, #4]
}
  200936:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  200938:	f7ff bfaa 	b.w	200890 <chSchGoSleepTimeoutS>
}
  20093c:	f04f 30ff 	mov.w	r0, #4294967295
  200940:	4770      	bx	lr
  200942:	bf00      	nop
  200944:	20000844 	.word	0x20000844
	...

00200950 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  200950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200954:	4699      	mov	r9, r3
  200956:	b083      	sub	sp, #12
  200958:	4604      	mov	r4, r0
  20095a:	460e      	mov	r6, r1
  20095c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20095e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200962:	2320      	movs	r3, #32
  200964:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  200968:	4b26      	ldr	r3, [pc, #152]	; (200a04 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20096a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20096e:	2700      	movs	r7, #0
  200970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200972:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  200976:	fa19 f383 	uxtah	r3, r9, r3
  20097a:	b29b      	uxth	r3, r3
  20097c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20097e:	68a3      	ldr	r3, [r4, #8]
  200980:	b313      	cbz	r3, 2009c8 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  200982:	6961      	ldr	r1, [r4, #20]
  200984:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  200988:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20098a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20098c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20098e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  200990:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  200992:	7833      	ldrb	r3, [r6, #0]
  200994:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  200996:	6961      	ldr	r1, [r4, #20]
  200998:	6923      	ldr	r3, [r4, #16]
  20099a:	4299      	cmp	r1, r3
  20099c:	d301      	bcc.n	2009a2 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20099e:	68e3      	ldr	r3, [r4, #12]
  2009a0:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  2009a2:	f1b8 0f00 	cmp.w	r8, #0
  2009a6:	d001      	beq.n	2009ac <oqWriteTimeout+0x5c>
      nfy(oqp);
  2009a8:	4620      	mov	r0, r4
  2009aa:	47c0      	blx	r8
  2009ac:	2300      	movs	r3, #0
  2009ae:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  2009b2:	3d01      	subs	r5, #1
    w++;
  2009b4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2009b8:	d019      	beq.n	2009ee <oqWriteTimeout+0x9e>
  2009ba:	2320      	movs	r3, #32
  2009bc:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  2009c0:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009c2:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  2009c4:	2b00      	cmp	r3, #0
  2009c6:	d1dc      	bne.n	200982 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2009c8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2009cc:	4592      	cmp	sl, r2
  2009ce:	d812      	bhi.n	2009f6 <oqWriteTimeout+0xa6>
  2009d0:	4a0c      	ldr	r2, [pc, #48]	; (200a04 <oqWriteTimeout+0xb4>)
  2009d2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2009d4:	9a01      	ldr	r2, [sp, #4]
  2009d6:	1a51      	subs	r1, r2, r1
  2009d8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2009da:	4589      	cmp	r9, r1
  2009dc:	d305      	bcc.n	2009ea <oqWriteTimeout+0x9a>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
  2009de:	4620      	mov	r0, r4
  2009e0:	f7ff ff9e 	bl	200920 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2009e4:	2800      	cmp	r0, #0
  2009e6:	d0ca      	beq.n	20097e <oqWriteTimeout+0x2e>
  2009e8:	2300      	movs	r3, #0
  2009ea:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  2009ee:	4638      	mov	r0, r7
  2009f0:	b003      	add	sp, #12
  2009f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2009f6:	4649      	mov	r1, r9
  2009f8:	4620      	mov	r0, r4
  2009fa:	f7ff ff91 	bl	200920 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2009fe:	2800      	cmp	r0, #0
  200a00:	d0bd      	beq.n	20097e <oqWriteTimeout+0x2e>
  200a02:	e7f1      	b.n	2009e8 <oqWriteTimeout+0x98>
  200a04:	20000844 	.word	0x20000844
	...

00200a10 <_writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  200a10:	3030      	adds	r0, #48	; 0x30
  200a12:	f7ff bf9d 	b.w	200950 <oqWriteTimeout>
  200a16:	bf00      	nop
	...

00200a20 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  200a20:	3030      	adds	r0, #48	; 0x30
  200a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200a26:	f7ff bf93 	b.w	200950 <oqWriteTimeout>
  200a2a:	bf00      	nop
  200a2c:	0000      	movs	r0, r0
	...

00200a30 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  200a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  200a32:	4604      	mov	r4, r0
  200a34:	460f      	mov	r7, r1
  200a36:	4616      	mov	r6, r2
  200a38:	2320      	movs	r3, #32
  200a3a:	f383 8811 	msr	BASEPRI, r3
  200a3e:	e003      	b.n	200a48 <oqPutTimeout+0x18>
  200a40:	f7ff ff6e 	bl	200920 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200a44:	2800      	cmp	r0, #0
  200a46:	db19      	blt.n	200a7c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  200a48:	68a5      	ldr	r5, [r4, #8]
  200a4a:	4631      	mov	r1, r6
  200a4c:	4620      	mov	r0, r4
  200a4e:	2d00      	cmp	r5, #0
  200a50:	d0f6      	beq.n	200a40 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  200a52:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  200a54:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200a56:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  200a58:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  200a5a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  200a5c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200a5e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200a60:	6962      	ldr	r2, [r4, #20]
  200a62:	6923      	ldr	r3, [r4, #16]
  200a64:	429a      	cmp	r2, r3
  200a66:	d301      	bcc.n	200a6c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  200a68:	68e3      	ldr	r3, [r4, #12]
  200a6a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  200a6c:	69e3      	ldr	r3, [r4, #28]
  200a6e:	b10b      	cbz	r3, 200a74 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  200a70:	4620      	mov	r0, r4
  200a72:	4798      	blx	r3
  200a74:	2000      	movs	r0, #0
  200a76:	f380 8811 	msr	BASEPRI, r0
}
  200a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200a7c:	f385 8811 	msr	BASEPRI, r5
  200a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200a82:	bf00      	nop
	...

00200a90 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  200a90:	3030      	adds	r0, #48	; 0x30
  200a92:	f7ff bfcd 	b.w	200a30 <oqPutTimeout>
  200a96:	bf00      	nop
	...

00200aa0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  200aa0:	3030      	adds	r0, #48	; 0x30
  200aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  200aa6:	f7ff bfc3 	b.w	200a30 <oqPutTimeout>
  200aaa:	bf00      	nop
  200aac:	0000      	movs	r0, r0
	...

00200ab0 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  200ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200ab4:	4699      	mov	r9, r3
  200ab6:	b083      	sub	sp, #12
  200ab8:	4604      	mov	r4, r0
  200aba:	460e      	mov	r6, r1
  200abc:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  200abe:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200ac2:	2320      	movs	r3, #32
  200ac4:	f383 8811 	msr	BASEPRI, r3
  200ac8:	4b26      	ldr	r3, [pc, #152]	; (200b64 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200aca:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  200ace:	2700      	movs	r7, #0
  200ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200ad2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  200ad6:	fa19 f383 	uxtah	r3, r9, r3
  200ada:	b29b      	uxth	r3, r3
  200adc:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  200ade:	68a3      	ldr	r3, [r4, #8]
  200ae0:	b313      	cbz	r3, 200b28 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  200ae2:	69a1      	ldr	r1, [r4, #24]
  200ae4:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  200ae8:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200aea:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  200aec:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  200aee:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  200af0:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200af2:	780b      	ldrb	r3, [r1, #0]
  200af4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  200af6:	69a1      	ldr	r1, [r4, #24]
  200af8:	6923      	ldr	r3, [r4, #16]
  200afa:	4299      	cmp	r1, r3
  200afc:	d301      	bcc.n	200b02 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  200afe:	68e3      	ldr	r3, [r4, #12]
  200b00:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  200b02:	f1b8 0f00 	cmp.w	r8, #0
  200b06:	d001      	beq.n	200b0c <iqReadTimeout+0x5c>
      nfy(iqp);
  200b08:	4620      	mov	r0, r4
  200b0a:	47c0      	blx	r8
  200b0c:	2300      	movs	r3, #0
  200b0e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  200b12:	3d01      	subs	r5, #1
    r++;
  200b14:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200b18:	d019      	beq.n	200b4e <iqReadTimeout+0x9e>
  200b1a:	2320      	movs	r3, #32
  200b1c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  200b20:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b22:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  200b24:	2b00      	cmp	r3, #0
  200b26:	d1dc      	bne.n	200ae2 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b28:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  200b2c:	4592      	cmp	sl, r2
  200b2e:	d812      	bhi.n	200b56 <iqReadTimeout+0xa6>
  200b30:	4a0c      	ldr	r2, [pc, #48]	; (200b64 <iqReadTimeout+0xb4>)
  200b32:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200b34:	9a01      	ldr	r2, [sp, #4]
  200b36:	1a51      	subs	r1, r2, r1
  200b38:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  200b3a:	4589      	cmp	r9, r1
  200b3c:	d305      	bcc.n	200b4a <iqReadTimeout+0x9a>
  200b3e:	4620      	mov	r0, r4
  200b40:	f7ff feee 	bl	200920 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200b44:	2800      	cmp	r0, #0
  200b46:	d0ca      	beq.n	200ade <iqReadTimeout+0x2e>
  200b48:	2300      	movs	r3, #0
  200b4a:	f383 8811 	msr	BASEPRI, r3
}
  200b4e:	4638      	mov	r0, r7
  200b50:	b003      	add	sp, #12
  200b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200b56:	4649      	mov	r1, r9
  200b58:	4620      	mov	r0, r4
  200b5a:	f7ff fee1 	bl	200920 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200b5e:	2800      	cmp	r0, #0
  200b60:	d0bd      	beq.n	200ade <iqReadTimeout+0x2e>
  200b62:	e7f1      	b.n	200b48 <iqReadTimeout+0x98>
  200b64:	20000844 	.word	0x20000844
	...

00200b70 <_readt>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  200b70:	300c      	adds	r0, #12
  200b72:	f7ff bf9d 	b.w	200ab0 <iqReadTimeout>
  200b76:	bf00      	nop
	...

00200b80 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  200b80:	300c      	adds	r0, #12
  200b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
  200b86:	f7ff bf93 	b.w	200ab0 <iqReadTimeout>
  200b8a:	bf00      	nop
  200b8c:	0000      	movs	r0, r0
	...

00200b90 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  200b90:	b570      	push	{r4, r5, r6, lr}
  200b92:	2320      	movs	r3, #32
  200b94:	4604      	mov	r4, r0
  200b96:	460e      	mov	r6, r1
  200b98:	f383 8811 	msr	BASEPRI, r3
  200b9c:	e003      	b.n	200ba6 <iqGetTimeout+0x16>
  200b9e:	f7ff febf 	bl	200920 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200ba2:	2800      	cmp	r0, #0
  200ba4:	db19      	blt.n	200bda <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  200ba6:	68a5      	ldr	r5, [r4, #8]
  200ba8:	4631      	mov	r1, r6
  200baa:	4620      	mov	r0, r4
  200bac:	2d00      	cmp	r5, #0
  200bae:	d0f6      	beq.n	200b9e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  200bb0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  200bb2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200bb4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200bb6:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  200bb8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200bba:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  200bbc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  200bbe:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200bc0:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  200bc2:	d301      	bcc.n	200bc8 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  200bc4:	68e3      	ldr	r3, [r4, #12]
  200bc6:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  200bc8:	69e3      	ldr	r3, [r4, #28]
  200bca:	b10b      	cbz	r3, 200bd0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  200bcc:	4620      	mov	r0, r4
  200bce:	4798      	blx	r3
  200bd0:	2300      	movs	r3, #0
  200bd2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  200bd6:	4628      	mov	r0, r5
}
  200bd8:	bd70      	pop	{r4, r5, r6, pc}
  200bda:	f385 8811 	msr	BASEPRI, r5
  200bde:	bd70      	pop	{r4, r5, r6, pc}

00200be0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  200be0:	300c      	adds	r0, #12
  200be2:	f7ff bfd5 	b.w	200b90 <iqGetTimeout>
  200be6:	bf00      	nop
	...

00200bf0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  200bf0:	300c      	adds	r0, #12
  200bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  200bf6:	f7ff bfcb 	b.w	200b90 <iqGetTimeout>
  200bfa:	bf00      	nop
  200bfc:	0000      	movs	r0, r0
	...

00200c00 <main>:
  tqp->next = (thread_t *)tqp;
  200c00:	4c83      	ldr	r4, [pc, #524]	; (200e10 <main+0x210>)
  ch.rlist.prio = NOPRIO;
  200c02:	2500      	movs	r5, #0
  ch.vtlist.delta = (systime_t)-1;
  200c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  200c08:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200c0c:	f104 031c 	add.w	r3, r4, #28
  tmp->cumulative = (rttime_t)0;
  200c10:	2600      	movs	r6, #0
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200c12:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
    }
    return(res);
}

int main(void)
{
  200c16:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  200c1a:	b089      	sub	sp, #36	; 0x24
  200c1c:	2700      	movs	r7, #0
  200c1e:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  200c20:	a802      	add	r0, sp, #8
  tqp->prev = (thread_t *)tqp;
  200c22:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  200c24:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200c26:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200c28:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  200c2a:	9202      	str	r2, [sp, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  200c2c:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  200c2e:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  200c30:	60a5      	str	r5, [r4, #8]
  ch.vtlist.systime = (systime_t)0;
  200c32:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200c34:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200c36:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  200c38:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
  200c3a:	9505      	str	r5, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  200c3c:	e9cd 6706 	strd	r6, r7, [sp, #24]
  chTMStartMeasurementX(&tm);
  200c40:	f000 fd86 	bl	201750 <chTMStartMeasurementX.constprop.21>
  chTMStopMeasurementX(&tm);
  200c44:	a802      	add	r0, sp, #8
  200c46:	f7ff fd9b 	bl	200780 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  200c4a:	4b72      	ldr	r3, [pc, #456]	; (200e14 <main+0x214>)
  200c4c:	4972      	ldr	r1, [pc, #456]	; (200e18 <main+0x218>)
  tp->prio      = prio;
  200c4e:	f04f 0e80 	mov.w	lr, #128	; 0x80
  nextmem = __heap_base__;
  200c52:	4a72      	ldr	r2, [pc, #456]	; (200e1c <main+0x21c>)
  REG_INSERT(tp);
  200c54:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  200c58:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  200c5a:	f103 0c10 	add.w	ip, r3, #16
  200c5e:	4970      	ldr	r1, [pc, #448]	; (200e20 <main+0x220>)
  endmem  = __heap_end__;
  200c60:	4f70      	ldr	r7, [pc, #448]	; (200e24 <main+0x224>)
  nextmem = __heap_base__;
  200c62:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200c64:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  200c66:	4970      	ldr	r1, [pc, #448]	; (200e28 <main+0x228>)
  ch.tm.offset = tm.last;
  200c68:	9804      	ldr	r0, [sp, #16]
  200c6a:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  200c6c:	496f      	ldr	r1, [pc, #444]	; (200e2c <main+0x22c>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200c6e:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  200c72:	68cf      	ldr	r7, [r1, #12]
  200c74:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200c76:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  200c7a:	486d      	ldr	r0, [pc, #436]	; (200e30 <main+0x230>)
  tp->prio      = prio;
  200c7c:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  200c80:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  200c84:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200c86:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 200e5c <main+0x25c>
  REG_INSERT(tp);
  200c8a:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  200c8c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 200e60 <main+0x260>
  tp->epending  = (eventmask_t)0;
  200c90:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200c92:	619d      	str	r5, [r3, #24]
  200c94:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  200c98:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  200c9c:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  200ca0:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  200ca2:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  200ca6:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  200ca8:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  200caa:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  200cae:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  200cb0:	f104 0758 	add.w	r7, r4, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  200cb4:	60c8      	str	r0, [r1, #12]
  200cb6:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  200cba:	609d      	str	r5, [r3, #8]
  200cbc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  200cc0:	60dd      	str	r5, [r3, #12]
  200cc2:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  200cc4:	61a6      	str	r6, [r4, #24]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  200cc6:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  200cc8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  200ccc:	f04f 0c10 	mov.w	ip, #16
  DWT->LAR = 0xC5ACCE55U;
  200cd0:	4b58      	ldr	r3, [pc, #352]	; (200e34 <main+0x234>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  200cd2:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  200cd4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200cd8:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  200cdc:	4856      	ldr	r0, [pc, #344]	; (200e38 <main+0x238>)
  tqp->next = (thread_t *)tqp;
  200cde:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  200ce0:	65e7      	str	r7, [r4, #92]	; 0x5c
  200ce2:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  200ce6:	6818      	ldr	r0, [r3, #0]
  200ce8:	4310      	orrs	r0, r2
  200cea:	6018      	str	r0, [r3, #0]
  200cec:	f881 c01f 	strb.w	ip, [r1, #31]
  200cf0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  200cf4:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  200cf8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200cfa:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  200cfe:	4b4f      	ldr	r3, [pc, #316]	; (200e3c <main+0x23c>)
  tp->state     = CH_STATE_WTSTART;
  200d00:	2602      	movs	r6, #2
  REG_INSERT(tp);
  200d02:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
  200d04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d08:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  200d0c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  200d10:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  200d14:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d18:	4a49      	ldr	r2, [pc, #292]	; (200e40 <main+0x240>)
  200d1a:	f8df e148 	ldr.w	lr, [pc, #328]	; 200e64 <main+0x264>
  200d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  200d22:	4a48      	ldr	r2, [pc, #288]	; (200e44 <main+0x244>)
  tp->state     = CH_STATE_WTSTART;
  200d24:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  200d28:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  200d2c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200d30:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200d34:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d38:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  200d3c:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  200d40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d44:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200d46:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  200d4a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200d4e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200d52:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  200d56:	6101      	str	r1, [r0, #16]
  thread_t *otp = currp;
  200d58:	69a2      	ldr	r2, [r4, #24]
  ntp->u.rdymsg = msg;
  200d5a:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  200d5e:	6890      	ldr	r0, [r2, #8]
  200d60:	6161      	str	r1, [r4, #20]
  200d62:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200d66:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  200d6a:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  200d6e:	2800      	cmp	r0, #0
  200d70:	d04b      	beq.n	200e0a <main+0x20a>
  tp->state = CH_STATE_READY;
  200d72:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200d76:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  200d78:	68a2      	ldr	r2, [r4, #8]
  200d7a:	2a00      	cmp	r2, #0
  200d7c:	d1fb      	bne.n	200d76 <main+0x176>
  tp->queue.next             = cp;
  200d7e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200d82:	6860      	ldr	r0, [r4, #4]
  200d84:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  200d88:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  200d8a:	6061      	str	r1, [r4, #4]
  200d8c:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200d90:	4b2d      	ldr	r3, [pc, #180]	; (200e48 <main+0x248>)
  200d92:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  200d96:	4c2d      	ldr	r4, [pc, #180]	; (200e4c <main+0x24c>)
  rccResetAHB1(~0);
  200d98:	6918      	ldr	r0, [r3, #16]
  200d9a:	6119      	str	r1, [r3, #16]
  200d9c:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200d9e:	6958      	ldr	r0, [r3, #20]
  200da0:	6159      	str	r1, [r3, #20]
  200da2:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200da4:	6a18      	ldr	r0, [r3, #32]
  200da6:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  200daa:	6218      	str	r0, [r3, #32]
  200dac:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200dae:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200db0:	6259      	str	r1, [r3, #36]	; 0x24
  200db2:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200db4:	6821      	ldr	r1, [r4, #0]
  200db6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  200dba:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  200dbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  200dbe:	f401 7140 	and.w	r1, r1, #768	; 0x300
  200dc2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  200dc6:	d003      	beq.n	200dd0 <main+0x1d0>
    RCC->BDCR = RCC_BDCR_BDRST;
  200dc8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  200dcc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  200dce:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200dd0:	4b1d      	ldr	r3, [pc, #116]	; (200e48 <main+0x248>)
  200dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200dd4:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200dd6:	f042 0219 	orr.w	r2, r2, #25
  200dda:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200ddc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  200dde:	079b      	lsls	r3, r3, #30
  200de0:	d5fc      	bpl.n	200ddc <main+0x1dc>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  200de2:	481a      	ldr	r0, [pc, #104]	; (200e4c <main+0x24c>)
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  200de4:	2600      	movs	r6, #0
  200de6:	491a      	ldr	r1, [pc, #104]	; (200e50 <main+0x250>)
  200de8:	6842      	ldr	r2, [r0, #4]
    _stm32_dma_streams[i].stream->CR = 0U;
  200dea:	4633      	mov	r3, r6
  200dec:	4c19      	ldr	r4, [pc, #100]	; (200e54 <main+0x254>)
  200dee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  200df2:	4d19      	ldr	r5, [pc, #100]	; (200e58 <main+0x258>)
  200df4:	6042      	str	r2, [r0, #4]
  200df6:	6023      	str	r3, [r4, #0]
  200df8:	310c      	adds	r1, #12
    dma_isr_redir[i].dma_func = NULL;
  200dfa:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  200dfe:	3601      	adds	r6, #1
  200e00:	2e10      	cmp	r6, #16
  200e02:	d031      	beq.n	200e68 <main+0x268>
  200e04:	f851 4c0c 	ldr.w	r4, [r1, #-12]
  200e08:	e7f5      	b.n	200df6 <main+0x1f6>
  tp->state = CH_STATE_READY;
  200e0a:	f882 0020 	strb.w	r0, [r2, #32]
  200e0e:	e7fe      	b.n	200e0e <main+0x20e>
  200e10:	20000844 	.word	0x20000844
  200e14:	20000990 	.word	0x20000990
  200e18:	00200311 	.word	0x00200311
  200e1c:	20000a34 	.word	0x20000a34
  200e20:	20020000 	.word	0x20020000
  200e24:	20080000 	.word	0x20080000
  200e28:	20000a30 	.word	0x20000a30
  200e2c:	e000ed00 	.word	0xe000ed00
  200e30:	05fa0300 	.word	0x05fa0300
  200e34:	e0001000 	.word	0xe0001000
  200e38:	c5acce55 	.word	0xc5acce55
  200e3c:	200008b8 	.word	0x200008b8
  200e40:	002002e5 	.word	0x002002e5
  200e44:	0800193c 	.word	0x0800193c
  200e48:	40023800 	.word	0x40023800
  200e4c:	40007000 	.word	0x40007000
  200e50:	08001870 	.word	0x08001870
  200e54:	40026010 	.word	0x40026010
  200e58:	200009b0 	.word	0x200009b0
  200e5c:	e000edf0 	.word	0xe000edf0
  200e60:	08001924 	.word	0x08001924
  200e64:	00200841 	.word	0x00200841
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  200e68:	f04f 3eff 	mov.w	lr, #4294967295
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200e6c:	4dc5      	ldr	r5, [pc, #788]	; (201184 <main+0x584>)
  200e6e:	49c6      	ldr	r1, [pc, #792]	; (201188 <main+0x588>)
  200e70:	f240 74ff 	movw	r4, #2047	; 0x7ff
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  200e74:	4ac5      	ldr	r2, [pc, #788]	; (20118c <main+0x58c>)
  gpiop->ODR     = config->odr;
  200e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->LIFCR = 0xFFFFFFFFU;
  200e7a:	f8c1 e008 	str.w	lr, [r1, #8]
  200e7e:	f64b 7b7e 	movw	fp, #49022	; 0xbf7e
  DMA1->HIFCR = 0xFFFFFFFFU;
  200e82:	f8c1 e00c 	str.w	lr, [r1, #12]
  gpiop->AFRH    = config->afrh;
  200e86:	f44f 0830 	mov.w	r8, #11534336	; 0xb00000
  DMA2->LIFCR = 0xFFFFFFFFU;
  200e8a:	f8c2 e008 	str.w	lr, [r2, #8]
  gpiop->OSPEEDR = config->ospeedr;
  200e8e:	f06f 4a70 	mvn.w	sl, #4026531840	; 0xf0000000
  DMA2->HIFCR = 0xFFFFFFFFU;
  200e92:	f8c2 e00c 	str.w	lr, [r2, #12]
  gpiop->MODER   = config->moder;
  200e96:	f640 2908 	movw	r9, #2568	; 0xa08
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200e9a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  200e9c:	49bc      	ldr	r1, [pc, #752]	; (201190 <main+0x590>)
  200e9e:	4322      	orrs	r2, r4
  iqp->q_buffer  = bp;
  200ea0:	f8df c34c 	ldr.w	ip, [pc, #844]	; 2011f0 <main+0x5f0>
  200ea4:	632a      	str	r2, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200ea6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
  200ea8:	4aba      	ldr	r2, [pc, #744]	; (201194 <main+0x594>)
  200eaa:	4327      	orrs	r7, r4
  gpiop->OTYPER  = config->otyper;
  200eac:	4cba      	ldr	r4, [pc, #744]	; (201198 <main+0x598>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200eae:	652f      	str	r7, [r5, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
  200eb0:	4fba      	ldr	r7, [pc, #744]	; (20119c <main+0x59c>)
  gpiop->OTYPER  = config->otyper;
  200eb2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200eb4:	f8c4 e008 	str.w	lr, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200eb8:	60e7      	str	r7, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200eba:	4fb9      	ldr	r7, [pc, #740]	; (2011a0 <main+0x5a0>)
  gpiop->ODR     = config->odr;
  200ebc:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200ebe:	6227      	str	r7, [r4, #32]
  gpiop->AFRH    = config->afrh;
  200ec0:	4fb8      	ldr	r7, [pc, #736]	; (2011a4 <main+0x5a4>)
  200ec2:	6267      	str	r7, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200ec4:	4fb8      	ldr	r7, [pc, #736]	; (2011a8 <main+0x5a8>)
  200ec6:	6027      	str	r7, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200ec8:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  200ecc:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200ed0:	f8c4 e408 	str.w	lr, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200ed4:	f10e 4e8a 	add.w	lr, lr, #1157627904	; 0x45000000
  200ed8:	f10e 1e55 	add.w	lr, lr, #5570645	; 0x550055
  200edc:	f50e 5ea8 	add.w	lr, lr, #5376	; 0x1500
  200ee0:	f8c4 e40c 	str.w	lr, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  200ee4:	f8df e30c 	ldr.w	lr, [pc, #780]	; 2011f4 <main+0x5f4>
  gpiop->ODR     = config->odr;
  200ee8:	f8c4 b414 	str.w	fp, [r4, #1044]	; 0x414
  iqp->q_top     = bp + size;
  200eec:	f10c 0b10 	add.w	fp, ip, #16
  gpiop->AFRL    = config->afrl;
  200ef0:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200ef4:	f8c4 8424 	str.w	r8, [r4, #1060]	; 0x424
  200ef8:	f04f 0877 	mov.w	r8, #119	; 0x77
  gpiop->MODER   = config->moder;
  200efc:	f8c4 e400 	str.w	lr, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200f00:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  200f04:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200f06:	f8c4 a008 	str.w	sl, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200f0a:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 2011f8 <main+0x5f8>
  oqp->q_buffer  = bp;
  200f0e:	f8df e2ec 	ldr.w	lr, [pc, #748]	; 2011fc <main+0x5fc>
  200f12:	f8c4 a00c 	str.w	sl, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200f16:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 201200 <main+0x600>
  gpiop->ODR     = config->odr;
  200f1a:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200f1c:	f8c4 a020 	str.w	sl, [r4, #32]
  gpiop->PUPDR   = config->pupdr;
  200f20:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 201204 <main+0x604>
  gpiop->AFRH    = config->afrh;
  200f24:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200f26:	f8c4 9000 	str.w	r9, [r4]
  200f2a:	f44f 2920 	mov.w	r9, #655360	; 0xa0000
  gpiop->OTYPER  = config->otyper;
  200f2e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200f32:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200f36:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  200f3a:	f8c4 a40c 	str.w	sl, [r4, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  200f3e:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200f42:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200f46:	f8c4 8424 	str.w	r8, [r4, #1060]	; 0x424
  gpiop->OSPEEDR = config->ospeedr;
  200f4a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 201208 <main+0x608>
  gpiop->MODER   = config->moder;
  200f4e:	f8c4 9400 	str.w	r9, [r4, #1024]	; 0x400
  200f52:	f04f 6908 	mov.w	r9, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
  200f56:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200f5a:	f8c4 8808 	str.w	r8, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200f5e:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  200f62:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 20120c <main+0x60c>
  gpiop->ODR     = config->odr;
  200f66:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  200f6a:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200f6e:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200f72:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  200f76:	4c8d      	ldr	r4, [pc, #564]	; (2011ac <main+0x5ac>)
  gpiop->OTYPER  = config->otyper;
  200f78:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->PUPDR   = config->pupdr;
  200f7c:	f8df a290 	ldr.w	sl, [pc, #656]	; 201210 <main+0x610>
  gpiop->OSPEEDR = config->ospeedr;
  200f80:	f8c8 4008 	str.w	r4, [r8, #8]
  gpiop->OTYPER  = config->otyper;
  200f84:	4c8a      	ldr	r4, [pc, #552]	; (2011b0 <main+0x5b0>)
  gpiop->PUPDR   = config->pupdr;
  200f86:	f8c8 700c 	str.w	r7, [r8, #12]
  gpiop->ODR     = config->odr;
  200f8a:	f8c8 0014 	str.w	r0, [r8, #20]
  gpiop->AFRL    = config->afrl;
  200f8e:	f8c8 3020 	str.w	r3, [r8, #32]
  gpiop->AFRH    = config->afrh;
  200f92:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200f96:	f8c8 3000 	str.w	r3, [r8]
  gpiop->OSPEEDR = config->ospeedr;
  200f9a:	f8df 8278 	ldr.w	r8, [pc, #632]	; 201214 <main+0x614>
  gpiop->OTYPER  = config->otyper;
  200f9e:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200fa0:	f8c4 8008 	str.w	r8, [r4, #8]
  200fa4:	f04f 080f 	mov.w	r8, #15
  gpiop->PUPDR   = config->pupdr;
  200fa8:	f8c4 a00c 	str.w	sl, [r4, #12]
  gpiop->AFRH    = config->afrh;
  200fac:	f8df a268 	ldr.w	sl, [pc, #616]	; 201218 <main+0x618>
  gpiop->ODR     = config->odr;
  200fb0:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200fb2:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  200fb4:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
  200fb8:	f101 0a18 	add.w	sl, r1, #24
  gpiop->MODER   = config->moder;
  200fbc:	f8c4 9000 	str.w	r9, [r4]
  gpiop->PUPDR   = config->pupdr;
  200fc0:	f8df 9258 	ldr.w	r9, [pc, #600]	; 20121c <main+0x61c>
  gpiop->OTYPER  = config->otyper;
  200fc4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200fc8:	f8c4 8408 	str.w	r8, [r4, #1032]	; 0x408
  200fcc:	f04f 0801 	mov.w	r8, #1
  gpiop->PUPDR   = config->pupdr;
  200fd0:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200fd4:	f04f 0960 	mov.w	r9, #96	; 0x60
  gpiop->ODR     = config->odr;
  200fd8:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200fdc:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200fe0:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200fe4:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200fe8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  200fec:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200fee:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200ff0:	60e7      	str	r7, [r4, #12]
  adcp->config   = NULL;
  200ff2:	604b      	str	r3, [r1, #4]
  gpiop->ODR     = config->odr;
  200ff4:	6160      	str	r0, [r4, #20]
  adcp->samples  = NULL;
  200ff6:	608b      	str	r3, [r1, #8]
  gpiop->AFRL    = config->afrl;
  200ff8:	6223      	str	r3, [r4, #32]
  adcp->depth    = 0;
  200ffa:	60cb      	str	r3, [r1, #12]
  gpiop->AFRH    = config->afrh;
  200ffc:	6263      	str	r3, [r4, #36]	; 0x24
  adcp->grpp     = NULL;
  200ffe:	610b      	str	r3, [r1, #16]
  gpiop->MODER   = config->moder;
  201000:	6023      	str	r3, [r4, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  201002:	614b      	str	r3, [r1, #20]
  gpiop->OTYPER  = config->otyper;
  201004:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  201008:	620b      	str	r3, [r1, #32]
  gpiop->OSPEEDR = config->ospeedr;
  20100a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  20100e:	f8c1 a018 	str.w	sl, [r1, #24]
  gpiop->PUPDR   = config->pupdr;
  201012:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  201016:	f8c1 a01c 	str.w	sl, [r1, #28]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20101a:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  gpiop->ODR     = config->odr;
  20101e:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201022:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201026:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  20102a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20102e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201032:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201036:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  20103a:	4617      	mov	r7, r2
  gpiop->ODR     = config->odr;
  20103c:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  201040:	485c      	ldr	r0, [pc, #368]	; (2011b4 <main+0x5b4>)
  gpiop->AFRL    = config->afrl;
  201042:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201046:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20104a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20104e:	24c0      	movs	r4, #192	; 0xc0
  201050:	6288      	str	r0, [r1, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  201052:	4859      	ldr	r0, [pc, #356]	; (2011b8 <main+0x5b8>)
  adcp->state    = ADC_STOP;
  201054:	f881 8000 	strb.w	r8, [r1]
  201058:	62c8      	str	r0, [r1, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  20105a:	4858      	ldr	r0, [pc, #352]	; (2011bc <main+0x5bc>)
  20105c:	6308      	str	r0, [r1, #48]	; 0x30
  20105e:	4958      	ldr	r1, [pc, #352]	; (2011c0 <main+0x5c0>)
  GPTD1.tim = STM32_TIM1;
  201060:	4858      	ldr	r0, [pc, #352]	; (2011c4 <main+0x5c4>)
  201062:	f881 9312 	strb.w	r9, [r1, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201066:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20106a:	f8c1 a000 	str.w	sl, [r1]
  iqp->q_counter = 0;
  20106e:	6153      	str	r3, [r2, #20]
  oqp->q_counter = size;
  201070:	6396      	str	r6, [r2, #56]	; 0x38
  201072:	4e55      	ldr	r6, [pc, #340]	; (2011c8 <main+0x5c8>)
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  201074:	f882 8008 	strb.w	r8, [r2, #8]
  sdp->vmt = &vmt;
  201078:	f847 6b04 	str.w	r6, [r7], #4
  tqp->next = (thread_t *)tqp;
  20107c:	f102 060c 	add.w	r6, r2, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  201080:	6057      	str	r7, [r2, #4]
  oqp->q_top     = bp + size;
  201082:	f10e 0710 	add.w	r7, lr, #16
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  201086:	f880 8000 	strb.w	r8, [r0]
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  20108a:	f04f 0807 	mov.w	r8, #7
  gptp->config = NULL;
  20108e:	6043      	str	r3, [r0, #4]
  iqp->q_buffer  = bp;
  201090:	f8c2 c018 	str.w	ip, [r2, #24]
  iqp->q_notify  = infy;
  201094:	6293      	str	r3, [r2, #40]	; 0x28
  iqp->q_link    = link;
  201096:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  201098:	6512      	str	r2, [r2, #80]	; 0x50
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20109a:	f881 4352 	strb.w	r4, [r1, #850]	; 0x352
  20109e:	f102 0430 	add.w	r4, r2, #48	; 0x30
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2010a2:	f8c1 a188 	str.w	sl, [r1, #392]	; 0x188
  iqp->q_rdptr   = bp;
  2010a6:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2010aa:	f8c1 a008 	str.w	sl, [r1, #8]
  oqp->q_top     = bp + size;
  2010ae:	6417      	str	r7, [r2, #64]	; 0x40
  2010b0:	4946      	ldr	r1, [pc, #280]	; (2011cc <main+0x5cc>)
  oqp->q_notify  = onfy;
  2010b2:	4f47      	ldr	r7, [pc, #284]	; (2011d0 <main+0x5d0>)
  2010b4:	60c1      	str	r1, [r0, #12]

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  2010b6:	f5a1 4108 	sub.w	r1, r1, #34816	; 0x8800
  2010ba:	64d7      	str	r7, [r2, #76]	; 0x4c
  2010bc:	2020      	movs	r0, #32
  SD7.clock = STM32_UART7CLK;
  2010be:	4f45      	ldr	r7, [pc, #276]	; (2011d4 <main+0x5d4>)
  iqp->q_wrptr   = bp;
  2010c0:	f8c2 c020 	str.w	ip, [r2, #32]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2010c4:	f04f 0c80 	mov.w	ip, #128	; 0x80
  SD7.usart = UART7;
  2010c8:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  2010ca:	6597      	str	r7, [r2, #88]	; 0x58
  2010cc:	6314      	str	r4, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  2010ce:	6354      	str	r4, [r2, #52]	; 0x34
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  2010d0:	4941      	ldr	r1, [pc, #260]	; (2011d8 <main+0x5d8>)
  2010d2:	4f42      	ldr	r7, [pc, #264]	; (2011dc <main+0x5dc>)
  2010d4:	4c42      	ldr	r4, [pc, #264]	; (2011e0 <main+0x5e0>)
  iqp->q_top     = bp + size;
  2010d6:	f8c2 b01c 	str.w	fp, [r2, #28]
  oqp->q_buffer  = bp;
  2010da:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  2010de:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  2010e2:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
  tqp->next = (thread_t *)tqp;
  2010e6:	60d6      	str	r6, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  2010e8:	6116      	str	r6, [r2, #16]
  2010ea:	604f      	str	r7, [r1, #4]
  SysTick->VAL = 0;
  2010ec:	608b      	str	r3, [r1, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2010ee:	f8c1 8000 	str.w	r8, [r1]
  2010f2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  2010f6:	f380 8811 	msr	BASEPRI, r0
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  2010fa:	7a13      	ldrb	r3, [r2, #8]
  2010fc:	2b01      	cmp	r3, #1
  2010fe:	d103      	bne.n	201108 <main+0x508>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  201100:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  201102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  201106:	642b      	str	r3, [r5, #64]	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201108:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20110a:	f04f 0e40 	mov.w	lr, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20110e:	4835      	ldr	r0, [pc, #212]	; (2011e4 <main+0x5e4>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201110:	2401      	movs	r4, #1
  USART_TypeDef *u = sdp->usart;
  201112:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201114:	f240 162d 	movw	r6, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201118:	fba0 0101 	umull	r0, r1, r0, r1

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
  20111c:	2502      	movs	r5, #2
  u->ICR = 0xFFFFFFFFU;
  20111e:	f04f 30ff 	mov.w	r0, #4294967295
  201122:	2700      	movs	r7, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201124:	0a89      	lsrs	r1, r1, #10
  201126:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201128:	f8c3 e004 	str.w	lr, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20112c:	609c      	str	r4, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20112e:	601e      	str	r6, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
  201130:	6218      	str	r0, [r3, #32]
  201132:	7215      	strb	r5, [r2, #8]
    sdp->rxmask = 0xFF;
  201134:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  201138:	f387 8811 	msr	BASEPRI, r7
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  20113c:	f44f 7080 	mov.w	r0, #256	; 0x100

    uint16_t k = 100;
    uint16_t j = 0;

    uint32_t value;
    int16_t num = 0;
  201140:	ae08      	add	r6, sp, #32
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  201142:	f000 fb45 	bl	2017d0 <_pal_lld_setgroupmode.constprop.2>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  201146:	2080      	movs	r0, #128	; 0x80
  201148:	f000 fb42 	bl	2017d0 <_pal_lld_setgroupmode.constprop.2>
//        for (int i=0; i<window-1; i++)
//        {
//            rass[i] = rass [i+1];
//        }

        value = sdGet(&SD7);
  20114c:	4d26      	ldr	r5, [pc, #152]	; (2011e8 <main+0x5e8>)
    palSetPad(GPIOA, 3);
  20114e:	4a12      	ldr	r2, [pc, #72]	; (201198 <main+0x598>)
  201150:	2108      	movs	r1, #8
    palSetPad(GPIOC, 0);
  201152:	4b26      	ldr	r3, [pc, #152]	; (2011ec <main+0x5ec>)
    int16_t num = 0;
  201154:	f826 7d1a 	strh.w	r7, [r6, #-26]!
    palSetPad(GPIOA, 3);
  201158:	8311      	strh	r1, [r2, #24]
    palSetPad(GPIOC, 0);
  20115a:	831c      	strh	r4, [r3, #24]
        value = sdGet(&SD7);
  20115c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201160:	4628      	mov	r0, r5
  201162:	f7ff fd15 	bl	200b90 <iqGetTimeout>

        if (value == 'R')
  201166:	2852      	cmp	r0, #82	; 0x52
        value = sdGet(&SD7);
  201168:	9002      	str	r0, [sp, #8]
        if (value == 'R')
  20116a:	d1f7      	bne.n	20115c <main+0x55c>
        {
            sdRead(&SD7, (uint8_t *)&value , 3);
  20116c:	2203      	movs	r2, #3
  20116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201172:	a902      	add	r1, sp, #8
  201174:	4628      	mov	r0, r5
  201176:	f7ff fc9b 	bl	200ab0 <iqReadTimeout>
    unsigned int res = 0;
  20117a:	2000      	movs	r0, #0
            num = ASCIItoNUM(value, 3);
  20117c:	9c02      	ldr	r4, [sp, #8]
  20117e:	2702      	movs	r7, #2
  201180:	4602      	mov	r2, r0
  201182:	e056      	b.n	201232 <main+0x632>
  201184:	40023800 	.word	0x40023800
  201188:	40026000 	.word	0x40026000
  20118c:	40026400 	.word	0x40026400
  201190:	20000800 	.word	0x20000800
  201194:	20000a58 	.word	0x20000a58
  201198:	40020000 	.word	0x40020000
  20119c:	40005551 	.word	0x40005551
  2011a0:	b0000bb0 	.word	0xb0000bb0
  2011a4:	000aaa0a 	.word	0x000aaa0a
  2011a8:	2aae8028 	.word	0x2aae8028
  2011ac:	003fcfff 	.word	0x003fcfff
  2011b0:	40021800 	.word	0x40021800
  2011b4:	40012000 	.word	0x40012000
  2011b8:	080018f4 	.word	0x080018f4
  2011bc:	00022c16 	.word	0x00022c16
  2011c0:	e000e100 	.word	0xe000e100
  2011c4:	20000834 	.word	0x20000834
  2011c8:	080019c4 	.word	0x080019c4
  2011cc:	40010000 	.word	0x40010000
  2011d0:	00200301 	.word	0x00200301
  2011d4:	0337f980 	.word	0x0337f980
  2011d8:	e000e010 	.word	0xe000e010
  2011dc:	00034bbf 	.word	0x00034bbf
  2011e0:	e000ed00 	.word	0xe000ed00
  2011e4:	1b4e81b5 	.word	0x1b4e81b5
  2011e8:	20000a64 	.word	0x20000a64
  2011ec:	40020800 	.word	0x40020800
  2011f0:	20000a38 	.word	0x20000a38
  2011f4:	18004001 	.word	0x18004001
  2011f8:	01555051 	.word	0x01555051
  2011fc:	20000a48 	.word	0x20000a48
  201200:	00bb00b0 	.word	0x00bb00b0
  201204:	55505555 	.word	0x55505555
  201208:	cffffff3 	.word	0xcffffff3
  20120c:	40021400 	.word	0x40021400
  201210:	51155555 	.word	0x51155555
  201214:	3cccf000 	.word	0x3cccf000
  201218:	00b0b000 	.word	0x00b0b000
  20121c:	55555550 	.word	0x55555550
            exp *= 10;
  201220:	2f01      	cmp	r7, #1
        res = res + (buff-48)*exp;
  201222:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  201226:	b2cf      	uxtb	r7, r1
            exp *= 10;
  201228:	bf14      	ite	ne
  20122a:	2164      	movne	r1, #100	; 0x64
  20122c:	210a      	moveq	r1, #10
        res = res + (buff-48)*exp;
  20122e:	fb01 0003 	mla	r0, r1, r3, r0
        buff = (uint32_t)(buff >> (8*i));
  201232:	fa24 f302 	lsr.w	r3, r4, r2
  201236:	1e79      	subs	r1, r7, #1
        buff = (uint32_t)(buff >> (8*m));
  201238:	3208      	adds	r2, #8
  20123a:	b2db      	uxtb	r3, r3
        for(unsigned char j=(m-1)-i;j>0;j--)
  20123c:	2f00      	cmp	r7, #0
  20123e:	d1ef      	bne.n	201220 <main+0x620>
        res = res + (buff-48)*exp;
  201240:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
            sdWrite( &SD7, (uint8_t *)&num, 2);
  201244:	2202      	movs	r2, #2
  201246:	f64f 73ff 	movw	r3, #65535	; 0xffff
  20124a:	4631      	mov	r1, r6
        res = res + (buff-48)*exp;
  20124c:	4404      	add	r4, r0
            sdWrite( &SD7, (uint8_t *)&num, 2);
  20124e:	4807      	ldr	r0, [pc, #28]	; (20126c <main+0x66c>)
            num = ASCIItoNUM(value, 3);
  201250:	f8ad 4006 	strh.w	r4, [sp, #6]
            sdWrite( &SD7, (uint8_t *)&num, 2);
  201254:	f7ff fb7c 	bl	200950 <oqWriteTimeout>
  201258:	2320      	movs	r3, #32
  20125a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  20125e:	211e      	movs	r1, #30
  201260:	2008      	movs	r0, #8
  201262:	f7ff fb15 	bl	200890 <chSchGoSleepTimeoutS>
  201266:	f387 8811 	msr	BASEPRI, r7
  20126a:	e777      	b.n	20115c <main+0x55c>
  20126c:	20000a88 	.word	0x20000a88

00201270 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  201270:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201272:	4b33      	ldr	r3, [pc, #204]	; (201340 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201274:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  201278:	4a32      	ldr	r2, [pc, #200]	; (201344 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20127a:	4c33      	ldr	r4, [pc, #204]	; (201348 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20127c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20127e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  201280:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201282:	681a      	ldr	r2, [r3, #0]
  201284:	f042 0201 	orr.w	r2, r2, #1
  201288:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20128a:	680b      	ldr	r3, [r1, #0]
  20128c:	079b      	lsls	r3, r3, #30
  20128e:	d5fc      	bpl.n	20128a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201290:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201292:	4a2b      	ldr	r2, [pc, #172]	; (201340 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201294:	f023 0303 	bic.w	r3, r3, #3
  201298:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20129a:	688b      	ldr	r3, [r1, #8]
  20129c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20129e:	6893      	ldr	r3, [r2, #8]
  2012a0:	f013 030c 	ands.w	r3, r3, #12
  2012a4:	d1fb      	bne.n	20129e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2012a6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2012a8:	4925      	ldr	r1, [pc, #148]	; (201340 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2012aa:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2012ae:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2012b0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2012b2:	6813      	ldr	r3, [r2, #0]
  2012b4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2012b8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2012ba:	680b      	ldr	r3, [r1, #0]
  2012bc:	039d      	lsls	r5, r3, #14
  2012be:	d5fc      	bpl.n	2012ba <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2012c0:	4b22      	ldr	r3, [pc, #136]	; (20134c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2012c2:	4820      	ldr	r0, [pc, #128]	; (201344 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2012c4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  2012c6:	680b      	ldr	r3, [r1, #0]
  2012c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2012cc:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2012ce:	6843      	ldr	r3, [r0, #4]
  2012d0:	045c      	lsls	r4, r3, #17
  2012d2:	d5fc      	bpl.n	2012ce <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  2012d4:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2012d6:	4a1b      	ldr	r2, [pc, #108]	; (201344 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  2012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2012dc:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2012de:	6853      	ldr	r3, [r2, #4]
  2012e0:	03d9      	lsls	r1, r3, #15
  2012e2:	d5fc      	bpl.n	2012de <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2012e4:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2012e6:	4917      	ldr	r1, [pc, #92]	; (201344 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2012ec:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2012ee:	684b      	ldr	r3, [r1, #4]
  2012f0:	039a      	lsls	r2, r3, #14
  2012f2:	d5fc      	bpl.n	2012ee <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  2012f4:	4a12      	ldr	r2, [pc, #72]	; (201340 <__early_init+0xd0>)
  2012f6:	6813      	ldr	r3, [r2, #0]
  2012f8:	019b      	lsls	r3, r3, #6
  2012fa:	d5fc      	bpl.n	2012f6 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  2012fc:	4b14      	ldr	r3, [pc, #80]	; (201350 <__early_init+0xe0>)
  2012fe:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201302:	4d14      	ldr	r5, [pc, #80]	; (201354 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201304:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201308:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20130a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20130c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201310:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201314:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201316:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201318:	4909      	ldr	r1, [pc, #36]	; (201340 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20131a:	f043 0302 	orr.w	r3, r3, #2
  20131e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201320:	688b      	ldr	r3, [r1, #8]
  201322:	f003 030c 	and.w	r3, r3, #12
  201326:	2b08      	cmp	r3, #8
  201328:	d1fa      	bne.n	201320 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20132a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201330:	644b      	str	r3, [r1, #68]	; 0x44
  201332:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201338:	bc30      	pop	{r4, r5}
  20133a:	664b      	str	r3, [r1, #100]	; 0x64
  20133c:	4770      	bx	lr
  20133e:	bf00      	nop
  201340:	40023800 	.word	0x40023800
  201344:	40007000 	.word	0x40007000
  201348:	10000400 	.word	0x10000400
  20134c:	09406c08 	.word	0x09406c08
  201350:	40023c00 	.word	0x40023c00
  201354:	30999400 	.word	0x30999400
	...

00201360 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  201360:	4a0e      	ldr	r2, [pc, #56]	; (20139c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201362:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201364:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  201366:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201368:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  20136a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  20136c:	6994      	ldr	r4, [r2, #24]
  20136e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201370:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201372:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201376:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20137a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20137c:	6190      	str	r0, [r2, #24]
  20137e:	e000      	b.n	201382 <chSchDoReschedule+0x22>
  201380:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201382:	689a      	ldr	r2, [r3, #8]
  201384:	4291      	cmp	r1, r2
  201386:	d3fb      	bcc.n	201380 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201388:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20138a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20138c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20138e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201390:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201392:	605c      	str	r4, [r3, #4]
}
  201394:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201396:	f7fe bf9d 	b.w	2002d4 <_port_switch>
  20139a:	bf00      	nop
  20139c:	20000844 	.word	0x20000844

002013a0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2013a0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  2013a2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  2013a4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  2013a6:	4b08      	ldr	r3, [pc, #32]	; (2013c8 <chSchReadyI+0x28>)
  2013a8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2013aa:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2013ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2013b0:	689a      	ldr	r2, [r3, #8]
  2013b2:	428a      	cmp	r2, r1
  2013b4:	d2fb      	bcs.n	2013ae <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2013b6:	685a      	ldr	r2, [r3, #4]
}
  2013b8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2013ba:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2013bc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2013be:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2013c0:	605c      	str	r4, [r3, #4]
}
  2013c2:	bc10      	pop	{r4}
  2013c4:	4770      	bx	lr
  2013c6:	bf00      	nop
  2013c8:	20000844 	.word	0x20000844
  2013cc:	00000000 	.word	0x00000000

002013d0 <Vector188>:
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  2013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  2013d4:	4c5f      	ldr	r4, [pc, #380]	; (201554 <Vector188+0x184>)
  2013d6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  2013d8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  2013da:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2013dc:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  2013de:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2013e0:	d152      	bne.n	201488 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  2013e2:	05eb      	lsls	r3, r5, #23
  2013e4:	d445      	bmi.n	201472 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  2013e6:	06a8      	lsls	r0, r5, #26
  2013e8:	d417      	bmi.n	20141a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  2013ea:	0639      	lsls	r1, r7, #24
  2013ec:	d501      	bpl.n	2013f2 <Vector188+0x22>
  2013ee:	062a      	lsls	r2, r5, #24
  2013f0:	d465      	bmi.n	2014be <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  2013f2:	066b      	lsls	r3, r5, #25
  2013f4:	d50d      	bpl.n	201412 <Vector188+0x42>
  2013f6:	2320      	movs	r3, #32
  2013f8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  2013fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2013fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201400:	429a      	cmp	r2, r3
  201402:	f000 8086 	beq.w	201512 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  201406:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20140a:	2300      	movs	r3, #0
  20140c:	6037      	str	r7, [r6, #0]
  20140e:	f383 8811 	msr	BASEPRI, r3
}
  201412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  201416:	f7fe bfa3 	b.w	200360 <_port_irq_epilogue>
  20141a:	2320      	movs	r3, #32
  20141c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  201420:	6a72      	ldr	r2, [r6, #36]	; 0x24
  201422:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  201426:	6963      	ldr	r3, [r4, #20]
  201428:	ea01 0802 	and.w	r8, r1, r2
  20142c:	2b00      	cmp	r3, #0
  20142e:	d078      	beq.n	201522 <Vector188+0x152>
  if (iqIsFullI(iqp)) {
  201430:	6a23      	ldr	r3, [r4, #32]
  201432:	6a62      	ldr	r2, [r4, #36]	; 0x24
  201434:	4293      	cmp	r3, r2
  201436:	d078      	beq.n	20152a <Vector188+0x15a>
  iqp->q_counter++;
  201438:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20143a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  20143c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  20143e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  201440:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  201442:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  201446:	6a22      	ldr	r2, [r4, #32]
  201448:	69e3      	ldr	r3, [r4, #28]
  20144a:	429a      	cmp	r2, r3
  20144c:	d25e      	bcs.n	20150c <Vector188+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  20144e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  201450:	4a41      	ldr	r2, [pc, #260]	; (201558 <Vector188+0x188>)
  201452:	4293      	cmp	r3, r2
  201454:	d009      	beq.n	20146a <Vector188+0x9a>
  tqp->next             = tp->queue.next;
  201456:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  201458:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20145c:	4618      	mov	r0, r3
  20145e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201460:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  201462:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201466:	f7ff ff9b 	bl	2013a0 <chSchReadyI>
  20146a:	2300      	movs	r3, #0
  20146c:	f383 8811 	msr	BASEPRI, r3
  201470:	e7bb      	b.n	2013ea <Vector188+0x1a>
  201472:	2320      	movs	r3, #32
  201474:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201478:	f44f 7000 	mov.w	r0, #512	; 0x200
  20147c:	f000 f970 	bl	201760 <chEvtBroadcastFlagsI.constprop.16>
  201480:	2300      	movs	r3, #0
  201482:	f383 8811 	msr	BASEPRI, r3
  201486:	e7ae      	b.n	2013e6 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  201488:	f015 0f08 	tst.w	r5, #8
  20148c:	bf0c      	ite	eq
  20148e:	2000      	moveq	r0, #0
  201490:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  201492:	07eb      	lsls	r3, r5, #31
  201494:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  201498:	bf48      	it	mi
  20149a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20149e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  2014a0:	bf48      	it	mi
  2014a2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  2014a6:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  2014a8:	bf48      	it	mi
  2014aa:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  2014ae:	f383 8811 	msr	BASEPRI, r3
  2014b2:	f000 f955 	bl	201760 <chEvtBroadcastFlagsI.constprop.16>
  2014b6:	2300      	movs	r3, #0
  2014b8:	f383 8811 	msr	BASEPRI, r3
  2014bc:	e791      	b.n	2013e2 <Vector188+0x12>
  2014be:	2320      	movs	r3, #32
  2014c0:	f383 8811 	msr	BASEPRI, r3
  if (oqIsEmptyI(oqp)) {
  2014c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  2014c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2014c8:	429a      	cmp	r2, r3
  2014ca:	d036      	beq.n	20153a <Vector188+0x16a>
  oqp->q_counter++;
  2014cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2014ce:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  2014d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  2014d2:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  2014d4:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  2014d6:	4288      	cmp	r0, r1
  oqp->q_counter++;
  2014d8:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2014da:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  2014de:	d301      	bcc.n	2014e4 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  2014e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  2014e2:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  2014e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  2014e6:	4a1d      	ldr	r2, [pc, #116]	; (20155c <Vector188+0x18c>)
  2014e8:	4293      	cmp	r3, r2
  2014ea:	d009      	beq.n	201500 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  2014ec:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  2014ee:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2014f2:	4618      	mov	r0, r3
  2014f4:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  2014f6:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2014f8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2014fc:	f7ff ff50 	bl	2013a0 <chSchReadyI>
      u->TDR = b;
  201500:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  201504:	2300      	movs	r3, #0
  201506:	f383 8811 	msr	BASEPRI, r3
  20150a:	e772      	b.n	2013f2 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  20150c:	69a3      	ldr	r3, [r4, #24]
  20150e:	6223      	str	r3, [r4, #32]
  201510:	e79d      	b.n	20144e <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  201512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  201514:	2b00      	cmp	r3, #0
  201516:	f43f af76 	beq.w	201406 <Vector188+0x36>
  20151a:	2010      	movs	r0, #16
  20151c:	f000 f920 	bl	201760 <chEvtBroadcastFlagsI.constprop.16>
  201520:	e771      	b.n	201406 <Vector188+0x36>
  201522:	2004      	movs	r0, #4
  201524:	f000 f91c 	bl	201760 <chEvtBroadcastFlagsI.constprop.16>
  201528:	e782      	b.n	201430 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  20152a:	6962      	ldr	r2, [r4, #20]
  20152c:	2a00      	cmp	r2, #0
  20152e:	d083      	beq.n	201438 <Vector188+0x68>
  201530:	f44f 6080 	mov.w	r0, #1024	; 0x400
  201534:	f000 f914 	bl	201760 <chEvtBroadcastFlagsI.constprop.16>
  201538:	e797      	b.n	20146a <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  20153a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  20153c:	2a00      	cmp	r2, #0
  20153e:	d0c5      	beq.n	2014cc <Vector188+0xfc>
  201540:	2008      	movs	r0, #8
  201542:	f000 f90d 	bl	201760 <chEvtBroadcastFlagsI.constprop.16>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  201546:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  20154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20154e:	6033      	str	r3, [r6, #0]
  201550:	e7d8      	b.n	201504 <Vector188+0x134>
  201552:	bf00      	nop
  201554:	20000a58 	.word	0x20000a58
  201558:	20000a64 	.word	0x20000a64
  20155c:	20000a88 	.word	0x20000a88

00201560 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
  201562:	4b23      	ldr	r3, [pc, #140]	; (2015f0 <Vector88+0x90>)
  ADC1->SR = 0;
  201564:	2100      	movs	r1, #0
  sr = ADC1->SR;
  201566:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  201568:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  20156a:	0693      	lsls	r3, r2, #26
  20156c:	d535      	bpl.n	2015da <Vector88+0x7a>
  20156e:	4c21      	ldr	r4, [pc, #132]	; (2015f4 <Vector88+0x94>)
  201570:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201572:	6802      	ldr	r2, [r0, #0]
  201574:	6853      	ldr	r3, [r2, #4]
  201576:	2b00      	cmp	r3, #0
  201578:	d02f      	beq.n	2015da <Vector88+0x7a>
    if (ADCD1.grpp != NULL)
  20157a:	6921      	ldr	r1, [r4, #16]
  20157c:	b369      	cbz	r1, 2015da <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  20157e:	6813      	ldr	r3, [r2, #0]
  201580:	f023 031f 	bic.w	r3, r3, #31
  201584:	6013      	str	r3, [r2, #0]
  201586:	6813      	ldr	r3, [r2, #0]
  201588:	f013 0301 	ands.w	r3, r3, #1
  20158c:	d1fb      	bne.n	201586 <Vector88+0x26>
  20158e:	7a07      	ldrb	r7, [r0, #8]
  201590:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201592:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201594:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201596:	6846      	ldr	r6, [r0, #4]
  201598:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  20159c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  20159e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  2015a0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  2015a2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  2015a4:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2015a6:	b1fd      	cbz	r5, 2015e8 <Vector88+0x88>
  2015a8:	2305      	movs	r3, #5
  2015aa:	4812      	ldr	r0, [pc, #72]	; (2015f4 <Vector88+0x94>)
  2015ac:	7023      	strb	r3, [r4, #0]
  2015ae:	47a8      	blx	r5
  2015b0:	7823      	ldrb	r3, [r4, #0]
  2015b2:	2b05      	cmp	r3, #5
  2015b4:	d015      	beq.n	2015e2 <Vector88+0x82>
  2015b6:	2300      	movs	r3, #0
  2015b8:	6123      	str	r3, [r4, #16]
  2015ba:	2320      	movs	r3, #32
  2015bc:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  2015c0:	6963      	ldr	r3, [r4, #20]
  2015c2:	b13b      	cbz	r3, 2015d4 <Vector88+0x74>
    tp->u.rdymsg = msg;
  2015c4:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  2015c8:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  2015ca:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  2015cc:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  2015ce:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  2015d0:	f7ff fee6 	bl	2013a0 <chSchReadyI>
  2015d4:	2300      	movs	r3, #0
  2015d6:	f383 8811 	msr	BASEPRI, r3
}
  2015da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2015de:	f7fe bebf 	b.w	200360 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2015e2:	2302      	movs	r3, #2
  2015e4:	7023      	strb	r3, [r4, #0]
  2015e6:	e7e6      	b.n	2015b6 <Vector88+0x56>
  2015e8:	2302      	movs	r3, #2
  2015ea:	6125      	str	r5, [r4, #16]
  2015ec:	7023      	strb	r3, [r4, #0]
  2015ee:	e7e4      	b.n	2015ba <Vector88+0x5a>
  2015f0:	40012000 	.word	0x40012000
  2015f4:	20000800 	.word	0x20000800
	...

00201600 <chThdExit>:
void chThdExit(msg_t msg) {
  201600:	b538      	push	{r3, r4, r5, lr}
  201602:	2220      	movs	r2, #32
  201604:	4603      	mov	r3, r0
  201606:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20160a:	4a10      	ldr	r2, [pc, #64]	; (20164c <chThdExit+0x4c>)
  20160c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20160e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201612:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201614:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201616:	4285      	cmp	r5, r0
  201618:	d006      	beq.n	201628 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20161a:	6803      	ldr	r3, [r0, #0]
  20161c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20161e:	f7ff febf 	bl	2013a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201624:	42a8      	cmp	r0, r5
  201626:	d1f8      	bne.n	20161a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201628:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20162c:	b943      	cbnz	r3, 201640 <chThdExit+0x40>
  20162e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201632:	079b      	lsls	r3, r3, #30
  201634:	d104      	bne.n	201640 <chThdExit+0x40>
    REG_REMOVE(tp);
  201636:	6922      	ldr	r2, [r4, #16]
  201638:	6963      	ldr	r3, [r4, #20]
  20163a:	611a      	str	r2, [r3, #16]
  20163c:	6922      	ldr	r2, [r4, #16]
  20163e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201640:	200f      	movs	r0, #15
}
  201642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201646:	f7ff b90b 	b.w	200860 <chSchGoSleepS>
  20164a:	bf00      	nop
  20164c:	20000844 	.word	0x20000844

00201650 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201650:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201652:	4f12      	ldr	r7, [pc, #72]	; (20169c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201654:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201656:	4d12      	ldr	r5, [pc, #72]	; (2016a0 <__init_ram_areas+0x50>)
  201658:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20165c:	4c11      	ldr	r4, [pc, #68]	; (2016a4 <__init_ram_areas+0x54>)
  20165e:	4b12      	ldr	r3, [pc, #72]	; (2016a8 <__init_ram_areas+0x58>)
  201660:	4912      	ldr	r1, [pc, #72]	; (2016ac <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201662:	429c      	cmp	r4, r3
  201664:	d911      	bls.n	20168a <__init_ram_areas+0x3a>
  201666:	3904      	subs	r1, #4
  201668:	461a      	mov	r2, r3
      *p = *tp;
  20166a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20166e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201672:	4294      	cmp	r4, r2
  201674:	d8f9      	bhi.n	20166a <__init_ram_areas+0x1a>
  201676:	43da      	mvns	r2, r3
  201678:	4414      	add	r4, r2
  20167a:	f024 0403 	bic.w	r4, r4, #3
  20167e:	3404      	adds	r4, #4
  201680:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201682:	429d      	cmp	r5, r3
  201684:	d903      	bls.n	20168e <__init_ram_areas+0x3e>
      *p = 0;
  201686:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20168a:	429d      	cmp	r5, r3
  20168c:	d8fb      	bhi.n	201686 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20168e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201690:	4577      	cmp	r7, lr
  201692:	d202      	bcs.n	20169a <__init_ram_areas+0x4a>
  201694:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201698:	e7e3      	b.n	201662 <__init_ram_areas+0x12>
  20169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20169c:	08001944 	.word	0x08001944
  2016a0:	20020000 	.word	0x20020000
  2016a4:	20020000 	.word	0x20020000
  2016a8:	20020000 	.word	0x20020000
  2016ac:	080019e4 	.word	0x080019e4

002016b0 <__default_exit>:
void __default_exit(void) {
  2016b0:	e7fe      	b.n	2016b0 <__default_exit>
  2016b2:	bf00      	nop
	...

002016c0 <__late_init>:
void __late_init(void) {}
  2016c0:	4770      	bx	lr
  2016c2:	bf00      	nop
	...

002016d0 <__core_init>:
void __core_init(void) {
  2016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2016d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2016d6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2016da:	4c1b      	ldr	r4, [pc, #108]	; (201748 <__core_init+0x78>)
  2016dc:	2200      	movs	r2, #0
  2016de:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2016e2:	6963      	ldr	r3, [r4, #20]
  2016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2016e8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2016ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2016ee:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2016f2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2016f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2016fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2016fe:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201702:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201706:	f3c3 334e 	ubfx	r3, r3, #13, #15
  20170a:	07b7      	lsls	r7, r6, #30
  20170c:	015d      	lsls	r5, r3, #5
  20170e:	ea05 000e 	and.w	r0, r5, lr
  201712:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201714:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201716:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  20171a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20171c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201720:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201724:	1c53      	adds	r3, r2, #1
  201726:	d1f6      	bne.n	201716 <__core_init+0x46>
  201728:	3d20      	subs	r5, #32
    } while(sets--);
  20172a:	f115 0f20 	cmn.w	r5, #32
  20172e:	d1ee      	bne.n	20170e <__core_init+0x3e>
  201730:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201734:	6963      	ldr	r3, [r4, #20]
  201736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20173a:	6163      	str	r3, [r4, #20]
  20173c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201740:	f3bf 8f6f 	isb	sy
  201744:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201746:	bf00      	nop
  201748:	e000ed00 	.word	0xe000ed00
  20174c:	00000000 	.word	0x00000000

00201750 <chTMStartMeasurementX.constprop.21>:
  return DWT->CYCCNT;
  201750:	4b01      	ldr	r3, [pc, #4]	; (201758 <chTMStartMeasurementX.constprop.21+0x8>)
  201752:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  201754:	6083      	str	r3, [r0, #8]
  201756:	4770      	bx	lr
  201758:	e0001000 	.word	0xe0001000
  20175c:	00000000 	.word	0x00000000

00201760 <chEvtBroadcastFlagsI.constprop.16>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201762:	4f17      	ldr	r7, [pc, #92]	; (2017c0 <chEvtBroadcastFlagsI.constprop.16+0x60>)
  201764:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201768:	42bc      	cmp	r4, r7
  20176a:	d021      	beq.n	2017b0 <chEvtBroadcastFlagsI.constprop.16+0x50>
  20176c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20176e:	2600      	movs	r6, #0
  201770:	e002      	b.n	201778 <chEvtBroadcastFlagsI.constprop.16+0x18>
    elp = elp->next;
  201772:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201774:	42bc      	cmp	r4, r7
  201776:	d01b      	beq.n	2017b0 <chEvtBroadcastFlagsI.constprop.16+0x50>
    elp->flags |= flags;
  201778:	68e3      	ldr	r3, [r4, #12]
  20177a:	432b      	orrs	r3, r5
  20177c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  20177e:	b115      	cbz	r5, 201786 <chEvtBroadcastFlagsI.constprop.16+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  201780:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201782:	4213      	tst	r3, r2
  201784:	d0f5      	beq.n	201772 <chEvtBroadcastFlagsI.constprop.16+0x12>
      chEvtSignalI(elp->listener, elp->events);
  201786:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  201788:	68a3      	ldr	r3, [r4, #8]
  20178a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20178c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201790:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201792:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201794:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201796:	d00c      	beq.n	2017b2 <chEvtBroadcastFlagsI.constprop.16+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201798:	2a0b      	cmp	r2, #11
  20179a:	d1ea      	bne.n	201772 <chEvtBroadcastFlagsI.constprop.16+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20179c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20179e:	ea32 0303 	bics.w	r3, r2, r3
  2017a2:	d1e6      	bne.n	201772 <chEvtBroadcastFlagsI.constprop.16+0x12>
    tp->u.rdymsg = MSG_OK;
  2017a4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2017a6:	f7ff fdfb 	bl	2013a0 <chSchReadyI>
    elp = elp->next;
  2017aa:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2017ac:	42bc      	cmp	r4, r7
  2017ae:	d1e3      	bne.n	201778 <chEvtBroadcastFlagsI.constprop.16+0x18>
  2017b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2017b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  2017b4:	4213      	tst	r3, r2
  2017b6:	d0dc      	beq.n	201772 <chEvtBroadcastFlagsI.constprop.16+0x12>
    tp->u.rdymsg = MSG_OK;
  2017b8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2017ba:	f7ff fdf1 	bl	2013a0 <chSchReadyI>
  2017be:	e7f4      	b.n	2017aa <chEvtBroadcastFlagsI.constprop.16+0x4a>
  2017c0:	20000a58 	.word	0x20000a58
	...

002017d0 <_pal_lld_setgroupmode.constprop.2>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  2017d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  2017d4:	2100      	movs	r1, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  2017d6:	2502      	movs	r5, #2
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  2017d8:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  2017dc:	f04f 0c0f 	mov.w	ip, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2017e0:	4c1f      	ldr	r4, [pc, #124]	; (201860 <_pal_lld_setgroupmode.constprop.2+0x90>)
      m1 = 1 << bit;
  2017e2:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  2017e6:	2703      	movs	r7, #3
  2017e8:	e00f      	b.n	20180a <_pal_lld_setgroupmode.constprop.2+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2017ea:	6a26      	ldr	r6, [r4, #32]
  2017ec:	ea26 0202 	bic.w	r2, r6, r2
  2017f0:	ea42 0209 	orr.w	r2, r2, r9
  2017f4:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  2017f6:	6822      	ldr	r2, [r4, #0]
  2017f8:	4013      	ands	r3, r2
  2017fa:	432b      	orrs	r3, r5
  2017fc:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  2017fe:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  201800:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  201804:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  201808:	d027      	beq.n	20185a <_pal_lld_setgroupmode.constprop.2+0x8a>
      m2 = 3 << (bit * 2);
  20180a:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  20180c:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  201810:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  201814:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  201818:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20181c:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  201820:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  201824:	d0eb      	beq.n	2017fe <_pal_lld_setgroupmode.constprop.2+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201826:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  20182a:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  20182c:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  201830:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201834:	ea2a 0606 	bic.w	r6, sl, r6
  201838:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20183a:	68a6      	ldr	r6, [r4, #8]
  20183c:	ea06 0603 	and.w	r6, r6, r3
  201840:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  201842:	68e6      	ldr	r6, [r4, #12]
  201844:	ea06 0603 	and.w	r6, r6, r3
  201848:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  20184a:	d9ce      	bls.n	2017ea <_pal_lld_setgroupmode.constprop.2+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20184c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  20184e:	ea26 0202 	bic.w	r2, r6, r2
  201852:	ea42 0209 	orr.w	r2, r2, r9
  201856:	6262      	str	r2, [r4, #36]	; 0x24
  201858:	e7cd      	b.n	2017f6 <_pal_lld_setgroupmode.constprop.2+0x26>
  }
}
  20185a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20185e:	bf00      	nop
  201860:	40021000 	.word	0x40021000
