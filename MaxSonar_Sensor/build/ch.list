
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 ff4f 	bl	2020c0 <__core_init>
  200222:	f001 f9ed 	bl	201600 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fee9 	bl	202040 <__init_ram_areas>
  20026e:	f001 ff1f 	bl	2020b0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 fd7d 	bl	200d80 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 bf03 	b.w	2020a0 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08002880 	.word	0x08002880
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000abc 	.word	0x20000abc
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 fe76 	bl	201fe0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 fc34 	bl	201b60 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_dmul>:
  20066c:	b570      	push	{r4, r5, r6, lr}
  20066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  20067a:	bf1d      	ittte	ne
  20067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200680:	ea94 0f0c 	teqne	r4, ip
  200684:	ea95 0f0c 	teqne	r5, ip
  200688:	f000 f8de 	bleq	200848 <__aeabi_dmul+0x1dc>
  20068c:	442c      	add	r4, r5
  20068e:	ea81 0603 	eor.w	r6, r1, r3
  200692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  200696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  20069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  20069e:	bf18      	it	ne
  2006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2006ac:	d038      	beq.n	200720 <__aeabi_dmul+0xb4>
  2006ae:	fba0 ce02 	umull	ip, lr, r0, r2
  2006b2:	f04f 0500 	mov.w	r5, #0
  2006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2006be:	fbe0 e503 	umlal	lr, r5, r0, r3
  2006c2:	f04f 0600 	mov.w	r6, #0
  2006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2006ca:	f09c 0f00 	teq	ip, #0
  2006ce:	bf18      	it	ne
  2006d0:	f04e 0e01 	orrne.w	lr, lr, #1
  2006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  2006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  2006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  2006e0:	d204      	bcs.n	2006ec <__aeabi_dmul+0x80>
  2006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  2006e6:	416d      	adcs	r5, r5
  2006e8:	eb46 0606 	adc.w	r6, r6, r6
  2006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  2006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  2006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  2006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  2006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200704:	bf88      	it	hi
  200706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20070a:	d81e      	bhi.n	20074a <__aeabi_dmul+0xde>
  20070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200710:	bf08      	it	eq
  200712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200716:	f150 0000 	adcs.w	r0, r0, #0
  20071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20071e:	bd70      	pop	{r4, r5, r6, pc}
  200720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200724:	ea46 0101 	orr.w	r1, r6, r1
  200728:	ea40 0002 	orr.w	r0, r0, r2
  20072c:	ea81 0103 	eor.w	r1, r1, r3
  200730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200734:	bfc2      	ittt	gt
  200736:	ebd4 050c 	rsbsgt	r5, r4, ip
  20073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20073e:	bd70      	popgt	{r4, r5, r6, pc}
  200740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200744:	f04f 0e00 	mov.w	lr, #0
  200748:	3c01      	subs	r4, #1
  20074a:	f300 80ab 	bgt.w	2008a4 <__aeabi_dmul+0x238>
  20074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200752:	bfde      	ittt	le
  200754:	2000      	movle	r0, #0
  200756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20075a:	bd70      	pople	{r4, r5, r6, pc}
  20075c:	f1c4 0400 	rsb	r4, r4, #0
  200760:	3c20      	subs	r4, #32
  200762:	da35      	bge.n	2007d0 <__aeabi_dmul+0x164>
  200764:	340c      	adds	r4, #12
  200766:	dc1b      	bgt.n	2007a0 <__aeabi_dmul+0x134>
  200768:	f104 0414 	add.w	r4, r4, #20
  20076c:	f1c4 0520 	rsb	r5, r4, #32
  200770:	fa00 f305 	lsl.w	r3, r0, r5
  200774:	fa20 f004 	lsr.w	r0, r0, r4
  200778:	fa01 f205 	lsl.w	r2, r1, r5
  20077c:	ea40 0002 	orr.w	r0, r0, r2
  200780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  200784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  20078c:	fa21 f604 	lsr.w	r6, r1, r4
  200790:	eb42 0106 	adc.w	r1, r2, r6
  200794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200798:	bf08      	it	eq
  20079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20079e:	bd70      	pop	{r4, r5, r6, pc}
  2007a0:	f1c4 040c 	rsb	r4, r4, #12
  2007a4:	f1c4 0520 	rsb	r5, r4, #32
  2007a8:	fa00 f304 	lsl.w	r3, r0, r4
  2007ac:	fa20 f005 	lsr.w	r0, r0, r5
  2007b0:	fa01 f204 	lsl.w	r2, r1, r4
  2007b4:	ea40 0002 	orr.w	r0, r0, r2
  2007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2007c0:	f141 0100 	adc.w	r1, r1, #0
  2007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2007c8:	bf08      	it	eq
  2007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2007ce:	bd70      	pop	{r4, r5, r6, pc}
  2007d0:	f1c4 0520 	rsb	r5, r4, #32
  2007d4:	fa00 f205 	lsl.w	r2, r0, r5
  2007d8:	ea4e 0e02 	orr.w	lr, lr, r2
  2007dc:	fa20 f304 	lsr.w	r3, r0, r4
  2007e0:	fa01 f205 	lsl.w	r2, r1, r5
  2007e4:	ea43 0302 	orr.w	r3, r3, r2
  2007e8:	fa21 f004 	lsr.w	r0, r1, r4
  2007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007f0:	fa21 f204 	lsr.w	r2, r1, r4
  2007f4:	ea20 0002 	bic.w	r0, r0, r2
  2007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  2007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200800:	bf08      	it	eq
  200802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200806:	bd70      	pop	{r4, r5, r6, pc}
  200808:	f094 0f00 	teq	r4, #0
  20080c:	d10f      	bne.n	20082e <__aeabi_dmul+0x1c2>
  20080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200812:	0040      	lsls	r0, r0, #1
  200814:	eb41 0101 	adc.w	r1, r1, r1
  200818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20081c:	bf08      	it	eq
  20081e:	3c01      	subeq	r4, #1
  200820:	d0f7      	beq.n	200812 <__aeabi_dmul+0x1a6>
  200822:	ea41 0106 	orr.w	r1, r1, r6
  200826:	f095 0f00 	teq	r5, #0
  20082a:	bf18      	it	ne
  20082c:	4770      	bxne	lr
  20082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200832:	0052      	lsls	r2, r2, #1
  200834:	eb43 0303 	adc.w	r3, r3, r3
  200838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20083c:	bf08      	it	eq
  20083e:	3d01      	subeq	r5, #1
  200840:	d0f7      	beq.n	200832 <__aeabi_dmul+0x1c6>
  200842:	ea43 0306 	orr.w	r3, r3, r6
  200846:	4770      	bx	lr
  200848:	ea94 0f0c 	teq	r4, ip
  20084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200850:	bf18      	it	ne
  200852:	ea95 0f0c 	teqne	r5, ip
  200856:	d00c      	beq.n	200872 <__aeabi_dmul+0x206>
  200858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20085c:	bf18      	it	ne
  20085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200862:	d1d1      	bne.n	200808 <__aeabi_dmul+0x19c>
  200864:	ea81 0103 	eor.w	r1, r1, r3
  200868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20086c:	f04f 0000 	mov.w	r0, #0
  200870:	bd70      	pop	{r4, r5, r6, pc}
  200872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200876:	bf06      	itte	eq
  200878:	4610      	moveq	r0, r2
  20087a:	4619      	moveq	r1, r3
  20087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200880:	d019      	beq.n	2008b6 <__aeabi_dmul+0x24a>
  200882:	ea94 0f0c 	teq	r4, ip
  200886:	d102      	bne.n	20088e <__aeabi_dmul+0x222>
  200888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  20088c:	d113      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  20088e:	ea95 0f0c 	teq	r5, ip
  200892:	d105      	bne.n	2008a0 <__aeabi_dmul+0x234>
  200894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  200898:	bf1c      	itt	ne
  20089a:	4610      	movne	r0, r2
  20089c:	4619      	movne	r1, r3
  20089e:	d10a      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  2008a0:	ea81 0103 	eor.w	r1, r1, r3
  2008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2008b0:	f04f 0000 	mov.w	r0, #0
  2008b4:	bd70      	pop	{r4, r5, r6, pc}
  2008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2008be:	bd70      	pop	{r4, r5, r6, pc}

002008c0 <__aeabi_ddiv>:
  2008c0:	b570      	push	{r4, r5, r6, lr}
  2008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2008ce:	bf1d      	ittte	ne
  2008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2008d4:	ea94 0f0c 	teqne	r4, ip
  2008d8:	ea95 0f0c 	teqne	r5, ip
  2008dc:	f000 f8a7 	bleq	200a2e <__aeabi_ddiv+0x16e>
  2008e0:	eba4 0405 	sub.w	r4, r4, r5
  2008e4:	ea81 0e03 	eor.w	lr, r1, r3
  2008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  2008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2008f0:	f000 8088 	beq.w	200a04 <__aeabi_ddiv+0x144>
  2008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  2008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200918:	429d      	cmp	r5, r3
  20091a:	bf08      	it	eq
  20091c:	4296      	cmpeq	r6, r2
  20091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200926:	d202      	bcs.n	20092e <__aeabi_ddiv+0x6e>
  200928:	085b      	lsrs	r3, r3, #1
  20092a:	ea4f 0232 	mov.w	r2, r2, rrx
  20092e:	1ab6      	subs	r6, r6, r2
  200930:	eb65 0503 	sbc.w	r5, r5, r3
  200934:	085b      	lsrs	r3, r3, #1
  200936:	ea4f 0232 	mov.w	r2, r2, rrx
  20093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200942:	ebb6 0e02 	subs.w	lr, r6, r2
  200946:	eb75 0e03 	sbcs.w	lr, r5, r3
  20094a:	bf22      	ittt	cs
  20094c:	1ab6      	subcs	r6, r6, r2
  20094e:	4675      	movcs	r5, lr
  200950:	ea40 000c 	orrcs.w	r0, r0, ip
  200954:	085b      	lsrs	r3, r3, #1
  200956:	ea4f 0232 	mov.w	r2, r2, rrx
  20095a:	ebb6 0e02 	subs.w	lr, r6, r2
  20095e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200962:	bf22      	ittt	cs
  200964:	1ab6      	subcs	r6, r6, r2
  200966:	4675      	movcs	r5, lr
  200968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20096c:	085b      	lsrs	r3, r3, #1
  20096e:	ea4f 0232 	mov.w	r2, r2, rrx
  200972:	ebb6 0e02 	subs.w	lr, r6, r2
  200976:	eb75 0e03 	sbcs.w	lr, r5, r3
  20097a:	bf22      	ittt	cs
  20097c:	1ab6      	subcs	r6, r6, r2
  20097e:	4675      	movcs	r5, lr
  200980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200984:	085b      	lsrs	r3, r3, #1
  200986:	ea4f 0232 	mov.w	r2, r2, rrx
  20098a:	ebb6 0e02 	subs.w	lr, r6, r2
  20098e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200992:	bf22      	ittt	cs
  200994:	1ab6      	subcs	r6, r6, r2
  200996:	4675      	movcs	r5, lr
  200998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  20099c:	ea55 0e06 	orrs.w	lr, r5, r6
  2009a0:	d018      	beq.n	2009d4 <__aeabi_ddiv+0x114>
  2009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2009be:	d1c0      	bne.n	200942 <__aeabi_ddiv+0x82>
  2009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009c4:	d10b      	bne.n	2009de <__aeabi_ddiv+0x11e>
  2009c6:	ea41 0100 	orr.w	r1, r1, r0
  2009ca:	f04f 0000 	mov.w	r0, #0
  2009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  2009d2:	e7b6      	b.n	200942 <__aeabi_ddiv+0x82>
  2009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009d8:	bf04      	itt	eq
  2009da:	4301      	orreq	r1, r0
  2009dc:	2000      	moveq	r0, #0
  2009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  2009e2:	bf88      	it	hi
  2009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  2009e8:	f63f aeaf 	bhi.w	20074a <__aeabi_dmul+0xde>
  2009ec:	ebb5 0c03 	subs.w	ip, r5, r3
  2009f0:	bf04      	itt	eq
  2009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  2009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  2009fa:	f150 0000 	adcs.w	r0, r0, #0
  2009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200a02:	bd70      	pop	{r4, r5, r6, pc}
  200a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200a10:	bfc2      	ittt	gt
  200a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  200a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200a1a:	bd70      	popgt	{r4, r5, r6, pc}
  200a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200a20:	f04f 0e00 	mov.w	lr, #0
  200a24:	3c01      	subs	r4, #1
  200a26:	e690      	b.n	20074a <__aeabi_dmul+0xde>
  200a28:	ea45 0e06 	orr.w	lr, r5, r6
  200a2c:	e68d      	b.n	20074a <__aeabi_dmul+0xde>
  200a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200a32:	ea94 0f0c 	teq	r4, ip
  200a36:	bf08      	it	eq
  200a38:	ea95 0f0c 	teqeq	r5, ip
  200a3c:	f43f af3b 	beq.w	2008b6 <__aeabi_dmul+0x24a>
  200a40:	ea94 0f0c 	teq	r4, ip
  200a44:	d10a      	bne.n	200a5c <__aeabi_ddiv+0x19c>
  200a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200a4a:	f47f af34 	bne.w	2008b6 <__aeabi_dmul+0x24a>
  200a4e:	ea95 0f0c 	teq	r5, ip
  200a52:	f47f af25 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a56:	4610      	mov	r0, r2
  200a58:	4619      	mov	r1, r3
  200a5a:	e72c      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a5c:	ea95 0f0c 	teq	r5, ip
  200a60:	d106      	bne.n	200a70 <__aeabi_ddiv+0x1b0>
  200a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a66:	f43f aefd 	beq.w	200864 <__aeabi_dmul+0x1f8>
  200a6a:	4610      	mov	r0, r2
  200a6c:	4619      	mov	r1, r3
  200a6e:	e722      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200a74:	bf18      	it	ne
  200a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200a7a:	f47f aec5 	bne.w	200808 <__aeabi_dmul+0x19c>
  200a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200a82:	f47f af0d 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200a8a:	f47f aeeb 	bne.w	200864 <__aeabi_dmul+0x1f8>
  200a8e:	e712      	b.n	2008b6 <__aeabi_dmul+0x24a>

00200a90 <__aeabi_d2iz>:
  200a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  200a98:	d215      	bcs.n	200ac6 <__aeabi_d2iz+0x36>
  200a9a:	d511      	bpl.n	200ac0 <__aeabi_d2iz+0x30>
  200a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  200aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  200aa4:	d912      	bls.n	200acc <__aeabi_d2iz+0x3c>
  200aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  200ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200ab6:	fa23 f002 	lsr.w	r0, r3, r2
  200aba:	bf18      	it	ne
  200abc:	4240      	negne	r0, r0
  200abe:	4770      	bx	lr
  200ac0:	f04f 0000 	mov.w	r0, #0
  200ac4:	4770      	bx	lr
  200ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  200aca:	d105      	bne.n	200ad8 <__aeabi_d2iz+0x48>
  200acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  200ad0:	bf08      	it	eq
  200ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200ad6:	4770      	bx	lr
  200ad8:	f04f 0000 	mov.w	r0, #0
  200adc:	4770      	bx	lr
  200ade:	bf00      	nop

00200ae0 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200ae0:	4a02      	ldr	r2, [pc, #8]	; (200aec <notify7+0xc>)
  200ae2:	6813      	ldr	r3, [r2, #0]
  200ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200ae8:	6013      	str	r3, [r2, #0]
  200aea:	4770      	bx	lr
  200aec:	40007800 	.word	0x40007800

00200af0 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  200af0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200af2:	4b0b      	ldr	r3, [pc, #44]	; (200b20 <VectorA4+0x30>)
  200af4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200af6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200af8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  200afa:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  200afc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  200afe:	d107      	bne.n	200b10 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200b00:	2002      	movs	r0, #2
  200b02:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200b04:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200b06:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200b08:	68d1      	ldr	r1, [r2, #12]
  200b0a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  200b0e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200b10:	685b      	ldr	r3, [r3, #4]
  200b12:	4803      	ldr	r0, [pc, #12]	; (200b20 <VectorA4+0x30>)
  200b14:	685b      	ldr	r3, [r3, #4]
  200b16:	4798      	blx	r3
}
  200b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200b1c:	f000 be78 	b.w	201810 <_port_irq_epilogue>
  200b20:	20000834 	.word	0x20000834
	...

00200b30 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200b32:	2720      	movs	r7, #32
  200b34:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200b38:	4d12      	ldr	r5, [pc, #72]	; (200b84 <SysTick_Handler+0x54>)
  200b3a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200b3c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  200b3e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200b40:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200b44:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200b46:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200b48:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200b4a:	d013      	beq.n	200b74 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  200b4c:	891c      	ldrh	r4, [r3, #8]
  200b4e:	3c01      	subs	r4, #1
  200b50:	b2a4      	uxth	r4, r4
  200b52:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200b54:	b974      	cbnz	r4, 200b74 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200b56:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200b58:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  200b5a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200b5c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  200b5e:	61ea      	str	r2, [r5, #28]
  200b60:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200b64:	6918      	ldr	r0, [r3, #16]
  200b66:	4788      	blx	r1
  200b68:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  200b6c:	69eb      	ldr	r3, [r5, #28]
  200b6e:	891a      	ldrh	r2, [r3, #8]
  200b70:	2a00      	cmp	r2, #0
  200b72:	d0f0      	beq.n	200b56 <SysTick_Handler+0x26>
  200b74:	2300      	movs	r3, #0
  200b76:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  200b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  200b7e:	f000 be47 	b.w	201810 <_port_irq_epilogue>
  200b82:	bf00      	nop
  200b84:	20000844 	.word	0x20000844
	...

00200b90 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200b90:	4b08      	ldr	r3, [pc, #32]	; (200bb4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  200b92:	4809      	ldr	r0, [pc, #36]	; (200bb8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200b94:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  200b96:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200b98:	0d89      	lsrs	r1, r1, #22
  200b9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  200b9e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  200ba0:	058c      	lsls	r4, r1, #22
  200ba2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  200ba4:	b10a      	cbz	r2, 200baa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  200ba6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  200ba8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  200baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200bae:	f000 be2f 	b.w	201810 <_port_irq_epilogue>
  200bb2:	bf00      	nop
  200bb4:	40026400 	.word	0x40026400
  200bb8:	200009b0 	.word	0x200009b0
  200bbc:	00000000 	.word	0x00000000

00200bc0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200bc0:	4b08      	ldr	r3, [pc, #32]	; (200be4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  200bc2:	4809      	ldr	r0, [pc, #36]	; (200be8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200bc4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  200bc6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200bc8:	0c09      	lsrs	r1, r1, #16
  200bca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  200bce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  200bd0:	040c      	lsls	r4, r1, #16
  200bd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  200bd4:	b10a      	cbz	r2, 200bda <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  200bd6:	6f40      	ldr	r0, [r0, #116]	; 0x74
  200bd8:	4790      	blx	r2
}
  200bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200bde:	f000 be17 	b.w	201810 <_port_irq_epilogue>
  200be2:	bf00      	nop
  200be4:	40026400 	.word	0x40026400
  200be8:	200009b0 	.word	0x200009b0
  200bec:	00000000 	.word	0x00000000

00200bf0 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  200bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200bf4:	4c5f      	ldr	r4, [pc, #380]	; (200d74 <Vector188+0x184>)
  200bf6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200bf8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  200bfa:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200bfc:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  200bfe:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200c00:	d152      	bne.n	200ca8 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  200c02:	05eb      	lsls	r3, r5, #23
  200c04:	d445      	bmi.n	200c92 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  200c06:	06a8      	lsls	r0, r5, #26
  200c08:	d417      	bmi.n	200c3a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  200c0a:	0639      	lsls	r1, r7, #24
  200c0c:	d501      	bpl.n	200c12 <Vector188+0x22>
  200c0e:	062a      	lsls	r2, r5, #24
  200c10:	d465      	bmi.n	200cde <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  200c12:	066b      	lsls	r3, r5, #25
  200c14:	d50d      	bpl.n	200c32 <Vector188+0x42>
  200c16:	2320      	movs	r3, #32
  200c18:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  200c1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200c20:	429a      	cmp	r2, r3
  200c22:	f000 8086 	beq.w	200d32 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200c26:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  200c2a:	2300      	movs	r3, #0
  200c2c:	6037      	str	r7, [r6, #0]
  200c2e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  200c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  200c36:	f000 bdeb 	b.w	201810 <_port_irq_epilogue>
  200c3a:	2320      	movs	r3, #32
  200c3c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200c40:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200c42:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200c46:	6963      	ldr	r3, [r4, #20]
  200c48:	ea01 0802 	and.w	r8, r1, r2
  200c4c:	2b00      	cmp	r3, #0
  200c4e:	d078      	beq.n	200d42 <Vector188+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  200c50:	6a23      	ldr	r3, [r4, #32]
  200c52:	6a62      	ldr	r2, [r4, #36]	; 0x24
  200c54:	4293      	cmp	r3, r2
  200c56:	d078      	beq.n	200d4a <Vector188+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  200c58:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200c5a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  200c5c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  200c5e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  200c60:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200c62:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  200c66:	6a22      	ldr	r2, [r4, #32]
  200c68:	69e3      	ldr	r3, [r4, #28]
  200c6a:	429a      	cmp	r2, r3
  200c6c:	d25e      	bcs.n	200d2c <Vector188+0x13c>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
  200c6e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  200c70:	4a41      	ldr	r2, [pc, #260]	; (200d78 <Vector188+0x188>)
  200c72:	4293      	cmp	r3, r2
  200c74:	d009      	beq.n	200c8a <Vector188+0x9a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
  200c76:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  200c78:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200c7c:	4618      	mov	r0, r3
  200c7e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  200c80:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200c82:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200c86:	f001 f943 	bl	201f10 <chSchReadyI>
  200c8a:	2300      	movs	r3, #0
  200c8c:	f383 8811 	msr	BASEPRI, r3
  200c90:	e7bb      	b.n	200c0a <Vector188+0x1a>
  200c92:	2320      	movs	r3, #32
  200c94:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  200c98:	f44f 7000 	mov.w	r0, #512	; 0x200
  200c9c:	f001 fa68 	bl	202170 <chEvtBroadcastFlagsI.constprop.22>
  200ca0:	2300      	movs	r3, #0
  200ca2:	f383 8811 	msr	BASEPRI, r3
  200ca6:	e7ae      	b.n	200c06 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  200ca8:	f015 0f08 	tst.w	r5, #8
  200cac:	bf0c      	ite	eq
  200cae:	2000      	moveq	r0, #0
  200cb0:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  200cb2:	07eb      	lsls	r3, r5, #31
  200cb4:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  200cb8:	bf48      	it	mi
  200cba:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  200cbe:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  200cc0:	bf48      	it	mi
  200cc2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  200cc6:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  200cc8:	bf48      	it	mi
  200cca:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  200cce:	f383 8811 	msr	BASEPRI, r3
  200cd2:	f001 fa4d 	bl	202170 <chEvtBroadcastFlagsI.constprop.22>
  200cd6:	2300      	movs	r3, #0
  200cd8:	f383 8811 	msr	BASEPRI, r3
  200cdc:	e791      	b.n	200c02 <Vector188+0x12>
  200cde:	2320      	movs	r3, #32
  200ce0:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200ce6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200ce8:	429a      	cmp	r2, r3
  200cea:	d036      	beq.n	200d5a <Vector188+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  200cec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200cee:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200cf0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200cf2:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200cf4:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200cf6:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200cf8:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200cfa:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  200cfe:	d301      	bcc.n	200d04 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  200d00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200d02:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200d06:	4a1d      	ldr	r2, [pc, #116]	; (200d7c <Vector188+0x18c>)
  200d08:	4293      	cmp	r3, r2
  200d0a:	d009      	beq.n	200d20 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  200d0c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  200d0e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200d12:	4618      	mov	r0, r3
  200d14:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  200d16:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200d18:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200d1c:	f001 f8f8 	bl	201f10 <chSchReadyI>
      u->TDR = b;
  200d20:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200d24:	2300      	movs	r3, #0
  200d26:	f383 8811 	msr	BASEPRI, r3
  200d2a:	e772      	b.n	200c12 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  200d2c:	69a3      	ldr	r3, [r4, #24]
  200d2e:	6223      	str	r3, [r4, #32]
  200d30:	e79d      	b.n	200c6e <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  200d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  200d34:	2b00      	cmp	r3, #0
  200d36:	f43f af76 	beq.w	200c26 <Vector188+0x36>
  200d3a:	2010      	movs	r0, #16
  200d3c:	f001 fa18 	bl	202170 <chEvtBroadcastFlagsI.constprop.22>
  200d40:	e771      	b.n	200c26 <Vector188+0x36>
  200d42:	2004      	movs	r0, #4
  200d44:	f001 fa14 	bl	202170 <chEvtBroadcastFlagsI.constprop.22>
  200d48:	e782      	b.n	200c50 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  200d4a:	6962      	ldr	r2, [r4, #20]
  200d4c:	2a00      	cmp	r2, #0
  200d4e:	d083      	beq.n	200c58 <Vector188+0x68>
  200d50:	f44f 6080 	mov.w	r0, #1024	; 0x400
  200d54:	f001 fa0c 	bl	202170 <chEvtBroadcastFlagsI.constprop.22>
  200d58:	e797      	b.n	200c8a <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  200d5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  200d5c:	2a00      	cmp	r2, #0
  200d5e:	d0c5      	beq.n	200cec <Vector188+0xfc>
  200d60:	2008      	movs	r0, #8
  200d62:	f001 fa05 	bl	202170 <chEvtBroadcastFlagsI.constprop.22>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  200d66:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  200d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  200d6e:	6033      	str	r3, [r6, #0]
  200d70:	e7d8      	b.n	200d24 <Vector188+0x134>
  200d72:	bf00      	nop
  200d74:	20000a58 	.word	0x20000a58
  200d78:	20000a64 	.word	0x20000a64
  200d7c:	20000a88 	.word	0x20000a88

00200d80 <main>:
#include <Serial_Init.h>
//#include <TM_Counter.h>
#include <GPT_Counter.h>

int main(void)
{
  200d80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  200d84:	b08b      	sub	sp, #44	; 0x2c
  tqp->next = (thread_t *)tqp;
  200d86:	4c82      	ldr	r4, [pc, #520]	; (200f90 <main+0x210>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
  200d88:	2500      	movs	r5, #0
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
  200d8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  200d8e:	af00      	add	r7, sp, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200d90:	f104 031c 	add.w	r3, r4, #28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  200d94:	f04f 32ff 	mov.w	r2, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
  200d98:	f04f 0800 	mov.w	r8, #0
  200d9c:	f04f 0900 	mov.w	r9, #0
  chTMStartMeasurementX(&tm);
  200da0:	f107 0008 	add.w	r0, r7, #8
  200da4:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
  200da6:	6064      	str	r4, [r4, #4]
  REG_INSERT(tp);
  200da8:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  ch.vtlist.delta = (systime_t)-1;
  200dac:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200dae:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200db0:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  200db2:	60ba      	str	r2, [r7, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  200db4:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  200db6:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  200db8:	60a5      	str	r5, [r4, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
  200dba:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200dbc:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200dbe:	60fd      	str	r5, [r7, #12]
  tmp->last       = (rtcnt_t)0;
  200dc0:	613d      	str	r5, [r7, #16]
  tmp->n          = (ucnt_t)0;
  200dc2:	617d      	str	r5, [r7, #20]
  tmp->cumulative = (rttime_t)0;
  200dc4:	e9c7 8906 	strd	r8, r9, [r7, #24]
  chTMStartMeasurementX(&tm);
  200dc8:	f001 f9ca 	bl	202160 <chTMStartMeasurementX.constprop.27>
  chTMStopMeasurementX(&tm);
  200dcc:	f107 0008 	add.w	r0, r7, #8
  200dd0:	f000 fe9e 	bl	201b10 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  200dd4:	4b6f      	ldr	r3, [pc, #444]	; (200f94 <main+0x214>)
  200dd6:	4970      	ldr	r1, [pc, #448]	; (200f98 <main+0x218>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200dd8:	f64f 09ff 	movw	r9, #63743	; 0xf8ff
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  200ddc:	4a6f      	ldr	r2, [pc, #444]	; (200f9c <main+0x21c>)
  tp->prio      = prio;
  200dde:	f04f 0c80 	mov.w	ip, #128	; 0x80
  200de2:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  200de4:	f103 0810 	add.w	r8, r3, #16
  200de8:	496d      	ldr	r1, [pc, #436]	; (200fa0 <main+0x220>)
  endmem  = __heap_end__;
  200dea:	486e      	ldr	r0, [pc, #440]	; (200fa4 <main+0x224>)
  nextmem = __heap_base__;
  200dec:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200dee:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  200df0:	496d      	ldr	r1, [pc, #436]	; (200fa8 <main+0x228>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200df2:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  200df6:	6008      	str	r0, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  200df8:	496c      	ldr	r1, [pc, #432]	; (200fac <main+0x22c>)
  ch.tm.offset = tm.last;
  200dfa:	6938      	ldr	r0, [r7, #16]
  200dfc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  200e00:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200e02:	ea0e 0e09 	and.w	lr, lr, r9
  reg_value  =  (reg_value                                   |
  200e06:	486a      	ldr	r0, [pc, #424]	; (200fb0 <main+0x230>)
  tp->prio      = prio;
  200e08:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  tp->realprio  = prio;
  200e0c:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  200e10:	ea4e 0000 	orr.w	r0, lr, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200e14:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 200fdc <main+0x25c>
  REG_INSERT(tp);
  200e18:	f8d4 e014 	ldr.w	lr, [r4, #20]
  tp->name      = name;
  200e1c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 200fe0 <main+0x260>
  tp->epending  = (eventmask_t)0;
  200e20:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200e22:	619d      	str	r5, [r3, #24]
  200e24:	f8c3 8010 	str.w	r8, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  200e28:	f8c3 8014 	str.w	r8, [r3, #20]
  tlp->next = (thread_t *)tlp;
  200e2c:	f104 0854 	add.w	r8, r4, #84	; 0x54
  REG_INSERT(tp);
  200e30:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  200e34:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  200e38:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  200e3a:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  200e3c:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  REG_INSERT(tp);
  200e40:	f8ce 6010 	str.w	r6, [lr, #16]
  tqp->next = (thread_t *)tqp;
  200e44:	f104 0e58 	add.w	lr, r4, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  200e48:	60c8      	str	r0, [r1, #12]
  200e4a:	f8dc 000c 	ldr.w	r0, [ip, #12]
  H_NEXT(&default_heap.header) = NULL;
  200e4e:	609d      	str	r5, [r3, #8]
  200e50:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  200e54:	60dd      	str	r5, [r3, #12]
  200e56:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  200e58:	61a6      	str	r6, [r4, #24]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  200e5a:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  200e5c:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
  200e60:	f04f 0810 	mov.w	r8, #16
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  200e64:	4b53      	ldr	r3, [pc, #332]	; (200fb4 <main+0x234>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  200e66:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  200e68:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200e6c:	f8cc 000c 	str.w	r0, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  200e70:	4851      	ldr	r0, [pc, #324]	; (200fb8 <main+0x238>)
  tqp->next = (thread_t *)tqp;
  200e72:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  200e76:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
  200e7a:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  200e7e:	6818      	ldr	r0, [r3, #0]
  200e80:	4310      	orrs	r0, r2
  200e82:	6018      	str	r0, [r3, #0]
  200e84:	f881 801f 	strb.w	r8, [r1, #31]
  200e88:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  200e8c:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  200e90:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200e92:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  200e96:	4b49      	ldr	r3, [pc, #292]	; (200fbc <main+0x23c>)
  tp->state     = CH_STATE_WTSTART;
  200e98:	2602      	movs	r6, #2
  REG_INSERT(tp);
  200e9a:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
  200e9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200ea0:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
  tp->realprio  = prio;
  200ea4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  200ea8:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  200eac:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200eb0:	4a43      	ldr	r2, [pc, #268]	; (200fc0 <main+0x240>)
  200eb2:	f8df c130 	ldr.w	ip, [pc, #304]	; 200fe4 <main+0x264>
  200eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  200eba:	4a42      	ldr	r2, [pc, #264]	; (200fc4 <main+0x244>)
  tp->state     = CH_STATE_WTSTART;
  200ebc:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  200ec0:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  200ec4:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200ec8:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200ecc:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200ed0:	f8c3 e09c 	str.w	lr, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  200ed4:	f103 0eb8 	add.w	lr, r3, #184	; 0xb8
  tp->name      = name;
  200ed8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200edc:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200ede:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  200ee2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200ee6:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200eea:	f8c3 c06c 	str.w	ip, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  200eee:	6101      	str	r1, [r0, #16]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
  200ef0:	69a2      	ldr	r2, [r4, #24]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
  200ef2:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
  200ef6:	6890      	ldr	r0, [r2, #8]
  200ef8:	6161      	str	r1, [r4, #20]
  200efa:	f8c3 e0b8 	str.w	lr, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200efe:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  200f02:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  200f06:	2800      	cmp	r0, #0
  200f08:	f000 8346 	beq.w	201598 <main+0x818>
  tp->state = CH_STATE_READY;
  200f0c:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200f10:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  200f12:	68a0      	ldr	r0, [r4, #8]
  200f14:	2800      	cmp	r0, #0
  200f16:	d1fb      	bne.n	200f10 <main+0x190>
  tp->queue.next             = cp;
  200f18:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200f1c:	6862      	ldr	r2, [r4, #4]
  200f1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  200f22:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
  200f24:	6061      	str	r1, [r4, #4]
  200f26:	f380 8811 	msr	BASEPRI, r0
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200f2a:	4b27      	ldr	r3, [pc, #156]	; (200fc8 <main+0x248>)
  200f2c:	f04f 32ff 	mov.w	r2, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  200f30:	4c26      	ldr	r4, [pc, #152]	; (200fcc <main+0x24c>)
  rccResetAHB1(~0);
  200f32:	6919      	ldr	r1, [r3, #16]
  200f34:	611a      	str	r2, [r3, #16]
  200f36:	6118      	str	r0, [r3, #16]
  rccResetAHB2(~0);
  200f38:	6959      	ldr	r1, [r3, #20]
  200f3a:	615a      	str	r2, [r3, #20]
  200f3c:	6158      	str	r0, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200f3e:	6a19      	ldr	r1, [r3, #32]
  200f40:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
  200f44:	6219      	str	r1, [r3, #32]
  200f46:	6218      	str	r0, [r3, #32]
  rccResetAPB2(~0);
  200f48:	6a59      	ldr	r1, [r3, #36]	; 0x24
  200f4a:	625a      	str	r2, [r3, #36]	; 0x24
  200f4c:	6258      	str	r0, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200f4e:	6822      	ldr	r2, [r4, #0]
  200f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  200f54:	6022      	str	r2, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  200f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  200f58:	f402 7240 	and.w	r2, r2, #768	; 0x300
  200f5c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  200f60:	d003      	beq.n	200f6a <main+0x1ea>
    RCC->BDCR = RCC_BDCR_BDRST;
  200f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  200f66:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  200f68:	6718      	str	r0, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200f6a:	4b17      	ldr	r3, [pc, #92]	; (200fc8 <main+0x248>)
  200f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200f6e:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200f70:	f042 0219 	orr.w	r2, r2, #25
  200f74:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200f76:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  200f78:	079b      	lsls	r3, r3, #30
  200f7a:	d5fc      	bpl.n	200f76 <main+0x1f6>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  200f7c:	4c13      	ldr	r4, [pc, #76]	; (200fcc <main+0x24c>)
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
  200f7e:	2300      	movs	r3, #0
  200f80:	4913      	ldr	r1, [pc, #76]	; (200fd0 <main+0x250>)
  200f82:	6862      	ldr	r2, [r4, #4]
  200f84:	4d13      	ldr	r5, [pc, #76]	; (200fd4 <main+0x254>)
  200f86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  200f8a:	4e13      	ldr	r6, [pc, #76]	; (200fd8 <main+0x258>)
  200f8c:	6062      	str	r2, [r4, #4]
  200f8e:	e02d      	b.n	200fec <main+0x26c>
  200f90:	20000844 	.word	0x20000844
  200f94:	20000990 	.word	0x20000990
  200f98:	00201711 	.word	0x00201711
  200f9c:	20000a34 	.word	0x20000a34
  200fa0:	20020000 	.word	0x20020000
  200fa4:	20080000 	.word	0x20080000
  200fa8:	20000a30 	.word	0x20000a30
  200fac:	e000ed00 	.word	0xe000ed00
  200fb0:	05fa0300 	.word	0x05fa0300
  200fb4:	e0001000 	.word	0xe0001000
  200fb8:	c5acce55 	.word	0xc5acce55
  200fbc:	200008b8 	.word	0x200008b8
  200fc0:	002002e5 	.word	0x002002e5
  200fc4:	080027bc 	.word	0x080027bc
  200fc8:	40023800 	.word	0x40023800
  200fcc:	40007000 	.word	0x40007000
  200fd0:	080026f0 	.word	0x080026f0
  200fd4:	40026010 	.word	0x40026010
  200fd8:	200009b0 	.word	0x200009b0
  200fdc:	e000edf0 	.word	0xe000edf0
  200fe0:	080027a4 	.word	0x080027a4
  200fe4:	002017d1 	.word	0x002017d1
  200fe8:	f851 5c0c 	ldr.w	r5, [r1, #-12]
  200fec:	602b      	str	r3, [r5, #0]
  200fee:	310c      	adds	r1, #12
    dma_isr_redir[i].dma_func = NULL;
  200ff0:	f846 3030 	str.w	r3, [r6, r0, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  200ff4:	3001      	adds	r0, #1
  200ff6:	2810      	cmp	r0, #16
  200ff8:	d1f6      	bne.n	200fe8 <main+0x268>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  200ffa:	f04f 3eff 	mov.w	lr, #4294967295
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200ffe:	4ed6      	ldr	r6, [pc, #856]	; (201358 <main+0x5d8>)
  201000:	49d6      	ldr	r1, [pc, #856]	; (20135c <main+0x5dc>)
  201002:	f240 7cff 	movw	ip, #2047	; 0x7ff
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  201006:	4ad6      	ldr	r2, [pc, #856]	; (201360 <main+0x5e0>)
  gpiop->ODR     = config->odr;
  201008:	f64f 74ff 	movw	r4, #65535	; 0xffff
  DMA1->LIFCR = 0xFFFFFFFFU;
  20100c:	f8c1 e008 	str.w	lr, [r1, #8]
  201010:	f64b 7b7e 	movw	fp, #49022	; 0xbf7e
  DMA1->HIFCR = 0xFFFFFFFFU;
  201014:	f8c1 e00c 	str.w	lr, [r1, #12]
  gpiop->AFRH    = config->afrh;
  201018:	f44f 0a30 	mov.w	sl, #11534336	; 0xb00000
  DMA2->LIFCR = 0xFFFFFFFFU;
  20101c:	f8c2 e008 	str.w	lr, [r2, #8]
  gpiop->OSPEEDR = config->ospeedr;
  201020:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
  DMA2->HIFCR = 0xFFFFFFFFU;
  201024:	f8c2 e00c 	str.w	lr, [r2, #12]
  gpiop->MODER   = config->moder;
  201028:	f640 2808 	movw	r8, #2568	; 0xa08
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  20102c:	6b32      	ldr	r2, [r6, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
  20102e:	4dcd      	ldr	r5, [pc, #820]	; (201364 <main+0x5e4>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201030:	ea42 020c 	orr.w	r2, r2, ip
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  201034:	49cc      	ldr	r1, [pc, #816]	; (201368 <main+0x5e8>)
  201036:	6332      	str	r2, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201038:	6d32      	ldr	r2, [r6, #80]	; 0x50
  20103a:	ea42 0c0c 	orr.w	ip, r2, ip
  sdp->vmt = &vmt;
  20103e:	4acb      	ldr	r2, [pc, #812]	; (20136c <main+0x5ec>)
  201040:	f8c6 c050 	str.w	ip, [r6, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
  201044:	f8df c36c 	ldr.w	ip, [pc, #876]	; 2013b4 <main+0x634>
  gpiop->OTYPER  = config->otyper;
  201048:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20104a:	f8c5 e008 	str.w	lr, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  20104e:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRL    = config->afrl;
  201052:	f8df c364 	ldr.w	ip, [pc, #868]	; 2013b8 <main+0x638>
  gpiop->ODR     = config->odr;
  201056:	616c      	str	r4, [r5, #20]
  gpiop->AFRL    = config->afrl;
  201058:	f8c5 c020 	str.w	ip, [r5, #32]
  gpiop->AFRH    = config->afrh;
  20105c:	f8df c35c 	ldr.w	ip, [pc, #860]	; 2013bc <main+0x63c>
  201060:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201064:	f8df c358 	ldr.w	ip, [pc, #856]	; 2013c0 <main+0x640>
  201068:	f8c5 c000 	str.w	ip, [r5]
  gpiop->OTYPER  = config->otyper;
  20106c:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201070:	f8c5 e408 	str.w	lr, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201074:	f10e 4e8a 	add.w	lr, lr, #1157627904	; 0x45000000
  iqp->q_buffer  = bp;
  201078:	f8df c348 	ldr.w	ip, [pc, #840]	; 2013c4 <main+0x644>
  20107c:	f10e 1e55 	add.w	lr, lr, #5570645	; 0x550055
  201080:	f50e 5ea8 	add.w	lr, lr, #5376	; 0x1500
  201084:	f8c5 e40c 	str.w	lr, [r5, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  201088:	f8c5 b414 	str.w	fp, [r5, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  20108c:	f8df e338 	ldr.w	lr, [pc, #824]	; 2013c8 <main+0x648>
  gpiop->AFRL    = config->afrl;
  201090:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201094:	f8c5 a424 	str.w	sl, [r5, #1060]	; 0x424
  gpiop->OTYPER  = config->otyper;
  201098:	f8df a30c 	ldr.w	sl, [pc, #780]	; 2013a8 <main+0x628>
  gpiop->MODER   = config->moder;
  20109c:	f8c5 e400 	str.w	lr, [r5, #1024]	; 0x400
  gpiop->AFRH    = config->afrh;
  2010a0:	f04f 0e77 	mov.w	lr, #119	; 0x77
  gpiop->OTYPER  = config->otyper;
  2010a4:	f8ca 3004 	str.w	r3, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2010a8:	f46f 1540 	mvn.w	r5, #3145728	; 0x300000
  2010ac:	f8ca 9008 	str.w	r9, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
  2010b0:	f8df 9318 	ldr.w	r9, [pc, #792]	; 2013cc <main+0x64c>
  2010b4:	f8df b318 	ldr.w	fp, [pc, #792]	; 2013d0 <main+0x650>
  2010b8:	f8ca 900c 	str.w	r9, [sl, #12]
  gpiop->AFRL    = config->afrl;
  2010bc:	f8df 9314 	ldr.w	r9, [pc, #788]	; 2013d4 <main+0x654>
  gpiop->ODR     = config->odr;
  2010c0:	f8ca 4014 	str.w	r4, [sl, #20]
  gpiop->AFRL    = config->afrl;
  2010c4:	f8ca 9020 	str.w	r9, [sl, #32]
  gpiop->OTYPER  = config->otyper;
  2010c8:	f8df 930c 	ldr.w	r9, [pc, #780]	; 2013d8 <main+0x658>
  gpiop->AFRH    = config->afrh;
  2010cc:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2010d0:	f8ca 8000 	str.w	r8, [sl]
  2010d4:	f44f 2a20 	mov.w	sl, #655360	; 0xa0000
  gpiop->PUPDR   = config->pupdr;
  2010d8:	f04f 3855 	mov.w	r8, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
  2010dc:	f8c9 3004 	str.w	r3, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2010e0:	f8c9 5008 	str.w	r5, [r9, #8]
  2010e4:	2520      	movs	r5, #32
  gpiop->PUPDR   = config->pupdr;
  2010e6:	f8c9 b00c 	str.w	fp, [r9, #12]
  gpiop->ODR     = config->odr;
  2010ea:	f8c9 4014 	str.w	r4, [r9, #20]
  gpiop->AFRL    = config->afrl;
  2010ee:	f8c9 3020 	str.w	r3, [r9, #32]
  gpiop->AFRH    = config->afrh;
  2010f2:	f8c9 e024 	str.w	lr, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2010f6:	f8c9 a000 	str.w	sl, [r9]
  2010fa:	f04f 6a08 	mov.w	sl, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
  2010fe:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 2013dc <main+0x65c>
  gpiop->OSPEEDR = config->ospeedr;
  201102:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 2013e0 <main+0x660>
  gpiop->OTYPER  = config->otyper;
  201106:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20110a:	f8ce 9008 	str.w	r9, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  20110e:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->OTYPER  = config->otyper;
  201112:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 2013e4 <main+0x664>
  gpiop->ODR     = config->odr;
  201116:	f8ce 4014 	str.w	r4, [lr, #20]
  gpiop->AFRL    = config->afrl;
  20111a:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
  20111e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201122:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OSPEEDR = config->ospeedr;
  201126:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 2013e8 <main+0x668>
  gpiop->OTYPER  = config->otyper;
  20112a:	f8c9 3004 	str.w	r3, [r9, #4]
  gpiop->PUPDR   = config->pupdr;
  20112e:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 2013ec <main+0x66c>
  gpiop->OSPEEDR = config->ospeedr;
  201132:	f8c9 e008 	str.w	lr, [r9, #8]
  gpiop->OTYPER  = config->otyper;
  201136:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 2013f0 <main+0x670>
  gpiop->PUPDR   = config->pupdr;
  20113a:	f8c9 800c 	str.w	r8, [r9, #12]
  gpiop->ODR     = config->odr;
  20113e:	f8c9 4014 	str.w	r4, [r9, #20]
  gpiop->AFRL    = config->afrl;
  201142:	f8c9 3020 	str.w	r3, [r9, #32]
  gpiop->AFRH    = config->afrh;
  201146:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20114a:	f8c9 3000 	str.w	r3, [r9]
  gpiop->OSPEEDR = config->ospeedr;
  20114e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 2013f4 <main+0x674>
  gpiop->OTYPER  = config->otyper;
  201152:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201156:	f8ce 9008 	str.w	r9, [lr, #8]
  20115a:	f04f 090f 	mov.w	r9, #15
  gpiop->PUPDR   = config->pupdr;
  20115e:	f8ce b00c 	str.w	fp, [lr, #12]
  gpiop->AFRH    = config->afrh;
  201162:	f8df b294 	ldr.w	fp, [pc, #660]	; 2013f8 <main+0x678>
  gpiop->ODR     = config->odr;
  201166:	f8ce 4014 	str.w	r4, [lr, #20]
  gpiop->AFRL    = config->afrl;
  20116a:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
  20116e:	f8ce b024 	str.w	fp, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201172:	f8ce a000 	str.w	sl, [lr]
  gpiop->OTYPER  = config->otyper;
  201176:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
  tqp->next = (thread_t *)tqp;
  20117a:	f101 0a18 	add.w	sl, r1, #24
  gpiop->PUPDR   = config->pupdr;
  20117e:	f8df b27c 	ldr.w	fp, [pc, #636]	; 2013fc <main+0x67c>
  gpiop->OTYPER  = config->otyper;
  201182:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201186:	f8ce 9008 	str.w	r9, [lr, #8]
  20118a:	f04f 0901 	mov.w	r9, #1
  gpiop->PUPDR   = config->pupdr;
  20118e:	f8ce b00c 	str.w	fp, [lr, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201192:	f04f 0b60 	mov.w	fp, #96	; 0x60
  gpiop->ODR     = config->odr;
  201196:	f8ce 4014 	str.w	r4, [lr, #20]
  gpiop->AFRL    = config->afrl;
  20119a:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
  20119e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2011a2:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OTYPER  = config->otyper;
  2011a6:	f8ce 3404 	str.w	r3, [lr, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  2011aa:	f8ce 3408 	str.w	r3, [lr, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  2011ae:	f8ce 840c 	str.w	r8, [lr, #1036]	; 0x40c
  adcp->config   = NULL;
  2011b2:	604b      	str	r3, [r1, #4]
  gpiop->ODR     = config->odr;
  2011b4:	f8ce 4414 	str.w	r4, [lr, #1044]	; 0x414
  adcp->samples  = NULL;
  2011b8:	608b      	str	r3, [r1, #8]
  gpiop->AFRL    = config->afrl;
  2011ba:	f8ce 3420 	str.w	r3, [lr, #1056]	; 0x420
  adcp->depth    = 0;
  2011be:	60cb      	str	r3, [r1, #12]
  gpiop->AFRH    = config->afrh;
  2011c0:	f8ce 3424 	str.w	r3, [lr, #1060]	; 0x424
  adcp->grpp     = NULL;
  2011c4:	610b      	str	r3, [r1, #16]
  gpiop->MODER   = config->moder;
  2011c6:	f8ce 3400 	str.w	r3, [lr, #1024]	; 0x400
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  2011ca:	614b      	str	r3, [r1, #20]
  gpiop->OTYPER  = config->otyper;
  2011cc:	f8ce 3804 	str.w	r3, [lr, #2052]	; 0x804
  2011d0:	620b      	str	r3, [r1, #32]
  gpiop->OSPEEDR = config->ospeedr;
  2011d2:	f8ce 3808 	str.w	r3, [lr, #2056]	; 0x808
  2011d6:	f8c1 a018 	str.w	sl, [r1, #24]
  gpiop->PUPDR   = config->pupdr;
  2011da:	f8ce 880c 	str.w	r8, [lr, #2060]	; 0x80c
  tqp->prev = (thread_t *)tqp;
  2011de:	f8c1 a01c 	str.w	sl, [r1, #28]
  gpiop->OTYPER  = config->otyper;
  2011e2:	f8df a21c 	ldr.w	sl, [pc, #540]	; 201400 <main+0x680>
  gpiop->ODR     = config->odr;
  2011e6:	f8ce 4814 	str.w	r4, [lr, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2011ea:	f8ce 3820 	str.w	r3, [lr, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2011ee:	f8ce 3824 	str.w	r3, [lr, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2011f2:	f8ce 3800 	str.w	r3, [lr, #2048]	; 0x800
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2011f6:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  gpiop->OTYPER  = config->otyper;
  2011fa:	f8ca 3004 	str.w	r3, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2011fe:	f8ca 3008 	str.w	r3, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
  201202:	f8ca 800c 	str.w	r8, [sl, #12]
  201206:	4690      	mov	r8, r2
  gpiop->ODR     = config->odr;
  201208:	f8ca 4014 	str.w	r4, [sl, #20]
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  20120c:	4c58      	ldr	r4, [pc, #352]	; (201370 <main+0x5f0>)
  gpiop->AFRL    = config->afrl;
  20120e:	f8ca 3020 	str.w	r3, [sl, #32]
  gpiop->AFRH    = config->afrh;
  201212:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201216:	f8ca 3000 	str.w	r3, [sl]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20121a:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
  20121e:	628c      	str	r4, [r1, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  201220:	4c54      	ldr	r4, [pc, #336]	; (201374 <main+0x5f4>)
  adcp->state    = ADC_STOP;
  201222:	f881 9000 	strb.w	r9, [r1]
  201226:	62cc      	str	r4, [r1, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  201228:	4c53      	ldr	r4, [pc, #332]	; (201378 <main+0x5f8>)
  20122a:	630c      	str	r4, [r1, #48]	; 0x30
  20122c:	4953      	ldr	r1, [pc, #332]	; (20137c <main+0x5fc>)
  GPTD1.tim = STM32_TIM1;
  20122e:	4c54      	ldr	r4, [pc, #336]	; (201380 <main+0x600>)
  201230:	f881 b312 	strb.w	fp, [r1, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201234:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201238:	f8c1 e000 	str.w	lr, [r1]
  iqp->q_counter = 0;
  20123c:	6153      	str	r3, [r2, #20]
  oqp->q_counter = size;
  20123e:	6390      	str	r0, [r2, #56]	; 0x38
  201240:	4850      	ldr	r0, [pc, #320]	; (201384 <main+0x604>)
  sdp->state = SD_STOP;
  201242:	f882 9008 	strb.w	r9, [r2, #8]
  sdp->vmt = &vmt;
  201246:	f848 0b04 	str.w	r0, [r8], #4
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  20124a:	f884 9000 	strb.w	r9, [r4]
  iqp->q_buffer  = bp;
  20124e:	f8c2 c018 	str.w	ip, [r2, #24]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  201252:	f8c2 8004 	str.w	r8, [r2, #4]
  tqp->next = (thread_t *)tqp;
  201256:	f102 080c 	add.w	r8, r2, #12
  iqp->q_notify  = infy;
  20125a:	6293      	str	r3, [r2, #40]	; 0x28
  iqp->q_link    = link;
  20125c:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  20125e:	6512      	str	r2, [r2, #80]	; 0x50
  gptp->config = NULL;
  201260:	6063      	str	r3, [r4, #4]
  oqp->q_top     = bp + size;
  201262:	4849      	ldr	r0, [pc, #292]	; (201388 <main+0x608>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201264:	f881 a352 	strb.w	sl, [r1, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201268:	f8c1 e188 	str.w	lr, [r1, #392]	; 0x188
  20126c:	f100 0910 	add.w	r9, r0, #16
  iqp->q_rdptr   = bp;
  201270:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
  201274:	f102 0030 	add.w	r0, r2, #48	; 0x30
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201278:	f8c1 e008 	str.w	lr, [r1, #8]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  20127c:	f04f 0e80 	mov.w	lr, #128	; 0x80
  201280:	4942      	ldr	r1, [pc, #264]	; (20138c <main+0x60c>)
  201282:	f8c2 800c 	str.w	r8, [r2, #12]
  201286:	60e1      	str	r1, [r4, #12]
  iqp->q_top     = bp + size;
  201288:	4941      	ldr	r1, [pc, #260]	; (201390 <main+0x610>)
  tqp->prev = (thread_t *)tqp;
  20128a:	f8c2 8010 	str.w	r8, [r2, #16]
  20128e:	61d1      	str	r1, [r2, #28]
  oqp->q_buffer  = bp;
  201290:	f1a9 0110 	sub.w	r1, r9, #16
#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  SD7.clock = STM32_UART7CLK;
  201294:	f8df 816c 	ldr.w	r8, [pc, #364]	; 201404 <main+0x684>
  201298:	63d1      	str	r1, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  20129a:	6491      	str	r1, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  20129c:	6451      	str	r1, [r2, #68]	; 0x44
  oqp->q_notify  = onfy;
  20129e:	493d      	ldr	r1, [pc, #244]	; (201394 <main+0x614>)
  iqp->q_wrptr   = bp;
  2012a0:	f8c2 c020 	str.w	ip, [r2, #32]
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2012a4:	f04f 0c07 	mov.w	ip, #7
  oqp->q_notify  = onfy;
  2012a8:	64d1      	str	r1, [r2, #76]	; 0x4c
  SD7.usart = UART7;
  2012aa:	493b      	ldr	r1, [pc, #236]	; (201398 <main+0x618>)
  SD7.clock = STM32_UART7CLK;
  2012ac:	f8c2 8058 	str.w	r8, [r2, #88]	; 0x58
  SD7.usart = UART7;
  2012b0:	6551      	str	r1, [r2, #84]	; 0x54
  tqp->next = (thread_t *)tqp;
  2012b2:	6310      	str	r0, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  2012b4:	6350      	str	r0, [r2, #52]	; 0x34
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  2012b6:	4939      	ldr	r1, [pc, #228]	; (20139c <main+0x61c>)
  2012b8:	f8df 814c 	ldr.w	r8, [pc, #332]	; 201408 <main+0x688>
  2012bc:	4838      	ldr	r0, [pc, #224]	; (2013a0 <main+0x620>)
  oqp->q_top     = bp + size;
  2012be:	f8c2 9040 	str.w	r9, [r2, #64]	; 0x40
  2012c2:	f8c1 8004 	str.w	r8, [r1, #4]
  SysTick->VAL = 0;
  2012c6:	608b      	str	r3, [r1, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2012c8:	f8c1 c000 	str.w	ip, [r1]
  2012cc:	f880 e023 	strb.w	lr, [r0, #35]	; 0x23
  2012d0:	f385 8811 	msr	BASEPRI, r5
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  2012d4:	7a13      	ldrb	r3, [r2, #8]
  2012d6:	2b01      	cmp	r3, #1
  2012d8:	d103      	bne.n	2012e2 <main+0x562>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  2012da:	6c33      	ldr	r3, [r6, #64]	; 0x40
  2012dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  2012e0:	6433      	str	r3, [r6, #64]	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2012e2:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2012e4:	f04f 0840 	mov.w	r8, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2012e8:	482e      	ldr	r0, [pc, #184]	; (2013a4 <main+0x624>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2012ea:	2601      	movs	r6, #1
  USART_TypeDef *u = sdp->usart;
  2012ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2012ee:	f240 1c2d 	movw	ip, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2012f2:	fba0 0101 	umull	r0, r1, r0, r1
  sdp->state = SD_READY;
  2012f6:	f04f 0e02 	mov.w	lr, #2
  u->ICR = 0xFFFFFFFFU;
  2012fa:	f04f 30ff 	mov.w	r0, #4294967295
  2012fe:	2500      	movs	r5, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201300:	0a89      	lsrs	r1, r1, #10
  201302:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201304:	f8c3 8004 	str.w	r8, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201308:	609e      	str	r6, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20130a:	f8c3 c000 	str.w	ip, [r3]
  u->ICR = 0xFFFFFFFFU;
  20130e:	6218      	str	r0, [r3, #32]
  201310:	f882 e008 	strb.w	lr, [r2, #8]
    sdp->rxmask = 0xFF;
  201314:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  201318:	f385 8811 	msr	BASEPRI, r5
 * Serial 7 UART Initialization.
 */
void sd7_init(void)
{
    sdStart( &SD7, &UARTcfg );
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  20131c:	f44f 7080 	mov.w	r0, #256	; 0x100
  201320:	f000 ff5e 	bl	2021e0 <_pal_lld_setgroupmode.constprop.5>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  201324:	2080      	movs	r0, #128	; 0x80
  201326:	f000 ff5b 	bl	2021e0 <_pal_lld_setgroupmode.constprop.5>

    palSetPad(GPIOA, 3); //High level pin 1 for Sonar
  20132a:	490e      	ldr	r1, [pc, #56]	; (201364 <main+0x5e4>)
  20132c:	2008      	movs	r0, #8
    palSetPad(GPIOC, 0); //High level pin 5 for Sonar
  20132e:	4a1e      	ldr	r2, [pc, #120]	; (2013a8 <main+0x628>)
  201330:	2320      	movs	r3, #32
    palSetPad(GPIOA, 3); //High level pin 1 for Sonar
  201332:	8308      	strh	r0, [r1, #24]
    palSetPad(GPIOC, 0); //High level pin 5 for Sonar
  201334:	8316      	strh	r6, [r2, #24]
  201336:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  20133a:	7823      	ldrb	r3, [r4, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  20133c:	4a1b      	ldr	r2, [pc, #108]	; (2013ac <main+0x62c>)
  20133e:	42b3      	cmp	r3, r6
  201340:	6062      	str	r2, [r4, #4]
  201342:	f000 812c 	beq.w	20159e <main+0x81e>
  201346:	68a3      	ldr	r3, [r4, #8]
  201348:	4a19      	ldr	r2, [pc, #100]	; (2013b0 <main+0x630>)
  20134a:	095b      	lsrs	r3, r3, #5
  20134c:	fba2 2303 	umull	r2, r3, r2, r3
  201350:	09db      	lsrs	r3, r3, #7
  201352:	3b01      	subs	r3, #1
  201354:	b29b      	uxth	r3, r3
  201356:	e059      	b.n	20140c <main+0x68c>
  201358:	40023800 	.word	0x40023800
  20135c:	40026000 	.word	0x40026000
  201360:	40026400 	.word	0x40026400
  201364:	40020000 	.word	0x40020000
  201368:	20000800 	.word	0x20000800
  20136c:	20000a58 	.word	0x20000a58
  201370:	40012000 	.word	0x40012000
  201374:	08002774 	.word	0x08002774
  201378:	00022c16 	.word	0x00022c16
  20137c:	e000e100 	.word	0xe000e100
  201380:	20000834 	.word	0x20000834
  201384:	080027d8 	.word	0x080027d8
  201388:	20000a48 	.word	0x20000a48
  20138c:	40010000 	.word	0x40010000
  201390:	20000a48 	.word	0x20000a48
  201394:	00200ae1 	.word	0x00200ae1
  201398:	40007800 	.word	0x40007800
  20139c:	e000e010 	.word	0xe000e010
  2013a0:	e000ed00 	.word	0xe000ed00
  2013a4:	1b4e81b5 	.word	0x1b4e81b5
  2013a8:	40020800 	.word	0x40020800
  2013ac:	080026d4 	.word	0x080026d4
  2013b0:	0a7c5ac5 	.word	0x0a7c5ac5
  2013b4:	40005551 	.word	0x40005551
  2013b8:	b0000bb0 	.word	0xb0000bb0
  2013bc:	000aaa0a 	.word	0x000aaa0a
  2013c0:	2aae8028 	.word	0x2aae8028
  2013c4:	20000a38 	.word	0x20000a38
  2013c8:	18004001 	.word	0x18004001
  2013cc:	01555051 	.word	0x01555051
  2013d0:	55505555 	.word	0x55505555
  2013d4:	00bb00b0 	.word	0x00bb00b0
  2013d8:	40020c00 	.word	0x40020c00
  2013dc:	40021000 	.word	0x40021000
  2013e0:	cffffff3 	.word	0xcffffff3
  2013e4:	40021400 	.word	0x40021400
  2013e8:	003fcfff 	.word	0x003fcfff
  2013ec:	51155555 	.word	0x51155555
  2013f0:	40021800 	.word	0x40021800
  2013f4:	3cccf000 	.word	0x3cccf000
  2013f8:	00b0b000 	.word	0x00b0b000
  2013fc:	55555550 	.word	0x55555550
  201400:	40022800 	.word	0x40022800
  201404:	0337f980 	.word	0x0337f980
  201408:	00034bbf 	.word	0x00034bbf
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  20140c:	68e2      	ldr	r2, [r4, #12]
  20140e:	2100      	movs	r1, #0
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  201410:	2002      	movs	r0, #2
  201412:	6011      	str	r1, [r2, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  201414:	6051      	str	r1, [r2, #4]
  201416:	7020      	strb	r0, [r4, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  201418:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  20141a:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  20141c:	60d1      	str	r1, [r2, #12]
  20141e:	f381 8811 	msr	BASEPRI, r1
  201422:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 2015f8 <main+0x878>
  201426:	f107 0624 	add.w	r6, r7, #36	; 0x24
        GPT_Counter_Start();
        if(first == false)
        {
            for (int i=0; i<window; i++)
            {
               value = sdGet(&SD7);
  20142a:	4d6d      	ldr	r5, [pc, #436]	; (2015e0 <main+0x860>)
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  20142c:	f04f 0b01 	mov.w	fp, #1
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  201430:	f04f 0a00 	mov.w	sl, #0
  201434:	2320      	movs	r3, #32
  201436:	f383 8811 	msr	BASEPRI, r3
  if (NULL != gptp->config->callback)
  20143a:	6862      	ldr	r2, [r4, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  20143c:	f04f 0e03 	mov.w	lr, #3
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  201440:	68e3      	ldr	r3, [r4, #12]
  201442:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (NULL != gptp->config->callback)
  201446:	6852      	ldr	r2, [r2, #4]
  201448:	f884 e000 	strb.w	lr, [r4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  20144c:	62d8      	str	r0, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  20144e:	f8c3 b014 	str.w	fp, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  201452:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201456:	f8c3 a010 	str.w	sl, [r3, #16]
  if (NULL != gptp->config->callback)
  20145a:	b11a      	cbz	r2, 201464 <main+0x6e4>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  20145c:	68da      	ldr	r2, [r3, #12]
  20145e:	f042 0201 	orr.w	r2, r2, #1
  201462:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  201464:	2285      	movs	r2, #133	; 0x85
  201466:	601a      	str	r2, [r3, #0]
  201468:	f38a 8811 	msr	BASEPRI, sl
        if(first == false)
  20146c:	bb71      	cbnz	r1, 2014cc <main+0x74c>
  20146e:	4689      	mov	r9, r1
  201470:	e006      	b.n	201480 <main+0x700>
                   chThdSleepMilliseconds(30);
                   time = time + 0.03;
               }
               else
               {
                   i--;
  201472:	f109 39ff 	add.w	r9, r9, #4294967295
            for (int i=0; i<window; i++)
  201476:	f109 0901 	add.w	r9, r9, #1
  20147a:	f1b9 0f0e 	cmp.w	r9, #14
  20147e:	dc25      	bgt.n	2014cc <main+0x74c>
               value = sdGet(&SD7);
  201480:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201484:	4628      	mov	r0, r5
  201486:	f000 fd0b 	bl	201ea0 <iqGetTimeout>
               if (value == 'R')
  20148a:	2852      	cmp	r0, #82	; 0x52
               value = sdGet(&SD7);
  20148c:	6078      	str	r0, [r7, #4]
               if (value == 'R')
  20148e:	d1f0      	bne.n	201472 <main+0x6f2>
                   sdRead(&SD7, (uint8_t *)&value , 3);
  201490:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201494:	2203      	movs	r2, #3
  201496:	1d39      	adds	r1, r7, #4
  201498:	4628      	mov	r0, r5
  20149a:	f000 fc91 	bl	201dc0 <iqReadTimeout>
                   rass[i] = ASCIItoNUM(value, 3);
  20149e:	6878      	ldr	r0, [r7, #4]
  2014a0:	f001 f8fe 	bl	2026a0 <ASCIItoNUM.constprop.0>
  2014a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
  2014a8:	2320      	movs	r3, #32
  2014aa:	eb02 0249 	add.w	r2, r2, r9, lsl #1
  2014ae:	f822 0c20 	strh.w	r0, [r2, #-32]
  2014b2:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  2014b6:	211e      	movs	r1, #30
  2014b8:	2008      	movs	r0, #8
  2014ba:	f000 fb71 	bl	201ba0 <chSchGoSleepTimeoutS>
  2014be:	f38a 8811 	msr	BASEPRI, sl
            for (int i=0; i<window; i++)
  2014c2:	f109 0901 	add.w	r9, r9, #1
  2014c6:	f1b9 0f0e 	cmp.w	r9, #14
  2014ca:	ddd9      	ble.n	201480 <main+0x700>
            }
            first = true;
        }


        value = sdGet(&SD7);
  2014cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  2014d0:	4628      	mov	r0, r5
  2014d2:	f000 fce5 	bl	201ea0 <iqGetTimeout>
        if (value == 'R')
  2014d6:	2852      	cmp	r0, #82	; 0x52
  2014d8:	f04f 0101 	mov.w	r1, #1
        value = sdGet(&SD7);
  2014dc:	6078      	str	r0, [r7, #4]
        if (value == 'R')
  2014de:	d1a9      	bne.n	201434 <main+0x6b4>
  2014e0:	1dbb      	adds	r3, r7, #6
        }
    }
}

uint16_t Filter_Mediana (uint16_t *x, uint16_t window)
{
  2014e2:	46ea      	mov	sl, sp
    uint16_t z[window];
  2014e4:	b088      	sub	sp, #32
  2014e6:	4699      	mov	r9, r3
  2014e8:	4669      	mov	r1, sp
  2014ea:	f1ad 0302 	sub.w	r3, sp, #2
    uint16_t y;

    for (unsigned int k=0; k<window; k++)
    {
        z[k]=x[k];
  2014ee:	f839 2f02 	ldrh.w	r2, [r9, #2]!
    for (unsigned int k=0; k<window; k++)
  2014f2:	45b1      	cmp	r9, r6
        z[k]=x[k];
  2014f4:	f823 2f02 	strh.w	r2, [r3, #2]!
    for (unsigned int k=0; k<window; k++)
  2014f8:	d1f9      	bne.n	2014ee <main+0x76e>
  2014fa:	f04f 0c0e 	mov.w	ip, #14
        for (uint16_t j=0; j<(window-i-1); j++)
  2014fe:	2200      	movs	r2, #0
            if (x[j]<x[j+1])
  201500:	0053      	lsls	r3, r2, #1
  201502:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
        for (uint16_t j=0; j<(window-i-1); j++)
  201506:	f102 0e01 	add.w	lr, r2, #1
            if (x[j]<x[j+1])
  20150a:	3302      	adds	r3, #2
  20150c:	f831 b003 	ldrh.w	fp, [r1, r3]
  201510:	4558      	cmp	r0, fp
  201512:	d202      	bcs.n	20151a <main+0x79a>
                x[j] = x[j + 1];
  201514:	f821 b012 	strh.w	fp, [r1, r2, lsl #1]
                x[j + 1] = buff;
  201518:	52c8      	strh	r0, [r1, r3]
        for (uint16_t j=0; j<(window-i-1); j++)
  20151a:	fa1f f28e 	uxth.w	r2, lr
  20151e:	4594      	cmp	ip, r2
  201520:	dcee      	bgt.n	201500 <main+0x780>
    for (uint16_t i=0; i<(window-1); i++ )
  201522:	f1bc 0c01 	subs.w	ip, ip, #1
  201526:	d1ea      	bne.n	2014fe <main+0x77e>
  201528:	f107 0308 	add.w	r3, r7, #8
  20152c:	46d5      	mov	sp, sl
            num = rass[window/2];
            flt_num = Filter_Mediana(rass, window);

            for (int i=0; i<window-1; i++)
            {
                rass[i] = rass[i+1];
  20152e:	885a      	ldrh	r2, [r3, #2]
  201530:	f823 2b02 	strh.w	r2, [r3], #2
            for (int i=0; i<window-1; i++)
  201534:	4599      	cmp	r9, r3
  201536:	d1fa      	bne.n	20152e <main+0x7ae>
            }

            sdRead(&SD7, (uint8_t *)&value , 3);
  201538:	2203      	movs	r2, #3
  20153a:	1d39      	adds	r1, r7, #4
  20153c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201540:	4628      	mov	r0, r5
  201542:	f000 fc3d 	bl	201dc0 <iqReadTimeout>
            rass[window-1] = ASCIItoNUM(value, 3);
  201546:	6878      	ldr	r0, [r7, #4]
  201548:	f001 f8aa 	bl	2026a0 <ASCIItoNUM.constprop.0>
    gptStartContinuous(GPT_Timer1, TMR_TICKS_2_OVRFLOW);
}

void GPT_Get_Time (void)
{
    total_time = gpt_ticks + gptGetCounterX(GPT_Timer1);
  20154c:	68e3      	ldr	r3, [r4, #12]
  20154e:	f8d8 9000 	ldr.w	r9, [r8]
  201552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201554:	84b8      	strh	r0, [r7, #36]	; 0x24
  201556:	444b      	add	r3, r9
    chprintf( (BaseSequentialStream *)&SD7, "Time:(%d / %d)\n\r",
                      (int)RTC2US( SYSTEM_FREQUENCY * 1.0, total_time ), gpt_ticks );
  201558:	1e58      	subs	r0, r3, #1
  20155a:	f7ff f811 	bl	200580 <__aeabi_ui2d>
  20155e:	a31e      	add	r3, pc, #120	; (adr r3, 2015d8 <main+0x858>)
  201560:	e9d3 2300 	ldrd	r2, r3, [r3]
  201564:	f7ff f9ac 	bl	2008c0 <__aeabi_ddiv>
  201568:	2200      	movs	r2, #0
  20156a:	4b1e      	ldr	r3, [pc, #120]	; (2015e4 <main+0x864>)
  20156c:	f7fe fecc 	bl	200308 <__adddf3>
    chprintf( (BaseSequentialStream *)&SD7, "Time:(%d / %d)\n\r",
  201570:	f7ff fa8e 	bl	200a90 <__aeabi_d2iz>
  201574:	464b      	mov	r3, r9
  201576:	4602      	mov	r2, r0
  201578:	491b      	ldr	r1, [pc, #108]	; (2015e8 <main+0x868>)
  20157a:	481c      	ldr	r0, [pc, #112]	; (2015ec <main+0x86c>)
  20157c:	f000 fe80 	bl	202280 <chprintf.constprop.1>
  201580:	2320      	movs	r3, #32
  201582:	f383 8811 	msr	BASEPRI, r3
  201586:	211e      	movs	r1, #30
  201588:	2008      	movs	r0, #8
  20158a:	f000 fb09 	bl	201ba0 <chSchGoSleepTimeoutS>
  20158e:	2300      	movs	r3, #0
  201590:	f383 8811 	msr	BASEPRI, r3
  201594:	2101      	movs	r1, #1
  201596:	e749      	b.n	20142c <main+0x6ac>
  tp->state = CH_STATE_READY;
  201598:	f882 0020 	strb.w	r0, [r2, #32]
  20159c:	e7fe      	b.n	20159c <main+0x81c>
      rccEnableTIM1(FALSE);
  20159e:	4a14      	ldr	r2, [pc, #80]	; (2015f0 <main+0x870>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2015a0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2015a4:	4913      	ldr	r1, [pc, #76]	; (2015f4 <main+0x874>)
  2015a6:	f04f 0e70 	mov.w	lr, #112	; 0x70
  2015aa:	6c50      	ldr	r0, [r2, #68]	; 0x44
      gptp->clock = STM32_TIMCLK2;
  2015ac:	f640 036f 	movw	r3, #2159	; 0x86f
  2015b0:	f8df c048 	ldr.w	ip, [pc, #72]	; 2015fc <main+0x87c>
      rccEnableTIM1(FALSE);
  2015b4:	f040 0001 	orr.w	r0, r0, #1
  2015b8:	6450      	str	r0, [r2, #68]	; 0x44
      rccResetTIM1();
  2015ba:	6a50      	ldr	r0, [r2, #36]	; 0x24
      gptp->clock = STM32_TIMCLK2;
  2015bc:	f8c4 c008 	str.w	ip, [r4, #8]
      rccResetTIM1();
  2015c0:	f040 0001 	orr.w	r0, r0, #1
  2015c4:	6250      	str	r0, [r2, #36]	; 0x24
  2015c6:	6255      	str	r5, [r2, #36]	; 0x24
  2015c8:	f881 e319 	strb.w	lr, [r1, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2015cc:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2015d0:	600e      	str	r6, [r1, #0]
  2015d2:	e71b      	b.n	20140c <main+0x68c>
  2015d4:	f3af 8000 	nop.w
  2015d8:	9999999a 	.word	0x9999999a
  2015dc:	3fb99999 	.word	0x3fb99999
  2015e0:	20000a64 	.word	0x20000a64
  2015e4:	3ff00000 	.word	0x3ff00000
  2015e8:	080027c4 	.word	0x080027c4
  2015ec:	20000a58 	.word	0x20000a58
  2015f0:	40023800 	.word	0x40023800
  2015f4:	e000e100 	.word	0xe000e100
  2015f8:	20000ab8 	.word	0x20000ab8
  2015fc:	0cdfe600 	.word	0x0cdfe600

00201600 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  201600:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201602:	4b33      	ldr	r3, [pc, #204]	; (2016d0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201604:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  201608:	4a32      	ldr	r2, [pc, #200]	; (2016d4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20160a:	4c33      	ldr	r4, [pc, #204]	; (2016d8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20160c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20160e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  201610:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201612:	681a      	ldr	r2, [r3, #0]
  201614:	f042 0201 	orr.w	r2, r2, #1
  201618:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20161a:	680b      	ldr	r3, [r1, #0]
  20161c:	079b      	lsls	r3, r3, #30
  20161e:	d5fc      	bpl.n	20161a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201620:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201622:	4a2b      	ldr	r2, [pc, #172]	; (2016d0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201624:	f023 0303 	bic.w	r3, r3, #3
  201628:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20162a:	688b      	ldr	r3, [r1, #8]
  20162c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20162e:	6893      	ldr	r3, [r2, #8]
  201630:	f013 030c 	ands.w	r3, r3, #12
  201634:	d1fb      	bne.n	20162e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201636:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201638:	4925      	ldr	r1, [pc, #148]	; (2016d0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  20163a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  20163e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201640:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201642:	6813      	ldr	r3, [r2, #0]
  201644:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201648:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  20164a:	680b      	ldr	r3, [r1, #0]
  20164c:	039d      	lsls	r5, r3, #14
  20164e:	d5fc      	bpl.n	20164a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201650:	4b22      	ldr	r3, [pc, #136]	; (2016dc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201652:	4820      	ldr	r0, [pc, #128]	; (2016d4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201654:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201656:	680b      	ldr	r3, [r1, #0]
  201658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20165c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20165e:	6843      	ldr	r3, [r0, #4]
  201660:	045c      	lsls	r4, r3, #17
  201662:	d5fc      	bpl.n	20165e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201664:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201666:	4a1b      	ldr	r2, [pc, #108]	; (2016d4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20166c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20166e:	6853      	ldr	r3, [r2, #4]
  201670:	03d9      	lsls	r1, r3, #15
  201672:	d5fc      	bpl.n	20166e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201674:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201676:	4917      	ldr	r1, [pc, #92]	; (2016d4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20167c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20167e:	684b      	ldr	r3, [r1, #4]
  201680:	039a      	lsls	r2, r3, #14
  201682:	d5fc      	bpl.n	20167e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201684:	4a12      	ldr	r2, [pc, #72]	; (2016d0 <__early_init+0xd0>)
  201686:	6813      	ldr	r3, [r2, #0]
  201688:	019b      	lsls	r3, r3, #6
  20168a:	d5fc      	bpl.n	201686 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20168c:	4b14      	ldr	r3, [pc, #80]	; (2016e0 <__early_init+0xe0>)
  20168e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201692:	4d14      	ldr	r5, [pc, #80]	; (2016e4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201694:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201698:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20169a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20169c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  2016a0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  2016a4:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  2016a6:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  2016a8:	4909      	ldr	r1, [pc, #36]	; (2016d0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  2016aa:	f043 0302 	orr.w	r3, r3, #2
  2016ae:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  2016b0:	688b      	ldr	r3, [r1, #8]
  2016b2:	f003 030c 	and.w	r3, r3, #12
  2016b6:	2b08      	cmp	r3, #8
  2016b8:	d1fa      	bne.n	2016b0 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  2016ba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  2016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2016c0:	644b      	str	r3, [r1, #68]	; 0x44
  2016c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  2016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  2016c8:	bc30      	pop	{r4, r5}
  2016ca:	664b      	str	r3, [r1, #100]	; 0x64
  2016cc:	4770      	bx	lr
  2016ce:	bf00      	nop
  2016d0:	40023800 	.word	0x40023800
  2016d4:	40007000 	.word	0x40007000
  2016d8:	10000400 	.word	0x10000400
  2016dc:	09406c08 	.word	0x09406c08
  2016e0:	40023c00 	.word	0x40023c00
  2016e4:	30999400 	.word	0x30999400
	...

002016f0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  2016f0:	b480      	push	{r7}
  2016f2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2016f4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  2016f8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2016fa:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2016fe:	2300      	movs	r3, #0
  201700:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  201704:	46bd      	mov	sp, r7
  201706:	bc80      	pop	{r7}
  201708:	4770      	bx	lr
  20170a:	bf00      	nop
  20170c:	0000      	movs	r0, r0
	...

00201710 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  201710:	b470      	push	{r4, r5, r6}
  201712:	2320      	movs	r3, #32
  201714:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201718:	4e0d      	ldr	r6, [pc, #52]	; (201750 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20171a:	1e4a      	subs	r2, r1, #1
  20171c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20171e:	4c0d      	ldr	r4, [pc, #52]	; (201754 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201720:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  201722:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  201724:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201726:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  201728:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20172a:	1858      	adds	r0, r3, r1
  20172c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20172e:	1a23      	subs	r3, r4, r0
  201730:	429a      	cmp	r2, r3
  201732:	d806      	bhi.n	201742 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  201734:	4402      	add	r2, r0
  201736:	2300      	movs	r3, #0
  201738:	6032      	str	r2, [r6, #0]
  20173a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20173e:	bc70      	pop	{r4, r5, r6}
  201740:	4770      	bx	lr
    return NULL;
  201742:	2000      	movs	r0, #0
  201744:	2300      	movs	r3, #0
  201746:	f383 8811 	msr	BASEPRI, r3
}
  20174a:	bc70      	pop	{r4, r5, r6}
  20174c:	4770      	bx	lr
  20174e:	bf00      	nop
  201750:	20000a34 	.word	0x20000a34
  201754:	20000a30 	.word	0x20000a30
	...

00201760 <wakeup>:
  201760:	2320      	movs	r3, #32
  201762:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  201766:	f890 3020 	ldrb.w	r3, [r0, #32]
  20176a:	2b07      	cmp	r3, #7
  20176c:	d80e      	bhi.n	20178c <wakeup+0x2c>
  20176e:	e8df f003 	tbb	[pc, r3]
  201772:	0d28      	.short	0x0d28
  201774:	0408240d 	.word	0x0408240d
  201778:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20177a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20177c:	6893      	ldr	r3, [r2, #8]
  20177e:	3301      	adds	r3, #1
  201780:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201782:	e890 000c 	ldmia.w	r0, {r2, r3}
  201786:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201788:	6802      	ldr	r2, [r0, #0]
  20178a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20178c:	2200      	movs	r2, #0
  20178e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201790:	4b0e      	ldr	r3, [pc, #56]	; (2017cc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201792:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201796:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201798:	f04f 34ff 	mov.w	r4, #4294967295
  20179c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20179e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2017a0:	689a      	ldr	r2, [r3, #8]
  2017a2:	428a      	cmp	r2, r1
  2017a4:	d2fb      	bcs.n	20179e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  2017a6:	685a      	ldr	r2, [r3, #4]
  2017a8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  2017aa:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  2017ac:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  2017ae:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2017b0:	6058      	str	r0, [r3, #4]
  2017b2:	f381 8811 	msr	BASEPRI, r1
}
  2017b6:	bc10      	pop	{r4}
  2017b8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2017ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2017bc:	2200      	movs	r2, #0
  2017be:	601a      	str	r2, [r3, #0]
  2017c0:	e7e4      	b.n	20178c <wakeup+0x2c>
  2017c2:	2300      	movs	r3, #0
  2017c4:	f383 8811 	msr	BASEPRI, r3
  2017c8:	4770      	bx	lr
  2017ca:	bf00      	nop
  2017cc:	20000844 	.word	0x20000844

002017d0 <_idle_thread.lto_priv.41>:
static void _idle_thread(void *p) {
  2017d0:	e7fe      	b.n	2017d0 <_idle_thread.lto_priv.41>
  2017d2:	bf00      	nop
	...

002017e0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2017e0:	4b08      	ldr	r3, [pc, #32]	; (201804 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2017e2:	681a      	ldr	r2, [r3, #0]
  2017e4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2017e6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2017e8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2017ec:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2017ee:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2017f0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2017f2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2017f4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2017f6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2017fa:	619a      	str	r2, [r3, #24]
}
  2017fc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2017fe:	f7fe bd69 	b.w	2002d4 <_port_switch>
  201802:	bf00      	nop
  201804:	20000844 	.word	0x20000844
	...

00201810 <_port_irq_epilogue>:
  201810:	2320      	movs	r3, #32
  201812:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201816:	4b11      	ldr	r3, [pc, #68]	; (20185c <_port_irq_epilogue+0x4c>)
  201818:	685b      	ldr	r3, [r3, #4]
  20181a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20181e:	d102      	bne.n	201826 <_port_irq_epilogue+0x16>
  201820:	f383 8811 	msr	BASEPRI, r3
  201824:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201826:	b480      	push	{r7}
  201828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20182a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20182e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201832:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201836:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20183a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20183e:	4a08      	ldr	r2, [pc, #32]	; (201860 <_port_irq_epilogue+0x50>)
  201840:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201842:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201844:	6889      	ldr	r1, [r1, #8]
  201846:	6892      	ldr	r2, [r2, #8]
  201848:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20184a:	bf8c      	ite	hi
  20184c:	4a05      	ldrhi	r2, [pc, #20]	; (201864 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20184e:	4a06      	ldrls	r2, [pc, #24]	; (201868 <_port_irq_epilogue+0x58>)
  201850:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201854:	46bd      	mov	sp, r7
  201856:	bc80      	pop	{r7}
  201858:	4770      	bx	lr
  20185a:	bf00      	nop
  20185c:	e000ed00 	.word	0xe000ed00
  201860:	20000844 	.word	0x20000844
  201864:	002002f5 	.word	0x002002f5
  201868:	002002f8 	.word	0x002002f8
  20186c:	00000000 	.word	0x00000000

00201870 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201870:	4b08      	ldr	r3, [pc, #32]	; (201894 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  201872:	4809      	ldr	r0, [pc, #36]	; (201898 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201874:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  201876:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201878:	0989      	lsrs	r1, r1, #6
  20187a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20187e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  201880:	018c      	lsls	r4, r1, #6
  201882:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  201884:	b10a      	cbz	r2, 20188a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  201886:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  201888:	4790      	blx	r2
}
  20188a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20188e:	f7ff bfbf 	b.w	201810 <_port_irq_epilogue>
  201892:	bf00      	nop
  201894:	40026400 	.word	0x40026400
  201898:	200009b0 	.word	0x200009b0
  20189c:	00000000 	.word	0x00000000

002018a0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  2018a0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2018a2:	4b07      	ldr	r3, [pc, #28]	; (2018c0 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  2018a4:	4807      	ldr	r0, [pc, #28]	; (2018c4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2018a6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  2018a8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2018aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  2018ae:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  2018b0:	b10a      	cbz	r2, 2018b6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  2018b2:	6e40      	ldr	r0, [r0, #100]	; 0x64
  2018b4:	4790      	blx	r2
}
  2018b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2018ba:	f7ff bfa9 	b.w	201810 <_port_irq_epilogue>
  2018be:	bf00      	nop
  2018c0:	40026400 	.word	0x40026400
  2018c4:	200009b0 	.word	0x200009b0
	...

002018d0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2018d0:	4b08      	ldr	r3, [pc, #32]	; (2018f4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  2018d2:	4809      	ldr	r0, [pc, #36]	; (2018f8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2018d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  2018d6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2018d8:	0d89      	lsrs	r1, r1, #22
  2018da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  2018de:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  2018e0:	058c      	lsls	r4, r1, #22
  2018e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  2018e4:	b10a      	cbz	r2, 2018ea <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  2018e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  2018e8:	4790      	blx	r2
}
  2018ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2018ee:	f7ff bf8f 	b.w	201810 <_port_irq_epilogue>
  2018f2:	bf00      	nop
  2018f4:	40026400 	.word	0x40026400
  2018f8:	200009b0 	.word	0x200009b0
  2018fc:	00000000 	.word	0x00000000

00201900 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201900:	4b08      	ldr	r3, [pc, #32]	; (201924 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  201902:	4809      	ldr	r0, [pc, #36]	; (201928 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201904:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  201906:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201908:	0c09      	lsrs	r1, r1, #16
  20190a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  20190e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  201910:	040c      	lsls	r4, r1, #16
  201912:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  201914:	b10a      	cbz	r2, 20191a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  201916:	6d40      	ldr	r0, [r0, #84]	; 0x54
  201918:	4790      	blx	r2
}
  20191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20191e:	f7ff bf77 	b.w	201810 <_port_irq_epilogue>
  201922:	bf00      	nop
  201924:	40026400 	.word	0x40026400
  201928:	200009b0 	.word	0x200009b0
  20192c:	00000000 	.word	0x00000000

00201930 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201930:	4b08      	ldr	r3, [pc, #32]	; (201954 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  201932:	4809      	ldr	r0, [pc, #36]	; (201958 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201934:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  201936:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201938:	0989      	lsrs	r1, r1, #6
  20193a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20193e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  201940:	018c      	lsls	r4, r1, #6
  201942:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  201944:	b10a      	cbz	r2, 20194a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  201946:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  201948:	4790      	blx	r2
}
  20194a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20194e:	f7ff bf5f 	b.w	201810 <_port_irq_epilogue>
  201952:	bf00      	nop
  201954:	40026400 	.word	0x40026400
  201958:	200009b0 	.word	0x200009b0
  20195c:	00000000 	.word	0x00000000

00201960 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  201960:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201962:	4b07      	ldr	r3, [pc, #28]	; (201980 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  201964:	4807      	ldr	r0, [pc, #28]	; (201984 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201966:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  201968:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20196a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20196e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  201970:	b10a      	cbz	r2, 201976 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  201972:	6c40      	ldr	r0, [r0, #68]	; 0x44
  201974:	4790      	blx	r2
}
  201976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20197a:	f7ff bf49 	b.w	201810 <_port_irq_epilogue>
  20197e:	bf00      	nop
  201980:	40026400 	.word	0x40026400
  201984:	200009b0 	.word	0x200009b0
	...

00201990 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201990:	4b08      	ldr	r3, [pc, #32]	; (2019b4 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  201992:	4809      	ldr	r0, [pc, #36]	; (2019b8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201994:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  201996:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201998:	0d89      	lsrs	r1, r1, #22
  20199a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20199e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  2019a0:	058c      	lsls	r4, r1, #22
  2019a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  2019a4:	b10a      	cbz	r2, 2019aa <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  2019a6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  2019a8:	4790      	blx	r2
}
  2019aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2019ae:	f7ff bf2f 	b.w	201810 <_port_irq_epilogue>
  2019b2:	bf00      	nop
  2019b4:	40026000 	.word	0x40026000
  2019b8:	200009b0 	.word	0x200009b0
  2019bc:	00000000 	.word	0x00000000

002019c0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2019c0:	4b08      	ldr	r3, [pc, #32]	; (2019e4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  2019c2:	4809      	ldr	r0, [pc, #36]	; (2019e8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2019c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  2019c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2019c8:	0c09      	lsrs	r1, r1, #16
  2019ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  2019ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  2019d0:	040c      	lsls	r4, r1, #16
  2019d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  2019d4:	b10a      	cbz	r2, 2019da <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  2019d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  2019d8:	4790      	blx	r2
}
  2019da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2019de:	f7ff bf17 	b.w	201810 <_port_irq_epilogue>
  2019e2:	bf00      	nop
  2019e4:	40026000 	.word	0x40026000
  2019e8:	200009b0 	.word	0x200009b0
  2019ec:	00000000 	.word	0x00000000

002019f0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2019f0:	4b08      	ldr	r3, [pc, #32]	; (201a14 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2019f2:	4809      	ldr	r0, [pc, #36]	; (201a18 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2019f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2019f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2019f8:	0989      	lsrs	r1, r1, #6
  2019fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2019fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  201a00:	018c      	lsls	r4, r1, #6
  201a02:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  201a04:	b10a      	cbz	r2, 201a0a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  201a06:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  201a08:	4790      	blx	r2
}
  201a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201a0e:	f7ff beff 	b.w	201810 <_port_irq_epilogue>
  201a12:	bf00      	nop
  201a14:	40026000 	.word	0x40026000
  201a18:	200009b0 	.word	0x200009b0
  201a1c:	00000000 	.word	0x00000000

00201a20 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  201a20:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201a22:	4b07      	ldr	r3, [pc, #28]	; (201a40 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  201a24:	4807      	ldr	r0, [pc, #28]	; (201a44 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201a26:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  201a28:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201a2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  201a2e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  201a30:	b10a      	cbz	r2, 201a36 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  201a32:	6a40      	ldr	r0, [r0, #36]	; 0x24
  201a34:	4790      	blx	r2
}
  201a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201a3a:	f7ff bee9 	b.w	201810 <_port_irq_epilogue>
  201a3e:	bf00      	nop
  201a40:	40026000 	.word	0x40026000
  201a44:	200009b0 	.word	0x200009b0
	...

00201a50 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201a50:	4b08      	ldr	r3, [pc, #32]	; (201a74 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  201a52:	4809      	ldr	r0, [pc, #36]	; (201a78 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201a54:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  201a56:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201a58:	0d89      	lsrs	r1, r1, #22
  201a5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  201a5e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  201a60:	058c      	lsls	r4, r1, #22
  201a62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  201a64:	b10a      	cbz	r2, 201a6a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  201a66:	69c0      	ldr	r0, [r0, #28]
  201a68:	4790      	blx	r2
}
  201a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201a6e:	f7ff becf 	b.w	201810 <_port_irq_epilogue>
  201a72:	bf00      	nop
  201a74:	40026000 	.word	0x40026000
  201a78:	200009b0 	.word	0x200009b0
  201a7c:	00000000 	.word	0x00000000

00201a80 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201a80:	4b08      	ldr	r3, [pc, #32]	; (201aa4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  201a82:	4809      	ldr	r0, [pc, #36]	; (201aa8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201a84:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  201a86:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201a88:	0c09      	lsrs	r1, r1, #16
  201a8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  201a8e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  201a90:	040c      	lsls	r4, r1, #16
  201a92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  201a94:	b10a      	cbz	r2, 201a9a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  201a96:	6940      	ldr	r0, [r0, #20]
  201a98:	4790      	blx	r2
}
  201a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201a9e:	f7ff beb7 	b.w	201810 <_port_irq_epilogue>
  201aa2:	bf00      	nop
  201aa4:	40026000 	.word	0x40026000
  201aa8:	200009b0 	.word	0x200009b0
  201aac:	00000000 	.word	0x00000000

00201ab0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201ab0:	4b08      	ldr	r3, [pc, #32]	; (201ad4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  201ab2:	4809      	ldr	r0, [pc, #36]	; (201ad8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201ab4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  201ab6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201ab8:	0989      	lsrs	r1, r1, #6
  201aba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  201abe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  201ac0:	018c      	lsls	r4, r1, #6
  201ac2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  201ac4:	b10a      	cbz	r2, 201aca <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  201ac6:	68c0      	ldr	r0, [r0, #12]
  201ac8:	4790      	blx	r2
}
  201aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201ace:	f7ff be9f 	b.w	201810 <_port_irq_epilogue>
  201ad2:	bf00      	nop
  201ad4:	40026000 	.word	0x40026000
  201ad8:	200009b0 	.word	0x200009b0
  201adc:	00000000 	.word	0x00000000

00201ae0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  201ae0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201ae2:	4b07      	ldr	r3, [pc, #28]	; (201b00 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  201ae4:	4a07      	ldr	r2, [pc, #28]	; (201b04 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201ae6:	6819      	ldr	r1, [r3, #0]
  201ae8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  201aec:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  201aee:	6813      	ldr	r3, [r2, #0]
  201af0:	b10b      	cbz	r3, 201af6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  201af2:	6850      	ldr	r0, [r2, #4]
  201af4:	4798      	blx	r3
}
  201af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201afa:	f7ff be89 	b.w	201810 <_port_irq_epilogue>
  201afe:	bf00      	nop
  201b00:	40026000 	.word	0x40026000
  201b04:	200009b0 	.word	0x200009b0
	...

00201b10 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201b10:	4b0e      	ldr	r3, [pc, #56]	; (201b4c <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  201b12:	6882      	ldr	r2, [r0, #8]
  201b14:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201b16:	490e      	ldr	r1, [pc, #56]	; (201b50 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201b18:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  201b1a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  201b1c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201b1e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  201b20:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201b22:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201b24:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201b26:	6083      	str	r3, [r0, #8]
  tmp->n++;
  201b28:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  201b2a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  201b2e:	18e4      	adds	r4, r4, r3
  201b30:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201b34:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201b36:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201b38:	bf88      	it	hi
  201b3a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  201b3c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  201b3e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201b42:	bf38      	it	cc
  201b44:	6003      	strcc	r3, [r0, #0]
}
  201b46:	bc30      	pop	{r4, r5}
  201b48:	4770      	bx	lr
  201b4a:	bf00      	nop
  201b4c:	e0001000 	.word	0xe0001000
  201b50:	20000844 	.word	0x20000844
	...

00201b60 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  201b60:	4a0e      	ldr	r2, [pc, #56]	; (201b9c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201b62:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201b64:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  201b66:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201b68:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  201b6a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  201b6c:	6994      	ldr	r4, [r2, #24]
  201b6e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201b70:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201b72:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201b76:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  201b7a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  201b7c:	6190      	str	r0, [r2, #24]
  201b7e:	e000      	b.n	201b82 <chSchDoReschedule+0x22>
  201b80:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201b82:	689a      	ldr	r2, [r3, #8]
  201b84:	4291      	cmp	r1, r2
  201b86:	d3fb      	bcc.n	201b80 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201b88:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  201b8a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  201b8c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  201b8e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201b90:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201b92:	605c      	str	r4, [r3, #4]
}
  201b94:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201b96:	f7fe bb9d 	b.w	2002d4 <_port_switch>
  201b9a:	bf00      	nop
  201b9c:	20000844 	.word	0x20000844

00201ba0 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201ba4:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
  201ba8:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  201baa:	d031      	beq.n	201c10 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  201bac:	4c1c      	ldr	r4, [pc, #112]	; (201c20 <chSchGoSleepTimeoutS+0x80>)
  201bae:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201bb0:	481c      	ldr	r0, [pc, #112]	; (201c24 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201bb2:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201bb4:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201bb6:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201bb8:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  201bba:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  201bbc:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  201bbe:	d905      	bls.n	201bcc <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201bc0:	1a89      	subs	r1, r1, r2
    p = p->next;
  201bc2:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201bc4:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201bc6:	891a      	ldrh	r2, [r3, #8]
  201bc8:	428a      	cmp	r2, r1
  201bca:	d3f9      	bcc.n	201bc0 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  201bcc:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  201bce:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201bd0:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201bd2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201bd6:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201bd8:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  201bda:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  201bdc:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  201bde:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201be2:	891a      	ldrh	r2, [r3, #8]
  201be4:	1a51      	subs	r1, r2, r1
  201be6:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201be8:	84a6      	strh	r6, [r4, #36]	; 0x24
  201bea:	f7ff fdf9 	bl	2017e0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  201bee:	9b04      	ldr	r3, [sp, #16]
  201bf0:	b153      	cbz	r3, 201c08 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201bf2:	9b01      	ldr	r3, [sp, #4]
  201bf4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201bf8:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  201bfa:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  201bfc:	4402      	add	r2, r0
  201bfe:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201c00:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201c02:	9b01      	ldr	r3, [sp, #4]
  201c04:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201c06:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201c08:	69a3      	ldr	r3, [r4, #24]
}
  201c0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201c0c:	b007      	add	sp, #28
  201c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201c10:	4c03      	ldr	r4, [pc, #12]	; (201c20 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201c12:	f7ff fde5 	bl	2017e0 <chSchGoSleepS>
  return currp->u.rdymsg;
  201c16:	69a3      	ldr	r3, [r4, #24]
}
  201c18:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201c1a:	b007      	add	sp, #28
  201c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201c1e:	bf00      	nop
  201c20:	20000844 	.word	0x20000844
  201c24:	00201761 	.word	0x00201761
	...

00201c30 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201c30:	b161      	cbz	r1, 201c4c <chThdEnqueueTimeoutS+0x1c>
  201c32:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201c34:	4b07      	ldr	r3, [pc, #28]	; (201c54 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201c36:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201c38:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  201c3a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  201c3c:	6854      	ldr	r4, [r2, #4]
  201c3e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201c42:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201c44:	6053      	str	r3, [r2, #4]
}
  201c46:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201c48:	f7ff bfaa 	b.w	201ba0 <chSchGoSleepTimeoutS>
}
  201c4c:	f04f 30ff 	mov.w	r0, #4294967295
  201c50:	4770      	bx	lr
  201c52:	bf00      	nop
  201c54:	20000844 	.word	0x20000844
	...

00201c60 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201c64:	4699      	mov	r9, r3
  201c66:	b083      	sub	sp, #12
  201c68:	4604      	mov	r4, r0
  201c6a:	460e      	mov	r6, r1
  201c6c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  201c6e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201c72:	2320      	movs	r3, #32
  201c74:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201c78:	4b26      	ldr	r3, [pc, #152]	; (201d14 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201c7a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  201c7e:	2700      	movs	r7, #0
  201c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201c82:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201c86:	fa19 f383 	uxtah	r3, r9, r3
  201c8a:	b29b      	uxth	r3, r3
  201c8c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  201c8e:	68a3      	ldr	r3, [r4, #8]
  201c90:	b313      	cbz	r3, 201cd8 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201c92:	6961      	ldr	r1, [r4, #20]
  201c94:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201c98:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201c9a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  201c9c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  201c9e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201ca0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201ca2:	7833      	ldrb	r3, [r6, #0]
  201ca4:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201ca6:	6961      	ldr	r1, [r4, #20]
  201ca8:	6923      	ldr	r3, [r4, #16]
  201caa:	4299      	cmp	r1, r3
  201cac:	d301      	bcc.n	201cb2 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  201cae:	68e3      	ldr	r3, [r4, #12]
  201cb0:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201cb2:	f1b8 0f00 	cmp.w	r8, #0
  201cb6:	d001      	beq.n	201cbc <oqWriteTimeout+0x5c>
      nfy(oqp);
  201cb8:	4620      	mov	r0, r4
  201cba:	47c0      	blx	r8
  201cbc:	2300      	movs	r3, #0
  201cbe:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201cc2:	3d01      	subs	r5, #1
    w++;
  201cc4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201cc8:	d019      	beq.n	201cfe <oqWriteTimeout+0x9e>
  201cca:	2320      	movs	r3, #32
  201ccc:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201cd0:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201cd2:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201cd4:	2b00      	cmp	r3, #0
  201cd6:	d1dc      	bne.n	201c92 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201cd8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201cdc:	4592      	cmp	sl, r2
  201cde:	d812      	bhi.n	201d06 <oqWriteTimeout+0xa6>
  201ce0:	4a0c      	ldr	r2, [pc, #48]	; (201d14 <oqWriteTimeout+0xb4>)
  201ce2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201ce4:	9a01      	ldr	r2, [sp, #4]
  201ce6:	1a51      	subs	r1, r2, r1
  201ce8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201cea:	4589      	cmp	r9, r1
  201cec:	d305      	bcc.n	201cfa <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  201cee:	4620      	mov	r0, r4
  201cf0:	f7ff ff9e 	bl	201c30 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201cf4:	2800      	cmp	r0, #0
  201cf6:	d0ca      	beq.n	201c8e <oqWriteTimeout+0x2e>
  201cf8:	2300      	movs	r3, #0
  201cfa:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  201cfe:	4638      	mov	r0, r7
  201d00:	b003      	add	sp, #12
  201d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201d06:	4649      	mov	r1, r9
  201d08:	4620      	mov	r0, r4
  201d0a:	f7ff ff91 	bl	201c30 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201d0e:	2800      	cmp	r0, #0
  201d10:	d0bd      	beq.n	201c8e <oqWriteTimeout+0x2e>
  201d12:	e7f1      	b.n	201cf8 <oqWriteTimeout+0x98>
  201d14:	20000844 	.word	0x20000844
	...

00201d20 <_writet.lto_priv.39>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201d20:	3030      	adds	r0, #48	; 0x30
  201d22:	f7ff bf9d 	b.w	201c60 <oqWriteTimeout>
  201d26:	bf00      	nop
	...

00201d30 <_write.lto_priv.33>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201d30:	3030      	adds	r0, #48	; 0x30
  201d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201d36:	f7ff bf93 	b.w	201c60 <oqWriteTimeout>
  201d3a:	bf00      	nop
  201d3c:	0000      	movs	r0, r0
	...

00201d40 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201d42:	4604      	mov	r4, r0
  201d44:	460f      	mov	r7, r1
  201d46:	4616      	mov	r6, r2
  201d48:	2320      	movs	r3, #32
  201d4a:	f383 8811 	msr	BASEPRI, r3
  201d4e:	e003      	b.n	201d58 <oqPutTimeout+0x18>
  201d50:	f7ff ff6e 	bl	201c30 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201d54:	2800      	cmp	r0, #0
  201d56:	db19      	blt.n	201d8c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201d58:	68a5      	ldr	r5, [r4, #8]
  201d5a:	4631      	mov	r1, r6
  201d5c:	4620      	mov	r0, r4
  201d5e:	2d00      	cmp	r5, #0
  201d60:	d0f6      	beq.n	201d50 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201d62:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201d64:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201d66:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201d68:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  201d6a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  201d6c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201d6e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201d70:	6962      	ldr	r2, [r4, #20]
  201d72:	6923      	ldr	r3, [r4, #16]
  201d74:	429a      	cmp	r2, r3
  201d76:	d301      	bcc.n	201d7c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201d78:	68e3      	ldr	r3, [r4, #12]
  201d7a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  201d7c:	69e3      	ldr	r3, [r4, #28]
  201d7e:	b10b      	cbz	r3, 201d84 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201d80:	4620      	mov	r0, r4
  201d82:	4798      	blx	r3
  201d84:	2000      	movs	r0, #0
  201d86:	f380 8811 	msr	BASEPRI, r0
}
  201d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201d8c:	f385 8811 	msr	BASEPRI, r5
  201d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201d92:	bf00      	nop
	...

00201da0 <_putt.lto_priv.37>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201da0:	3030      	adds	r0, #48	; 0x30
  201da2:	f7ff bfcd 	b.w	201d40 <oqPutTimeout>
  201da6:	bf00      	nop
	...

00201db0 <_put.lto_priv.35>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201db0:	3030      	adds	r0, #48	; 0x30
  201db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201db6:	f7ff bfc3 	b.w	201d40 <oqPutTimeout>
  201dba:	bf00      	nop
  201dbc:	0000      	movs	r0, r0
	...

00201dc0 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201dc4:	4699      	mov	r9, r3
  201dc6:	b083      	sub	sp, #12
  201dc8:	4604      	mov	r4, r0
  201dca:	460e      	mov	r6, r1
  201dcc:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  201dce:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201dd2:	2320      	movs	r3, #32
  201dd4:	f383 8811 	msr	BASEPRI, r3
  201dd8:	4b26      	ldr	r3, [pc, #152]	; (201e74 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201dda:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  201dde:	2700      	movs	r7, #0
  201de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201de2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201de6:	fa19 f383 	uxtah	r3, r9, r3
  201dea:	b29b      	uxth	r3, r3
  201dec:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  201dee:	68a3      	ldr	r3, [r4, #8]
  201df0:	b313      	cbz	r3, 201e38 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201df2:	69a1      	ldr	r1, [r4, #24]
  201df4:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201df8:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201dfa:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  201dfc:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  201dfe:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201e00:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201e02:	780b      	ldrb	r3, [r1, #0]
  201e04:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201e06:	69a1      	ldr	r1, [r4, #24]
  201e08:	6923      	ldr	r3, [r4, #16]
  201e0a:	4299      	cmp	r1, r3
  201e0c:	d301      	bcc.n	201e12 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  201e0e:	68e3      	ldr	r3, [r4, #12]
  201e10:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  201e12:	f1b8 0f00 	cmp.w	r8, #0
  201e16:	d001      	beq.n	201e1c <iqReadTimeout+0x5c>
      nfy(iqp);
  201e18:	4620      	mov	r0, r4
  201e1a:	47c0      	blx	r8
  201e1c:	2300      	movs	r3, #0
  201e1e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  201e22:	3d01      	subs	r5, #1
    r++;
  201e24:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201e28:	d019      	beq.n	201e5e <iqReadTimeout+0x9e>
  201e2a:	2320      	movs	r3, #32
  201e2c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  201e30:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201e32:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  201e34:	2b00      	cmp	r3, #0
  201e36:	d1dc      	bne.n	201df2 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201e38:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201e3c:	4592      	cmp	sl, r2
  201e3e:	d812      	bhi.n	201e66 <iqReadTimeout+0xa6>
  201e40:	4a0c      	ldr	r2, [pc, #48]	; (201e74 <iqReadTimeout+0xb4>)
  201e42:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201e44:	9a01      	ldr	r2, [sp, #4]
  201e46:	1a51      	subs	r1, r2, r1
  201e48:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201e4a:	4589      	cmp	r9, r1
  201e4c:	d305      	bcc.n	201e5a <iqReadTimeout+0x9a>
  201e4e:	4620      	mov	r0, r4
  201e50:	f7ff feee 	bl	201c30 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201e54:	2800      	cmp	r0, #0
  201e56:	d0ca      	beq.n	201dee <iqReadTimeout+0x2e>
  201e58:	2300      	movs	r3, #0
  201e5a:	f383 8811 	msr	BASEPRI, r3
}
  201e5e:	4638      	mov	r0, r7
  201e60:	b003      	add	sp, #12
  201e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201e66:	4649      	mov	r1, r9
  201e68:	4620      	mov	r0, r4
  201e6a:	f7ff fee1 	bl	201c30 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201e6e:	2800      	cmp	r0, #0
  201e70:	d0bd      	beq.n	201dee <iqReadTimeout+0x2e>
  201e72:	e7f1      	b.n	201e58 <iqReadTimeout+0x98>
  201e74:	20000844 	.word	0x20000844
	...

00201e80 <_readt.lto_priv.40>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201e80:	300c      	adds	r0, #12
  201e82:	f7ff bf9d 	b.w	201dc0 <iqReadTimeout>
  201e86:	bf00      	nop
	...

00201e90 <_read.lto_priv.34>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201e90:	300c      	adds	r0, #12
  201e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201e96:	f7ff bf93 	b.w	201dc0 <iqReadTimeout>
  201e9a:	bf00      	nop
  201e9c:	0000      	movs	r0, r0
	...

00201ea0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201ea0:	b570      	push	{r4, r5, r6, lr}
  201ea2:	2320      	movs	r3, #32
  201ea4:	4604      	mov	r4, r0
  201ea6:	460e      	mov	r6, r1
  201ea8:	f383 8811 	msr	BASEPRI, r3
  201eac:	e003      	b.n	201eb6 <iqGetTimeout+0x16>
  201eae:	f7ff febf 	bl	201c30 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201eb2:	2800      	cmp	r0, #0
  201eb4:	db19      	blt.n	201eea <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201eb6:	68a5      	ldr	r5, [r4, #8]
  201eb8:	4631      	mov	r1, r6
  201eba:	4620      	mov	r0, r4
  201ebc:	2d00      	cmp	r5, #0
  201ebe:	d0f6      	beq.n	201eae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201ec0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201ec2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201ec4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201ec6:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201ec8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201eca:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201ecc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  201ece:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201ed0:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201ed2:	d301      	bcc.n	201ed8 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201ed4:	68e3      	ldr	r3, [r4, #12]
  201ed6:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201ed8:	69e3      	ldr	r3, [r4, #28]
  201eda:	b10b      	cbz	r3, 201ee0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201edc:	4620      	mov	r0, r4
  201ede:	4798      	blx	r3
  201ee0:	2300      	movs	r3, #0
  201ee2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201ee6:	4628      	mov	r0, r5
}
  201ee8:	bd70      	pop	{r4, r5, r6, pc}
  201eea:	f385 8811 	msr	BASEPRI, r5
  201eee:	bd70      	pop	{r4, r5, r6, pc}

00201ef0 <_gett.lto_priv.38>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201ef0:	300c      	adds	r0, #12
  201ef2:	f7ff bfd5 	b.w	201ea0 <iqGetTimeout>
  201ef6:	bf00      	nop
	...

00201f00 <_get.lto_priv.36>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201f00:	300c      	adds	r0, #12
  201f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201f06:	f7ff bfcb 	b.w	201ea0 <iqGetTimeout>
  201f0a:	bf00      	nop
  201f0c:	0000      	movs	r0, r0
	...

00201f10 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201f10:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201f12:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201f14:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201f16:	4b08      	ldr	r3, [pc, #32]	; (201f38 <chSchReadyI+0x28>)
  201f18:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  201f1a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  201f1e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201f20:	689a      	ldr	r2, [r3, #8]
  201f22:	428a      	cmp	r2, r1
  201f24:	d2fb      	bcs.n	201f1e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201f26:	685a      	ldr	r2, [r3, #4]
}
  201f28:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  201f2a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  201f2c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201f2e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201f30:	605c      	str	r4, [r3, #4]
}
  201f32:	bc10      	pop	{r4}
  201f34:	4770      	bx	lr
  201f36:	bf00      	nop
  201f38:	20000844 	.word	0x20000844
  201f3c:	00000000 	.word	0x00000000

00201f40 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
  201f42:	4b23      	ldr	r3, [pc, #140]	; (201fd0 <Vector88+0x90>)
  ADC1->SR = 0;
  201f44:	2100      	movs	r1, #0
  sr = ADC1->SR;
  201f46:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  201f48:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  201f4a:	0693      	lsls	r3, r2, #26
  201f4c:	d535      	bpl.n	201fba <Vector88+0x7a>
  201f4e:	4c21      	ldr	r4, [pc, #132]	; (201fd4 <Vector88+0x94>)
  201f50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201f52:	6802      	ldr	r2, [r0, #0]
  201f54:	6853      	ldr	r3, [r2, #4]
  201f56:	2b00      	cmp	r3, #0
  201f58:	d02f      	beq.n	201fba <Vector88+0x7a>
    if (ADCD1.grpp != NULL)
  201f5a:	6921      	ldr	r1, [r4, #16]
  201f5c:	b369      	cbz	r1, 201fba <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  201f5e:	6813      	ldr	r3, [r2, #0]
  201f60:	f023 031f 	bic.w	r3, r3, #31
  201f64:	6013      	str	r3, [r2, #0]
  201f66:	6813      	ldr	r3, [r2, #0]
  201f68:	f013 0301 	ands.w	r3, r3, #1
  201f6c:	d1fb      	bne.n	201f66 <Vector88+0x26>
  201f6e:	7a07      	ldrb	r7, [r0, #8]
  201f70:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201f72:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201f74:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201f76:	6846      	ldr	r6, [r0, #4]
  201f78:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  201f7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  201f7e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  201f80:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201f82:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201f84:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201f86:	b1fd      	cbz	r5, 201fc8 <Vector88+0x88>
  201f88:	2305      	movs	r3, #5
  201f8a:	4812      	ldr	r0, [pc, #72]	; (201fd4 <Vector88+0x94>)
  201f8c:	7023      	strb	r3, [r4, #0]
  201f8e:	47a8      	blx	r5
  201f90:	7823      	ldrb	r3, [r4, #0]
  201f92:	2b05      	cmp	r3, #5
  201f94:	d015      	beq.n	201fc2 <Vector88+0x82>
  201f96:	2300      	movs	r3, #0
  201f98:	6123      	str	r3, [r4, #16]
  201f9a:	2320      	movs	r3, #32
  201f9c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  201fa0:	6963      	ldr	r3, [r4, #20]
  201fa2:	b13b      	cbz	r3, 201fb4 <Vector88+0x74>
    tp->u.rdymsg = msg;
  201fa4:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  201fa8:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  201faa:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  201fac:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  201fae:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  201fb0:	f7ff ffae 	bl	201f10 <chSchReadyI>
  201fb4:	2300      	movs	r3, #0
  201fb6:	f383 8811 	msr	BASEPRI, r3
}
  201fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  201fbe:	f7ff bc27 	b.w	201810 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201fc2:	2302      	movs	r3, #2
  201fc4:	7023      	strb	r3, [r4, #0]
  201fc6:	e7e6      	b.n	201f96 <Vector88+0x56>
  201fc8:	2302      	movs	r3, #2
  201fca:	6125      	str	r5, [r4, #16]
  201fcc:	7023      	strb	r3, [r4, #0]
  201fce:	e7e4      	b.n	201f9a <Vector88+0x5a>
  201fd0:	40012000 	.word	0x40012000
  201fd4:	20000800 	.word	0x20000800
	...

00201fe0 <chThdExit>:
void chThdExit(msg_t msg) {
  201fe0:	b538      	push	{r3, r4, r5, lr}
  201fe2:	2220      	movs	r2, #32
  201fe4:	4603      	mov	r3, r0
  201fe6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  201fea:	4a10      	ldr	r2, [pc, #64]	; (20202c <chThdExit+0x4c>)
  201fec:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  201fee:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201ff2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201ff4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201ff6:	4285      	cmp	r5, r0
  201ff8:	d006      	beq.n	202008 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  201ffa:	6803      	ldr	r3, [r0, #0]
  201ffc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  201ffe:	f7ff ff87 	bl	201f10 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  202002:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  202004:	42a8      	cmp	r0, r5
  202006:	d1f8      	bne.n	201ffa <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  202008:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20200c:	b943      	cbnz	r3, 202020 <chThdExit+0x40>
  20200e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  202012:	079b      	lsls	r3, r3, #30
  202014:	d104      	bne.n	202020 <chThdExit+0x40>
    REG_REMOVE(tp);
  202016:	6922      	ldr	r2, [r4, #16]
  202018:	6963      	ldr	r3, [r4, #20]
  20201a:	611a      	str	r2, [r3, #16]
  20201c:	6922      	ldr	r2, [r4, #16]
  20201e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  202020:	200f      	movs	r0, #15
}
  202022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  202026:	f7ff bbdb 	b.w	2017e0 <chSchGoSleepS>
  20202a:	bf00      	nop
  20202c:	20000844 	.word	0x20000844

00202030 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  202030:	e7fe      	b.n	202030 <BusFault_Handler>
  202032:	bf00      	nop
	...

00202040 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  202040:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  202042:	4f12      	ldr	r7, [pc, #72]	; (20208c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  202044:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  202046:	4d12      	ldr	r5, [pc, #72]	; (202090 <__init_ram_areas+0x50>)
  202048:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20204c:	4c11      	ldr	r4, [pc, #68]	; (202094 <__init_ram_areas+0x54>)
  20204e:	4b12      	ldr	r3, [pc, #72]	; (202098 <__init_ram_areas+0x58>)
  202050:	4912      	ldr	r1, [pc, #72]	; (20209c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  202052:	429c      	cmp	r4, r3
  202054:	d911      	bls.n	20207a <__init_ram_areas+0x3a>
  202056:	3904      	subs	r1, #4
  202058:	461a      	mov	r2, r3
      *p = *tp;
  20205a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20205e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  202062:	4294      	cmp	r4, r2
  202064:	d8f9      	bhi.n	20205a <__init_ram_areas+0x1a>
  202066:	43da      	mvns	r2, r3
  202068:	4414      	add	r4, r2
  20206a:	f024 0403 	bic.w	r4, r4, #3
  20206e:	3404      	adds	r4, #4
  202070:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  202072:	429d      	cmp	r5, r3
  202074:	d903      	bls.n	20207e <__init_ram_areas+0x3e>
      *p = 0;
  202076:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20207a:	429d      	cmp	r5, r3
  20207c:	d8fb      	bhi.n	202076 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20207e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  202080:	4577      	cmp	r7, lr
  202082:	d202      	bcs.n	20208a <__init_ram_areas+0x4a>
  202084:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  202088:	e7e3      	b.n	202052 <__init_ram_areas+0x12>
  20208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20208c:	080027f8 	.word	0x080027f8
  202090:	20020000 	.word	0x20020000
  202094:	20020000 	.word	0x20020000
  202098:	20020000 	.word	0x20020000
  20209c:	08002880 	.word	0x08002880

002020a0 <__default_exit>:
void __default_exit(void) {
  2020a0:	e7fe      	b.n	2020a0 <__default_exit>
  2020a2:	bf00      	nop
	...

002020b0 <__late_init>:
void __late_init(void) {}
  2020b0:	4770      	bx	lr
  2020b2:	bf00      	nop
	...

002020c0 <__core_init>:
void __core_init(void) {
  2020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2020c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2020c6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2020ca:	4c1b      	ldr	r4, [pc, #108]	; (202138 <__core_init+0x78>)
  2020cc:	2200      	movs	r2, #0
  2020ce:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2020d2:	6963      	ldr	r3, [r4, #20]
  2020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2020d8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2020da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2020de:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2020e2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2020e6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2020ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2020ee:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2020f2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2020f6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2020fa:	07b7      	lsls	r7, r6, #30
  2020fc:	015d      	lsls	r5, r3, #5
  2020fe:	ea05 000e 	and.w	r0, r5, lr
  202102:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  202104:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  202106:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  20210a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20210c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  202110:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  202114:	1c53      	adds	r3, r2, #1
  202116:	d1f6      	bne.n	202106 <__core_init+0x46>
  202118:	3d20      	subs	r5, #32
    } while(sets--);
  20211a:	f115 0f20 	cmn.w	r5, #32
  20211e:	d1ee      	bne.n	2020fe <__core_init+0x3e>
  202120:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  202124:	6963      	ldr	r3, [r4, #20]
  202126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20212a:	6163      	str	r3, [r4, #20]
  20212c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  202130:	f3bf 8f6f 	isb	sy
  202134:	bdf0      	pop	{r4, r5, r6, r7, pc}
  202136:	bf00      	nop
  202138:	e000ed00 	.word	0xe000ed00
  20213c:	00000000 	.word	0x00000000

00202140 <GPT_Counter_CB.lto_priv.32>:
    gpt_ticks += TMR_TICKS_2_OVRFLOW;
  202140:	4a03      	ldr	r2, [pc, #12]	; (202150 <GPT_Counter_CB.lto_priv.32+0x10>)
  202142:	f24c 3350 	movw	r3, #50000	; 0xc350
  202146:	6811      	ldr	r1, [r2, #0]
  202148:	440b      	add	r3, r1
  20214a:	6013      	str	r3, [r2, #0]
  20214c:	4770      	bx	lr
  20214e:	bf00      	nop
  202150:	20000ab8 	.word	0x20000ab8
	...

00202160 <chTMStartMeasurementX.constprop.27>:
  202160:	4b01      	ldr	r3, [pc, #4]	; (202168 <chTMStartMeasurementX.constprop.27+0x8>)
  202162:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  202164:	6083      	str	r3, [r0, #8]
  202166:	4770      	bx	lr
  202168:	e0001000 	.word	0xe0001000
  20216c:	00000000 	.word	0x00000000

00202170 <chEvtBroadcastFlagsI.constprop.22>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  202170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  202172:	4f17      	ldr	r7, [pc, #92]	; (2021d0 <chEvtBroadcastFlagsI.constprop.22+0x60>)
  202174:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  202178:	42bc      	cmp	r4, r7
  20217a:	d021      	beq.n	2021c0 <chEvtBroadcastFlagsI.constprop.22+0x50>
  20217c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20217e:	2600      	movs	r6, #0
  202180:	e002      	b.n	202188 <chEvtBroadcastFlagsI.constprop.22+0x18>
    elp = elp->next;
  202182:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  202184:	42bc      	cmp	r4, r7
  202186:	d01b      	beq.n	2021c0 <chEvtBroadcastFlagsI.constprop.22+0x50>
    elp->flags |= flags;
  202188:	68e3      	ldr	r3, [r4, #12]
  20218a:	432b      	orrs	r3, r5
  20218c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  20218e:	b115      	cbz	r5, 202196 <chEvtBroadcastFlagsI.constprop.22+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  202190:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  202192:	4213      	tst	r3, r2
  202194:	d0f5      	beq.n	202182 <chEvtBroadcastFlagsI.constprop.22+0x12>
      chEvtSignalI(elp->listener, elp->events);
  202196:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  202198:	68a3      	ldr	r3, [r4, #8]
  20219a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20219c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2021a0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2021a2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2021a4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2021a6:	d00c      	beq.n	2021c2 <chEvtBroadcastFlagsI.constprop.22+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2021a8:	2a0b      	cmp	r2, #11
  2021aa:	d1ea      	bne.n	202182 <chEvtBroadcastFlagsI.constprop.22+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2021ac:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2021ae:	ea32 0303 	bics.w	r3, r2, r3
  2021b2:	d1e6      	bne.n	202182 <chEvtBroadcastFlagsI.constprop.22+0x12>
    tp->u.rdymsg = MSG_OK;
  2021b4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2021b6:	f7ff feab 	bl	201f10 <chSchReadyI>
    elp = elp->next;
  2021ba:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2021bc:	42bc      	cmp	r4, r7
  2021be:	d1e3      	bne.n	202188 <chEvtBroadcastFlagsI.constprop.22+0x18>
  2021c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2021c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  2021c4:	4213      	tst	r3, r2
  2021c6:	d0dc      	beq.n	202182 <chEvtBroadcastFlagsI.constprop.22+0x12>
    tp->u.rdymsg = MSG_OK;
  2021c8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2021ca:	f7ff fea1 	bl	201f10 <chSchReadyI>
  2021ce:	e7f4      	b.n	2021ba <chEvtBroadcastFlagsI.constprop.22+0x4a>
  2021d0:	20000a58 	.word	0x20000a58
	...

002021e0 <_pal_lld_setgroupmode.constprop.5>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  2021e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  2021e4:	2100      	movs	r1, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  2021e6:	2502      	movs	r5, #2
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  2021e8:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  2021ec:	f04f 0c0f 	mov.w	ip, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2021f0:	4c1f      	ldr	r4, [pc, #124]	; (202270 <_pal_lld_setgroupmode.constprop.5+0x90>)
      m1 = 1 << bit;
  2021f2:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  2021f6:	2703      	movs	r7, #3
  2021f8:	e00f      	b.n	20221a <_pal_lld_setgroupmode.constprop.5+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2021fa:	6a26      	ldr	r6, [r4, #32]
  2021fc:	ea26 0202 	bic.w	r2, r6, r2
  202200:	ea42 0209 	orr.w	r2, r2, r9
  202204:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  202206:	6822      	ldr	r2, [r4, #0]
  202208:	4013      	ands	r3, r2
  20220a:	432b      	orrs	r3, r5
  20220c:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20220e:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  202210:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  202214:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  202218:	d027      	beq.n	20226a <_pal_lld_setgroupmode.constprop.5+0x8a>
      m2 = 3 << (bit * 2);
  20221a:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  20221c:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  202220:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  202224:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  202228:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20222c:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  202230:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  202234:	d0eb      	beq.n	20220e <_pal_lld_setgroupmode.constprop.5+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  202236:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  20223a:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  20223c:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  202240:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  202244:	ea2a 0606 	bic.w	r6, sl, r6
  202248:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20224a:	68a6      	ldr	r6, [r4, #8]
  20224c:	ea06 0603 	and.w	r6, r6, r3
  202250:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  202252:	68e6      	ldr	r6, [r4, #12]
  202254:	ea06 0603 	and.w	r6, r6, r3
  202258:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  20225a:	d9ce      	bls.n	2021fa <_pal_lld_setgroupmode.constprop.5+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20225c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  20225e:	ea26 0202 	bic.w	r2, r6, r2
  202262:	ea42 0209 	orr.w	r2, r2, r9
  202266:	6262      	str	r2, [r4, #36]	; 0x24
  202268:	e7cd      	b.n	202206 <_pal_lld_setgroupmode.constprop.5+0x26>
  }
}
  20226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20226e:	bf00      	nop
  202270:	40021000 	.word	0x40021000
	...

00202280 <chprintf.constprop.1>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  202280:	b40e      	push	{r1, r2, r3}
  202282:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202286:	b086      	sub	sp, #24
  int n = 0;
  202288:	2300      	movs	r3, #0
    c = *fmt++;
  20228a:	f04f 0954 	mov.w	r9, #84	; 0x54
  20228e:	f8df a280 	ldr.w	sl, [pc, #640]	; 202510 <chprintf.constprop.1+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  202292:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  202294:	4c9d      	ldr	r4, [pc, #628]	; (20250c <chprintf.constprop.1+0x28c>)
  int n = 0;
  202296:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  202298:	9502      	str	r5, [sp, #8]
  20229a:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  20229e:	9a00      	ldr	r2, [sp, #0]
  2022a0:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  2022a2:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  2022a6:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  2022a8:	9901      	ldr	r1, [sp, #4]
  2022aa:	689b      	ldr	r3, [r3, #8]
  2022ac:	4898      	ldr	r0, [pc, #608]	; (202510 <chprintf.constprop.1+0x290>)
      n++;
  2022ae:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  2022b0:	4798      	blx	r3
  2022b2:	7823      	ldrb	r3, [r4, #0]
  2022b4:	9301      	str	r3, [sp, #4]
    if (c == 0)
  2022b6:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  2022b8:	1c74      	adds	r4, r6, #1
    if (c == 0)
  2022ba:	2b00      	cmp	r3, #0
  2022bc:	f000 8120 	beq.w	202500 <chprintf.constprop.1+0x280>
    if (c != '%') {
  2022c0:	2b25      	cmp	r3, #37	; 0x25
  2022c2:	d1ec      	bne.n	20229e <chprintf.constprop.1+0x1e>
    if (*fmt == '-') {
  2022c4:	7871      	ldrb	r1, [r6, #1]
  2022c6:	292d      	cmp	r1, #45	; 0x2d
  2022c8:	f000 814b 	beq.w	202562 <chprintf.constprop.1+0x2e2>
    left_align = FALSE;
  2022cc:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  2022d0:	2930      	cmp	r1, #48	; 0x30
  2022d2:	f000 8141 	beq.w	202558 <chprintf.constprop.1+0x2d8>
    filler = ' ';
  2022d6:	f04f 0820 	mov.w	r8, #32
  2022da:	1c62      	adds	r2, r4, #1
    width = 0;
  2022dc:	2400      	movs	r4, #0
  2022de:	e005      	b.n	2022ec <chprintf.constprop.1+0x6c>
        c = va_arg(ap, int);
  2022e0:	782b      	ldrb	r3, [r5, #0]
  2022e2:	3504      	adds	r5, #4
  2022e4:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  2022e8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  2022ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  2022f0:	4616      	mov	r6, r2
      width = width * 10 + c;
  2022f2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  2022f6:	b2db      	uxtb	r3, r3
  2022f8:	2b09      	cmp	r3, #9
  2022fa:	d9f3      	bls.n	2022e4 <chprintf.constprop.1+0x64>
      else if (c == '*')
  2022fc:	292a      	cmp	r1, #42	; 0x2a
  2022fe:	d0ef      	beq.n	2022e0 <chprintf.constprop.1+0x60>
    if (c == '.') {
  202300:	292e      	cmp	r1, #46	; 0x2e
  202302:	f04f 0200 	mov.w	r2, #0
  202306:	d04a      	beq.n	20239e <chprintf.constprop.1+0x11e>
    if (c == 'l' || c == 'L') {
  202308:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  20230c:	2b4c      	cmp	r3, #76	; 0x4c
  20230e:	d155      	bne.n	2023bc <chprintf.constprop.1+0x13c>
      if (*fmt)
  202310:	7833      	ldrb	r3, [r6, #0]
  202312:	9301      	str	r3, [sp, #4]
  202314:	b11b      	cbz	r3, 20231e <chprintf.constprop.1+0x9e>
        c = *fmt++;
  202316:	4619      	mov	r1, r3
  202318:	3601      	adds	r6, #1
  20231a:	7833      	ldrb	r3, [r6, #0]
  20231c:	9301      	str	r3, [sp, #4]
    switch (c) {
  20231e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  202322:	2b34      	cmp	r3, #52	; 0x34
  202324:	f200 810c 	bhi.w	202540 <chprintf.constprop.1+0x2c0>
  202328:	e8df f013 	tbh	[pc, r3, lsl #1]
  20232c:	010a018f 	.word	0x010a018f
  202330:	010a010a 	.word	0x010a010a
  202334:	018f010a 	.word	0x018f010a
  202338:	010a010a 	.word	0x010a010a
  20233c:	010a010a 	.word	0x010a010a
  202340:	014d010a 	.word	0x014d010a
  202344:	010a010a 	.word	0x010a010a
  202348:	010a010a 	.word	0x010a010a
  20234c:	0152010a 	.word	0x0152010a
  202350:	010a010a 	.word	0x010a010a
  202354:	010a0187 	.word	0x010a0187
  202358:	010a010a 	.word	0x010a010a
  20235c:	010a010a 	.word	0x010a010a
  202360:	010a010a 	.word	0x010a010a
  202364:	010a010a 	.word	0x010a010a
  202368:	00f6010a 	.word	0x00f6010a
  20236c:	010a018f 	.word	0x010a018f
  202370:	010a010a 	.word	0x010a010a
  202374:	018f010a 	.word	0x018f010a
  202378:	010a010a 	.word	0x010a010a
  20237c:	010a010a 	.word	0x010a010a
  202380:	014d010a 	.word	0x014d010a
  202384:	010a010a 	.word	0x010a010a
  202388:	0089010a 	.word	0x0089010a
  20238c:	0152010a 	.word	0x0152010a
  202390:	010a010a 	.word	0x010a010a
  202394:	0187      	.short	0x0187
          c = va_arg(ap, int);
  202396:	782b      	ldrb	r3, [r5, #0]
  202398:	3504      	adds	r5, #4
        precision += c;
  20239a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  20239e:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  2023a2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  2023a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  2023aa:	b2db      	uxtb	r3, r3
  2023ac:	2b09      	cmp	r3, #9
  2023ae:	d9f4      	bls.n	20239a <chprintf.constprop.1+0x11a>
        else if (c == '*')
  2023b0:	292a      	cmp	r1, #42	; 0x2a
  2023b2:	d0f0      	beq.n	202396 <chprintf.constprop.1+0x116>
    if (c == 'l' || c == 'L') {
  2023b4:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2023b8:	2b4c      	cmp	r3, #76	; 0x4c
  2023ba:	d0a9      	beq.n	202310 <chprintf.constprop.1+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  2023bc:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  2023c0:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  2023c4:	b2db      	uxtb	r3, r3
    switch (c) {
  2023c6:	2834      	cmp	r0, #52	; 0x34
  2023c8:	f200 80b8 	bhi.w	20253c <chprintf.constprop.1+0x2bc>
  2023cc:	e8df f010 	tbh	[pc, r0, lsl #1]
  2023d0:	00b6010a 	.word	0x00b6010a
  2023d4:	00b600b6 	.word	0x00b600b6
  2023d8:	010a00b6 	.word	0x010a00b6
  2023dc:	00b600b6 	.word	0x00b600b6
  2023e0:	00b600b6 	.word	0x00b600b6
  2023e4:	010300b6 	.word	0x010300b6
  2023e8:	00b600b6 	.word	0x00b600b6
  2023ec:	00b600b6 	.word	0x00b600b6
  2023f0:	00ce00b6 	.word	0x00ce00b6
  2023f4:	00b600b6 	.word	0x00b600b6
  2023f8:	00b60138 	.word	0x00b60138
  2023fc:	00b600b6 	.word	0x00b600b6
  202400:	00b600b6 	.word	0x00b600b6
  202404:	00b600b6 	.word	0x00b600b6
  202408:	00b600b6 	.word	0x00b600b6
  20240c:	00a200b6 	.word	0x00a200b6
  202410:	00b6010a 	.word	0x00b6010a
  202414:	00b600b6 	.word	0x00b600b6
  202418:	010a00b6 	.word	0x010a00b6
  20241c:	00b600b6 	.word	0x00b600b6
  202420:	00b600b6 	.word	0x00b600b6
  202424:	010300b6 	.word	0x010300b6
  202428:	00b600b6 	.word	0x00b600b6
  20242c:	003500b6 	.word	0x003500b6
  202430:	00ce00b6 	.word	0x00ce00b6
  202434:	00b600b6 	.word	0x00b600b6
  202438:	0138      	.short	0x0138
  20243a:	7833      	ldrb	r3, [r6, #0]
  20243c:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  20243e:	682f      	ldr	r7, [r5, #0]
  202440:	3504      	adds	r5, #4
  202442:	2f00      	cmp	r7, #0
  202444:	f000 8111 	beq.w	20266a <chprintf.constprop.1+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  202448:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  20244a:	2a00      	cmp	r2, #0
  20244c:	f040 810a 	bne.w	202664 <chprintf.constprop.1+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  202450:	2b00      	cmp	r3, #0
  202452:	f000 811c 	beq.w	20268e <chprintf.constprop.1+0x40e>
  202456:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  20245a:	463a      	mov	r2, r7
  20245c:	e001      	b.n	202462 <chprintf.constprop.1+0x1e2>
  20245e:	3b01      	subs	r3, #1
  202460:	d403      	bmi.n	20246a <chprintf.constprop.1+0x1ea>
  202462:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  202466:	2900      	cmp	r1, #0
  202468:	d1f9      	bne.n	20245e <chprintf.constprop.1+0x1de>
  20246a:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  20246c:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  202470:	1aa4      	subs	r4, r4, r2
  202472:	f102 39ff 	add.w	r9, r2, #4294967295
  202476:	d45b      	bmi.n	202530 <chprintf.constprop.1+0x2b0>
    if (left_align == FALSE)
  202478:	f1bc 0f00 	cmp.w	ip, #0
  20247c:	d168      	bne.n	202550 <chprintf.constprop.1+0x2d0>
  20247e:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  202482:	2c00      	cmp	r4, #0
  202484:	d063      	beq.n	20254e <chprintf.constprop.1+0x2ce>
      if (*s == '-' && filler == '0') {
  202486:	783b      	ldrb	r3, [r7, #0]
  202488:	2b2d      	cmp	r3, #45	; 0x2d
  20248a:	d103      	bne.n	202494 <chprintf.constprop.1+0x214>
  20248c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  202490:	f000 80f0 	beq.w	202674 <chprintf.constprop.1+0x3f4>
        streamPut(chp, (uint8_t)filler);
  202494:	f8da 3000 	ldr.w	r3, [sl]
  202498:	4641      	mov	r1, r8
  20249a:	4650      	mov	r0, sl
  20249c:	689b      	ldr	r3, [r3, #8]
  20249e:	4798      	blx	r3
      } while (++width != 0);
  2024a0:	f11b 0b01 	adds.w	fp, fp, #1
  2024a4:	d1f6      	bne.n	202494 <chprintf.constprop.1+0x214>
  2024a6:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  2024a8:	f1b9 0f00 	cmp.w	r9, #0
  2024ac:	4423      	add	r3, r4
  2024ae:	9300      	str	r3, [sp, #0]
  2024b0:	f6ff af01 	blt.w	2022b6 <chprintf.constprop.1+0x36>
  2024b4:	465c      	mov	r4, fp
  2024b6:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  2024b8:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  2024bc:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  2024c0:	f817 1b01 	ldrb.w	r1, [r7], #1
  2024c4:	4650      	mov	r0, sl
  2024c6:	689b      	ldr	r3, [r3, #8]
  2024c8:	4798      	blx	r3
    while (--i >= 0) {
  2024ca:	f1bb 3fff 	cmp.w	fp, #4294967295
  2024ce:	d1f3      	bne.n	2024b8 <chprintf.constprop.1+0x238>
  2024d0:	9b00      	ldr	r3, [sp, #0]
  2024d2:	3301      	adds	r3, #1
  2024d4:	444b      	add	r3, r9
  2024d6:	9300      	str	r3, [sp, #0]
    while (width) {
  2024d8:	2c00      	cmp	r4, #0
  2024da:	f43f aeec 	beq.w	2022b6 <chprintf.constprop.1+0x36>
  2024de:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  2024e0:	f8da 3000 	ldr.w	r3, [sl]
  2024e4:	4641      	mov	r1, r8
  2024e6:	4650      	mov	r0, sl
  2024e8:	689b      	ldr	r3, [r3, #8]
  2024ea:	4798      	blx	r3
    while (width) {
  2024ec:	3f01      	subs	r7, #1
  2024ee:	d1f7      	bne.n	2024e0 <chprintf.constprop.1+0x260>
  2024f0:	9b00      	ldr	r3, [sp, #0]
  2024f2:	4423      	add	r3, r4
    c = *fmt++;
  2024f4:	1c74      	adds	r4, r6, #1
  2024f6:	9300      	str	r3, [sp, #0]
    if (c == 0)
  2024f8:	9b01      	ldr	r3, [sp, #4]
  2024fa:	2b00      	cmp	r3, #0
  2024fc:	f47f aee0 	bne.w	2022c0 <chprintf.constprop.1+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  202500:	9800      	ldr	r0, [sp, #0]
  202502:	b006      	add	sp, #24
  202504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202508:	b003      	add	sp, #12
  20250a:	4770      	bx	lr
  20250c:	080027c5 	.word	0x080027c5
  202510:	20000a58 	.word	0x20000a58
  202514:	7833      	ldrb	r3, [r6, #0]
  202516:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  202518:	682b      	ldr	r3, [r5, #0]
  20251a:	af06      	add	r7, sp, #24
  20251c:	3504      	adds	r5, #4
  20251e:	f04f 0900 	mov.w	r9, #0
  202522:	2201      	movs	r2, #1
      filler = ' ';
  202524:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  202528:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  20252c:	1aa4      	subs	r4, r4, r2
  20252e:	d5a3      	bpl.n	202478 <chprintf.constprop.1+0x1f8>
    while (--i >= 0) {
  202530:	f1b9 0f00 	cmp.w	r9, #0
  202534:	f6ff aebf 	blt.w	2022b6 <chprintf.constprop.1+0x36>
      width = 0;
  202538:	2400      	movs	r4, #0
  20253a:	e7bc      	b.n	2024b6 <chprintf.constprop.1+0x236>
  20253c:	7833      	ldrb	r3, [r6, #0]
  20253e:	9301      	str	r3, [sp, #4]
      *p++ = c;
  202540:	af06      	add	r7, sp, #24
  202542:	f04f 0900 	mov.w	r9, #0
  202546:	2201      	movs	r2, #1
  202548:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  20254c:	e7ee      	b.n	20252c <chprintf.constprop.1+0x2ac>
    if (width < 0) {
  20254e:	465c      	mov	r4, fp
    while (--i >= 0) {
  202550:	f1b9 0f00 	cmp.w	r9, #0
  202554:	daaf      	bge.n	2024b6 <chprintf.constprop.1+0x236>
  202556:	e7bf      	b.n	2024d8 <chprintf.constprop.1+0x258>
  202558:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  20255a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  20255e:	3401      	adds	r4, #1
  202560:	e6bb      	b.n	2022da <chprintf.constprop.1+0x5a>
      fmt++;
  202562:	1cb4      	adds	r4, r6, #2
  202564:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  202566:	f04f 0c01 	mov.w	ip, #1
  20256a:	e6b1      	b.n	2022d0 <chprintf.constprop.1+0x50>
    switch (c) {
  20256c:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  202570:	2b19      	cmp	r3, #25
  202572:	d934      	bls.n	2025de <chprintf.constprop.1+0x35e>
        l = va_arg(ap, unsigned int);
  202574:	682f      	ldr	r7, [r5, #0]
  202576:	3504      	adds	r5, #4
  202578:	7833      	ldrb	r3, [r6, #0]
  20257a:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  20257c:	f10d 0117 	add.w	r1, sp, #23
  202580:	e000      	b.n	202584 <chprintf.constprop.1+0x304>
  } while ((ll /= radix) != 0);
  202582:	4601      	mov	r1, r0
    *--q = i;
  202584:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  202586:	fbb7 f2fe 	udiv	r2, r7, lr
  20258a:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  20258e:	4617      	mov	r7, r2
    i += '0';
  202590:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  202594:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  202596:	bfc8      	it	gt
  202598:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  20259c:	b2db      	uxtb	r3, r3
  20259e:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  2025a2:	2a00      	cmp	r2, #0
  2025a4:	d1ed      	bne.n	202582 <chprintf.constprop.1+0x302>
  i = (int)(p + MAX_FILLER - q);
  2025a6:	f10d 0217 	add.w	r2, sp, #23
  2025aa:	af03      	add	r7, sp, #12
  2025ac:	1a12      	subs	r2, r2, r0
  2025ae:	46be      	mov	lr, r7
  2025b0:	4410      	add	r0, r2
  2025b2:	e001      	b.n	2025b8 <chprintf.constprop.1+0x338>
  2025b4:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  2025b8:	4288      	cmp	r0, r1
    *p++ = *q++;
  2025ba:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  2025be:	d1f9      	bne.n	2025b4 <chprintf.constprop.1+0x334>
  2025c0:	f102 39ff 	add.w	r9, r2, #4294967295
  2025c4:	e7b2      	b.n	20252c <chprintf.constprop.1+0x2ac>
    switch (c) {
  2025c6:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  2025ca:	682f      	ldr	r7, [r5, #0]
  2025cc:	3504      	adds	r5, #4
  2025ce:	e7d5      	b.n	20257c <chprintf.constprop.1+0x2fc>
    switch (c) {
  2025d0:	f04f 0e0a 	mov.w	lr, #10
  2025d4:	e7f9      	b.n	2025ca <chprintf.constprop.1+0x34a>
      if (is_long)
  2025d6:	2b19      	cmp	r3, #25
    switch (c) {
  2025d8:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  2025dc:	d8ca      	bhi.n	202574 <chprintf.constprop.1+0x2f4>
  2025de:	7833      	ldrb	r3, [r6, #0]
  2025e0:	9301      	str	r3, [sp, #4]
  2025e2:	e7f2      	b.n	2025ca <chprintf.constprop.1+0x34a>
      if (is_long)
  2025e4:	2b19      	cmp	r3, #25
  2025e6:	d92e      	bls.n	202646 <chprintf.constprop.1+0x3c6>
        l = va_arg(ap, int);
  2025e8:	6829      	ldr	r1, [r5, #0]
  2025ea:	3504      	adds	r5, #4
  2025ec:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  2025ee:	2900      	cmp	r1, #0
  2025f0:	9301      	str	r3, [sp, #4]
  2025f2:	db2e      	blt.n	202652 <chprintf.constprop.1+0x3d2>
    p = tmpbuf;
  2025f4:	af03      	add	r7, sp, #12
  2025f6:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  2025f8:	f102 0b0b 	add.w	fp, r2, #11
  2025fc:	4658      	mov	r0, fp
    i = (int)(l % radix);
  2025fe:	4b26      	ldr	r3, [pc, #152]	; (202698 <chprintf.constprop.1+0x418>)
  202600:	fba3 e301 	umull	lr, r3, r3, r1
  202604:	08db      	lsrs	r3, r3, #3
  202606:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  20260a:	469e      	mov	lr, r3
  20260c:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  202610:	4671      	mov	r1, lr
    i += '0';
  202612:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  202614:	b2db      	uxtb	r3, r3
  202616:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  20261a:	2900      	cmp	r1, #0
  20261c:	d1ef      	bne.n	2025fe <chprintf.constprop.1+0x37e>
  i = (int)(p + MAX_FILLER - q);
  20261e:	ebab 0100 	sub.w	r1, fp, r0
  202622:	4411      	add	r1, r2
  202624:	e001      	b.n	20262a <chprintf.constprop.1+0x3aa>
  202626:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  20262a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  20262e:	428a      	cmp	r2, r1
  202630:	d1f9      	bne.n	202626 <chprintf.constprop.1+0x3a6>
  202632:	1bd2      	subs	r2, r2, r7
  202634:	f102 39ff 	add.w	r9, r2, #4294967295
  202638:	e778      	b.n	20252c <chprintf.constprop.1+0x2ac>
    switch (c) {
  20263a:	f04f 0e10 	mov.w	lr, #16
  20263e:	e7c4      	b.n	2025ca <chprintf.constprop.1+0x34a>
  202640:	f04f 0e10 	mov.w	lr, #16
  202644:	e794      	b.n	202570 <chprintf.constprop.1+0x2f0>
  202646:	7833      	ldrb	r3, [r6, #0]
  202648:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  20264a:	6829      	ldr	r1, [r5, #0]
  20264c:	3504      	adds	r5, #4
      if (l < 0) {
  20264e:	2900      	cmp	r1, #0
  202650:	dad0      	bge.n	2025f4 <chprintf.constprop.1+0x374>
        *p++ = '-';
  202652:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  202656:	4249      	negs	r1, r1
        *p++ = '-';
  202658:	f10d 020d 	add.w	r2, sp, #13
  20265c:	af03      	add	r7, sp, #12
  20265e:	f88d 300c 	strb.w	r3, [sp, #12]
  202662:	e7c9      	b.n	2025f8 <chprintf.constprop.1+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  202664:	b19b      	cbz	r3, 20268e <chprintf.constprop.1+0x40e>
  202666:	1e53      	subs	r3, r2, #1
  202668:	e6f7      	b.n	20245a <chprintf.constprop.1+0x1da>
      if (precision == 0)
  20266a:	b90a      	cbnz	r2, 202670 <chprintf.constprop.1+0x3f0>
        precision = 32767;
  20266c:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  202670:	4f0a      	ldr	r7, [pc, #40]	; (20269c <chprintf.constprop.1+0x41c>)
  202672:	e7f8      	b.n	202666 <chprintf.constprop.1+0x3e6>
        n++;
  202674:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  202676:	212d      	movs	r1, #45	; 0x2d
  202678:	f8da 3000 	ldr.w	r3, [sl]
  20267c:	4650      	mov	r0, sl
        n++;
  20267e:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  202680:	3701      	adds	r7, #1
  202682:	689b      	ldr	r3, [r3, #8]
  202684:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  202688:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  20268a:	4798      	blx	r3
  20268c:	e702      	b.n	202494 <chprintf.constprop.1+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  20268e:	f04f 39ff 	mov.w	r9, #4294967295
  202692:	f04f 0820 	mov.w	r8, #32
  202696:	e6ef      	b.n	202478 <chprintf.constprop.1+0x1f8>
  202698:	cccccccd 	.word	0xcccccccd
  20269c:	08002878 	.word	0x08002878

002026a0 <ASCIItoNUM.constprop.0>:

#include <stdint.h>
#include <ch.h>
#include <hal.h>

unsigned int ASCIItoNUM(uint32_t num, unsigned char m)
  2026a0:	2100      	movs	r1, #0
  2026a2:	2202      	movs	r2, #2
  2026a4:	b430      	push	{r4, r5}
{
    unsigned int res = 0;
  2026a6:	460c      	mov	r4, r1
  2026a8:	e008      	b.n	2026bc <ASCIItoNUM.constprop.0+0x1c>
        buff = (uint32_t)(buff >> (8*i));
        buff = (uint32_t)(buff << (8*m));
        buff = (uint32_t)(buff >> (8*m));
        for(unsigned char j=(m-1)-i;j>0;j--)
        {
            exp *= 10;
  2026aa:	2a01      	cmp	r2, #1
        }
        res = res + (buff-48)*exp;
  2026ac:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  2026b0:	b2ea      	uxtb	r2, r5
            exp *= 10;
  2026b2:	bf14      	ite	ne
  2026b4:	2564      	movne	r5, #100	; 0x64
  2026b6:	250a      	moveq	r5, #10
        res = res + (buff-48)*exp;
  2026b8:	fb05 4403 	mla	r4, r5, r3, r4
        buff = (uint32_t)(buff >> (8*i));
  2026bc:	fa20 f301 	lsr.w	r3, r0, r1
  2026c0:	1e55      	subs	r5, r2, #1
        buff = (uint32_t)(buff >> (8*m));
  2026c2:	3108      	adds	r1, #8
  2026c4:	b2db      	uxtb	r3, r3
        for(unsigned char j=(m-1)-i;j>0;j--)
  2026c6:	2a00      	cmp	r2, #0
  2026c8:	d1ef      	bne.n	2026aa <ASCIItoNUM.constprop.0+0xa>
        res = res + (buff-48)*exp;
  2026ca:	3b30      	subs	r3, #48	; 0x30
    }
    return(res);
}
  2026cc:	1918      	adds	r0, r3, r4
  2026ce:	bc30      	pop	{r4, r5}
  2026d0:	4770      	bx	lr
  2026d2:	bf00      	nop
