
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fd47 	bl	201cb0 <__core_init>
  200222:	f001 f85d 	bl	2012e0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fce1 	bl	201c30 <__init_ram_areas>
  20026e:	f001 fd17 	bl	201ca0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 fc0d 	bl	200aa0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 bcfb 	b.w	201c90 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08001fc4 	.word	0x08001fc4
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000ab8 	.word	0x20000ab8
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 fc6e 	bl	201bd0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 fa2c 	bl	201750 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_d2f>:
  20066c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200670:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  200674:	bf24      	itt	cs
  200676:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  20067a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  20067e:	d90d      	bls.n	20069c <__aeabi_d2f+0x30>
  200680:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200684:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  200688:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  20068c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  200690:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  200694:	bf08      	it	eq
  200696:	f020 0001 	biceq.w	r0, r0, #1
  20069a:	4770      	bx	lr
  20069c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  2006a0:	d121      	bne.n	2006e6 <__aeabi_d2f+0x7a>
  2006a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  2006a6:	bfbc      	itt	lt
  2006a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  2006ac:	4770      	bxlt	lr
  2006ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  2006b6:	f1c2 0218 	rsb	r2, r2, #24
  2006ba:	f1c2 0c20 	rsb	ip, r2, #32
  2006be:	fa10 f30c 	lsls.w	r3, r0, ip
  2006c2:	fa20 f002 	lsr.w	r0, r0, r2
  2006c6:	bf18      	it	ne
  2006c8:	f040 0001 	orrne.w	r0, r0, #1
  2006cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  2006d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  2006d4:	fa03 fc0c 	lsl.w	ip, r3, ip
  2006d8:	ea40 000c 	orr.w	r0, r0, ip
  2006dc:	fa23 f302 	lsr.w	r3, r3, r2
  2006e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  2006e4:	e7cc      	b.n	200680 <__aeabi_d2f+0x14>
  2006e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  2006ea:	d107      	bne.n	2006fc <__aeabi_d2f+0x90>
  2006ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  2006f0:	bf1e      	ittt	ne
  2006f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  2006f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  2006fa:	4770      	bxne	lr
  2006fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  200700:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200704:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200708:	4770      	bx	lr
  20070a:	bf00      	nop
  20070c:	0000      	movs	r0, r0
	...

00200710 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200710:	4a02      	ldr	r2, [pc, #8]	; (20071c <notify7+0xc>)
  200712:	6813      	ldr	r3, [r2, #0]
  200714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200718:	6013      	str	r3, [r2, #0]
  20071a:	4770      	bx	lr
  20071c:	40007800 	.word	0x40007800

00200720 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  200720:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200722:	4b0b      	ldr	r3, [pc, #44]	; (200750 <VectorA4+0x30>)
  200724:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200726:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200728:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20072a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20072c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20072e:	d107      	bne.n	200740 <VectorA4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200730:	2002      	movs	r0, #2
  200732:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200734:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200736:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200738:	68d1      	ldr	r1, [r2, #12]
  20073a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20073e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200740:	685b      	ldr	r3, [r3, #4]
  200742:	4803      	ldr	r0, [pc, #12]	; (200750 <VectorA4+0x30>)
  200744:	685b      	ldr	r3, [r3, #4]
  200746:	4798      	blx	r3
}
  200748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20074c:	f000 bed0 	b.w	2014f0 <_port_irq_epilogue>
  200750:	20000834 	.word	0x20000834
	...

00200760 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200762:	2720      	movs	r7, #32
  200764:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200768:	4d12      	ldr	r5, [pc, #72]	; (2007b4 <SysTick_Handler+0x54>)
  20076a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20076c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20076e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200770:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200774:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200776:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200778:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20077a:	d013      	beq.n	2007a4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20077c:	891c      	ldrh	r4, [r3, #8]
  20077e:	3c01      	subs	r4, #1
  200780:	b2a4      	uxth	r4, r4
  200782:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200784:	b974      	cbnz	r4, 2007a4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200786:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200788:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20078a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20078c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20078e:	61ea      	str	r2, [r5, #28]
  200790:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200794:	6918      	ldr	r0, [r3, #16]
  200796:	4788      	blx	r1
  200798:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20079c:	69eb      	ldr	r3, [r5, #28]
  20079e:	891a      	ldrh	r2, [r3, #8]
  2007a0:	2a00      	cmp	r2, #0
  2007a2:	d0f0      	beq.n	200786 <SysTick_Handler+0x26>
  2007a4:	2300      	movs	r3, #0
  2007a6:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  2007aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2007ae:	f000 be9f 	b.w	2014f0 <_port_irq_epilogue>
  2007b2:	bf00      	nop
  2007b4:	20000844 	.word	0x20000844
	...

002007c0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2007c0:	4b08      	ldr	r3, [pc, #32]	; (2007e4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  2007c2:	4809      	ldr	r0, [pc, #36]	; (2007e8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2007c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  2007c6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2007c8:	0d89      	lsrs	r1, r1, #22
  2007ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  2007ce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  2007d0:	058c      	lsls	r4, r1, #22
  2007d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  2007d4:	b10a      	cbz	r2, 2007da <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  2007d6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  2007d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  2007da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2007de:	f000 be87 	b.w	2014f0 <_port_irq_epilogue>
  2007e2:	bf00      	nop
  2007e4:	40026400 	.word	0x40026400
  2007e8:	200009b0 	.word	0x200009b0
  2007ec:	00000000 	.word	0x00000000

002007f0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2007f0:	4b08      	ldr	r3, [pc, #32]	; (200814 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  2007f2:	4809      	ldr	r0, [pc, #36]	; (200818 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2007f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  2007f6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2007f8:	0c09      	lsrs	r1, r1, #16
  2007fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  2007fe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  200800:	040c      	lsls	r4, r1, #16
  200802:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  200804:	b10a      	cbz	r2, 20080a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  200806:	6f40      	ldr	r0, [r0, #116]	; 0x74
  200808:	4790      	blx	r2
}
  20080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20080e:	f000 be6f 	b.w	2014f0 <_port_irq_epilogue>
  200812:	bf00      	nop
  200814:	40026400 	.word	0x40026400
  200818:	200009b0 	.word	0x200009b0
  20081c:	00000000 	.word	0x00000000

00200820 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200820:	4b08      	ldr	r3, [pc, #32]	; (200844 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  200822:	4809      	ldr	r0, [pc, #36]	; (200848 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200824:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  200826:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200828:	0989      	lsrs	r1, r1, #6
  20082a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20082e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  200830:	018c      	lsls	r4, r1, #6
  200832:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  200834:	b10a      	cbz	r2, 20083a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  200836:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  200838:	4790      	blx	r2
}
  20083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20083e:	f000 be57 	b.w	2014f0 <_port_irq_epilogue>
  200842:	bf00      	nop
  200844:	40026400 	.word	0x40026400
  200848:	200009b0 	.word	0x200009b0
  20084c:	00000000 	.word	0x00000000

00200850 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  200850:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200852:	4b07      	ldr	r3, [pc, #28]	; (200870 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  200854:	4807      	ldr	r0, [pc, #28]	; (200874 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200856:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  200858:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20085a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  20085e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  200860:	b10a      	cbz	r2, 200866 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  200862:	6e40      	ldr	r0, [r0, #100]	; 0x64
  200864:	4790      	blx	r2
}
  200866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20086a:	f000 be41 	b.w	2014f0 <_port_irq_epilogue>
  20086e:	bf00      	nop
  200870:	40026400 	.word	0x40026400
  200874:	200009b0 	.word	0x200009b0
	...

00200880 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200880:	4b08      	ldr	r3, [pc, #32]	; (2008a4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  200882:	4809      	ldr	r0, [pc, #36]	; (2008a8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200884:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  200886:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200888:	0d89      	lsrs	r1, r1, #22
  20088a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  20088e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  200890:	058c      	lsls	r4, r1, #22
  200892:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  200894:	b10a      	cbz	r2, 20089a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  200896:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  200898:	4790      	blx	r2
}
  20089a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20089e:	f000 be27 	b.w	2014f0 <_port_irq_epilogue>
  2008a2:	bf00      	nop
  2008a4:	40026400 	.word	0x40026400
  2008a8:	200009b0 	.word	0x200009b0
  2008ac:	00000000 	.word	0x00000000

002008b0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2008b0:	4b08      	ldr	r3, [pc, #32]	; (2008d4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  2008b2:	4809      	ldr	r0, [pc, #36]	; (2008d8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2008b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  2008b6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2008b8:	0c09      	lsrs	r1, r1, #16
  2008ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  2008be:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  2008c0:	040c      	lsls	r4, r1, #16
  2008c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  2008c4:	b10a      	cbz	r2, 2008ca <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  2008c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  2008c8:	4790      	blx	r2
}
  2008ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2008ce:	f000 be0f 	b.w	2014f0 <_port_irq_epilogue>
  2008d2:	bf00      	nop
  2008d4:	40026400 	.word	0x40026400
  2008d8:	200009b0 	.word	0x200009b0
  2008dc:	00000000 	.word	0x00000000

002008e0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2008e0:	4b08      	ldr	r3, [pc, #32]	; (200904 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  2008e2:	4809      	ldr	r0, [pc, #36]	; (200908 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2008e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  2008e6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2008e8:	0989      	lsrs	r1, r1, #6
  2008ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  2008ee:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  2008f0:	018c      	lsls	r4, r1, #6
  2008f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  2008f4:	b10a      	cbz	r2, 2008fa <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  2008f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  2008f8:	4790      	blx	r2
}
  2008fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2008fe:	f000 bdf7 	b.w	2014f0 <_port_irq_epilogue>
  200902:	bf00      	nop
  200904:	40026400 	.word	0x40026400
  200908:	200009b0 	.word	0x200009b0
  20090c:	00000000 	.word	0x00000000

00200910 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  200910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200914:	4c5f      	ldr	r4, [pc, #380]	; (200a94 <Vector188+0x184>)
  200916:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200918:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20091a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20091c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20091e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200920:	d152      	bne.n	2009c8 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  200922:	05eb      	lsls	r3, r5, #23
  200924:	d445      	bmi.n	2009b2 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  200926:	06a8      	lsls	r0, r5, #26
  200928:	d417      	bmi.n	20095a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20092a:	0639      	lsls	r1, r7, #24
  20092c:	d501      	bpl.n	200932 <Vector188+0x22>
  20092e:	062a      	lsls	r2, r5, #24
  200930:	d465      	bmi.n	2009fe <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  200932:	066b      	lsls	r3, r5, #25
  200934:	d50d      	bpl.n	200952 <Vector188+0x42>
  200936:	2320      	movs	r3, #32
  200938:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20093c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  20093e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200940:	429a      	cmp	r2, r3
  200942:	f000 8086 	beq.w	200a52 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200946:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20094a:	2300      	movs	r3, #0
  20094c:	6037      	str	r7, [r6, #0]
  20094e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  200952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  200956:	f000 bdcb 	b.w	2014f0 <_port_irq_epilogue>
  20095a:	2320      	movs	r3, #32
  20095c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200960:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200962:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200966:	6963      	ldr	r3, [r4, #20]
  200968:	ea01 0802 	and.w	r8, r1, r2
  20096c:	2b00      	cmp	r3, #0
  20096e:	d078      	beq.n	200a62 <Vector188+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  200970:	6a23      	ldr	r3, [r4, #32]
  200972:	6a62      	ldr	r2, [r4, #36]	; 0x24
  200974:	4293      	cmp	r3, r2
  200976:	d078      	beq.n	200a6a <Vector188+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  200978:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20097a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  20097c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  20097e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  200980:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200982:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  200986:	6a22      	ldr	r2, [r4, #32]
  200988:	69e3      	ldr	r3, [r4, #28]
  20098a:	429a      	cmp	r2, r3
  20098c:	d25e      	bcs.n	200a4c <Vector188+0x13c>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
  20098e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  200990:	4a41      	ldr	r2, [pc, #260]	; (200a98 <Vector188+0x188>)
  200992:	4293      	cmp	r3, r2
  200994:	d009      	beq.n	2009aa <Vector188+0x9a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
  200996:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  200998:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20099c:	4618      	mov	r0, r3
  20099e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2009a0:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2009a2:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2009a6:	f001 f8ab 	bl	201b00 <chSchReadyI>
  2009aa:	2300      	movs	r3, #0
  2009ac:	f383 8811 	msr	BASEPRI, r3
  2009b0:	e7bb      	b.n	20092a <Vector188+0x1a>
  2009b2:	2320      	movs	r3, #32
  2009b4:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2009b8:	f44f 7000 	mov.w	r0, #512	; 0x200
  2009bc:	f001 f9c0 	bl	201d40 <chEvtBroadcastFlagsI.constprop.17>
  2009c0:	2300      	movs	r3, #0
  2009c2:	f383 8811 	msr	BASEPRI, r3
  2009c6:	e7ae      	b.n	200926 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  2009c8:	f015 0f08 	tst.w	r5, #8
  2009cc:	bf0c      	ite	eq
  2009ce:	2000      	moveq	r0, #0
  2009d0:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  2009d2:	07eb      	lsls	r3, r5, #31
  2009d4:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  2009d8:	bf48      	it	mi
  2009da:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  2009de:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  2009e0:	bf48      	it	mi
  2009e2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  2009e6:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  2009e8:	bf48      	it	mi
  2009ea:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  2009ee:	f383 8811 	msr	BASEPRI, r3
  2009f2:	f001 f9a5 	bl	201d40 <chEvtBroadcastFlagsI.constprop.17>
  2009f6:	2300      	movs	r3, #0
  2009f8:	f383 8811 	msr	BASEPRI, r3
  2009fc:	e791      	b.n	200922 <Vector188+0x12>
  2009fe:	2320      	movs	r3, #32
  200a00:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200a06:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200a08:	429a      	cmp	r2, r3
  200a0a:	d036      	beq.n	200a7a <Vector188+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  200a0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200a0e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200a10:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200a12:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200a14:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200a16:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200a18:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200a1a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  200a1e:	d301      	bcc.n	200a24 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  200a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200a22:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200a26:	4a1d      	ldr	r2, [pc, #116]	; (200a9c <Vector188+0x18c>)
  200a28:	4293      	cmp	r3, r2
  200a2a:	d009      	beq.n	200a40 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  200a2c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  200a2e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200a32:	4618      	mov	r0, r3
  200a34:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  200a36:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200a38:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200a3c:	f001 f860 	bl	201b00 <chSchReadyI>
      u->TDR = b;
  200a40:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200a44:	2300      	movs	r3, #0
  200a46:	f383 8811 	msr	BASEPRI, r3
  200a4a:	e772      	b.n	200932 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  200a4c:	69a3      	ldr	r3, [r4, #24]
  200a4e:	6223      	str	r3, [r4, #32]
  200a50:	e79d      	b.n	20098e <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  200a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  200a54:	2b00      	cmp	r3, #0
  200a56:	f43f af76 	beq.w	200946 <Vector188+0x36>
  200a5a:	2010      	movs	r0, #16
  200a5c:	f001 f970 	bl	201d40 <chEvtBroadcastFlagsI.constprop.17>
  200a60:	e771      	b.n	200946 <Vector188+0x36>
  200a62:	2004      	movs	r0, #4
  200a64:	f001 f96c 	bl	201d40 <chEvtBroadcastFlagsI.constprop.17>
  200a68:	e782      	b.n	200970 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  200a6a:	6962      	ldr	r2, [r4, #20]
  200a6c:	2a00      	cmp	r2, #0
  200a6e:	d083      	beq.n	200978 <Vector188+0x68>
  200a70:	f44f 6080 	mov.w	r0, #1024	; 0x400
  200a74:	f001 f964 	bl	201d40 <chEvtBroadcastFlagsI.constprop.17>
  200a78:	e797      	b.n	2009aa <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  200a7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  200a7c:	2a00      	cmp	r2, #0
  200a7e:	d0c5      	beq.n	200a0c <Vector188+0xfc>
  200a80:	2008      	movs	r0, #8
  200a82:	f001 f95d 	bl	201d40 <chEvtBroadcastFlagsI.constprop.17>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  200a86:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  200a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  200a8e:	6033      	str	r3, [r6, #0]
  200a90:	e7d8      	b.n	200a44 <Vector188+0x134>
  200a92:	bf00      	nop
  200a94:	20000a58 	.word	0x20000a58
  200a98:	20000a64 	.word	0x20000a64
  200a9c:	20000a88 	.word	0x20000a88

00200aa0 <main>:
    }
    return(res);
}

int main(void)
{
  200aa0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  200aa4:	b08f      	sub	sp, #60	; 0x3c
  tqp->next = (thread_t *)tqp;
  200aa6:	4d8d      	ldr	r5, [pc, #564]	; (200cdc <main+0x23c>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
  200aa8:	2600      	movs	r6, #0
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
  200aaa:	f64f 71ff 	movw	r1, #65535	; 0xffff
  200aae:	af00      	add	r7, sp, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200ab0:	f105 031c 	add.w	r3, r5, #28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  200ab4:	f04f 32ff 	mov.w	r2, #4294967295
  chTMStartMeasurementX(&tm);
  200ab8:	f107 0420 	add.w	r4, r7, #32
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
  200abc:	f04f 0800 	mov.w	r8, #0
  200ac0:	f04f 0900 	mov.w	r9, #0
  200ac4:	602d      	str	r5, [r5, #0]
  chTMStartMeasurementX(&tm);
  200ac6:	4620      	mov	r0, r4
  tqp->prev = (thread_t *)tqp;
  200ac8:	606d      	str	r5, [r5, #4]
  ch.vtlist.delta = (systime_t)-1;
  200aca:	84a9      	strh	r1, [r5, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200acc:	61eb      	str	r3, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200ace:	622b      	str	r3, [r5, #32]
  tmp->best       = (rtcnt_t)-1;
  200ad0:	623a      	str	r2, [r7, #32]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  200ad2:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  200ad4:	616d      	str	r5, [r5, #20]
  ch.rlist.prio = NOPRIO;
  200ad6:	60ae      	str	r6, [r5, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
  200ad8:	84ee      	strh	r6, [r5, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200ada:	672e      	str	r6, [r5, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200adc:	627e      	str	r6, [r7, #36]	; 0x24
  tmp->last       = (rtcnt_t)0;
  200ade:	62be      	str	r6, [r7, #40]	; 0x28
  tmp->n          = (ucnt_t)0;
  200ae0:	62fe      	str	r6, [r7, #44]	; 0x2c
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
  200ae2:	f8df a240 	ldr.w	sl, [pc, #576]	; 200d24 <main+0x284>
  tmp->cumulative = (rttime_t)0;
  200ae6:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
  chTMStartMeasurementX(&tm);
  200aea:	f001 f921 	bl	201d30 <chTMStartMeasurementX.constprop.22>
  chTMStopMeasurementX(&tm);
  200aee:	4620      	mov	r0, r4
  200af0:	f000 fe06 	bl	201700 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  200af4:	4b7a      	ldr	r3, [pc, #488]	; (200ce0 <main+0x240>)
  200af6:	497b      	ldr	r1, [pc, #492]	; (200ce4 <main+0x244>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200af8:	f64f 09ff 	movw	r9, #63743	; 0xf8ff
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  200afc:	4a7a      	ldr	r2, [pc, #488]	; (200ce8 <main+0x248>)
  tp->prio      = prio;
  200afe:	f04f 0c80 	mov.w	ip, #128	; 0x80
  200b02:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  200b04:	f103 0810 	add.w	r8, r3, #16
  200b08:	4978      	ldr	r1, [pc, #480]	; (200cec <main+0x24c>)
  endmem  = __heap_end__;
  200b0a:	4879      	ldr	r0, [pc, #484]	; (200cf0 <main+0x250>)
  nextmem = __heap_base__;
  200b0c:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200b0e:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  200b10:	4978      	ldr	r1, [pc, #480]	; (200cf4 <main+0x254>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200b12:	f885 604d 	strb.w	r6, [r5, #77]	; 0x4d
  200b16:	6008      	str	r0, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  200b18:	4977      	ldr	r1, [pc, #476]	; (200cf8 <main+0x258>)
  ch.tm.offset = tm.last;
  200b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  200b1c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  200b20:	6728      	str	r0, [r5, #112]	; 0x70
  REG_INSERT(tp);
  200b22:	f105 002c 	add.w	r0, r5, #44	; 0x2c
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200b26:	ea0e 0e09 	and.w	lr, lr, r9
  tp->prio      = prio;
  200b2a:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  tp->realprio  = prio;
  200b2e:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68
  reg_value  =  (reg_value                                   |
  200b32:	ea4e 0a0a 	orr.w	sl, lr, sl

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200b36:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 200d28 <main+0x288>
  REG_INSERT(tp);
  200b3a:	f8d5 e014 	ldr.w	lr, [r5, #20]
  tp->name      = name;
  200b3e:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 200d2c <main+0x28c>
  tp->epending  = (eventmask_t)0;
  200b42:	662e      	str	r6, [r5, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200b44:	619e      	str	r6, [r3, #24]
  200b46:	f8c3 8010 	str.w	r8, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  200b4a:	f8c3 8014 	str.w	r8, [r3, #20]
  tlp->next = (thread_t *)tlp;
  200b4e:	f105 0854 	add.w	r8, r5, #84	; 0x54
  REG_INSERT(tp);
  200b52:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  200b56:	f885 204e 	strb.w	r2, [r5, #78]	; 0x4e
  tp->mtxlist   = NULL;
  200b5a:	666e      	str	r6, [r5, #100]	; 0x64
  REG_INSERT(tp);
  200b5c:	63ed      	str	r5, [r5, #60]	; 0x3c
  tp->name      = name;
  200b5e:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
  REG_INSERT(tp);
  200b62:	f8ce 0010 	str.w	r0, [lr, #16]
  tqp->next = (thread_t *)tqp;
  200b66:	f105 0e58 	add.w	lr, r5, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  200b6a:	f8c1 a00c 	str.w	sl, [r1, #12]
  200b6e:	f8dc 000c 	ldr.w	r0, [ip, #12]
  H_NEXT(&default_heap.header) = NULL;
  200b72:	609e      	str	r6, [r3, #8]
  H_PAGES(&default_heap.header) = 0;
  200b74:	60de      	str	r6, [r3, #12]
  200b76:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  200b7a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
  tlp->next = (thread_t *)tlp;
  200b7e:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  200b82:	64ae      	str	r6, [r5, #72]	; 0x48
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  200b84:	f04f 0810 	mov.w	r8, #16
  200b88:	616b      	str	r3, [r5, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  200b8a:	61ab      	str	r3, [r5, #24]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  200b8c:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  200b90:	4b5a      	ldr	r3, [pc, #360]	; (200cfc <main+0x25c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200b92:	f8cc 000c 	str.w	r0, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  200b96:	485a      	ldr	r0, [pc, #360]	; (200d00 <main+0x260>)
  tqp->next = (thread_t *)tqp;
  200b98:	f8c5 e058 	str.w	lr, [r5, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  200b9c:	f8c5 e05c 	str.w	lr, [r5, #92]	; 0x5c
  200ba0:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  200ba4:	6818      	ldr	r0, [r3, #0]
  200ba6:	4310      	orrs	r0, r2
  200ba8:	6018      	str	r0, [r3, #0]
  200baa:	f04f 0320 	mov.w	r3, #32
  200bae:	f881 801f 	strb.w	r8, [r1, #31]
  200bb2:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  200bb6:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
  200bba:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200bbc:	2320      	movs	r3, #32
  200bbe:	f383 8811 	msr	BASEPRI, r3
  tp->wabase = tdp->wbase;
  200bc2:	4b50      	ldr	r3, [pc, #320]	; (200d04 <main+0x264>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200bc4:	f8df c168 	ldr.w	ip, [pc, #360]	; 200d30 <main+0x290>
  tp->prio      = prio;
  200bc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  REG_INSERT(tp);
  200bcc:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->realprio  = prio;
  200bd0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200bd4:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
  tp->refs      = (trefs_t)1;
  200bd8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200bdc:	4a4a      	ldr	r2, [pc, #296]	; (200d08 <main+0x268>)
  REG_INSERT(tp);
  200bde:	6968      	ldr	r0, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200be0:	f8c3 c06c 	str.w	ip, [r3, #108]	; 0x6c
  tp->state     = CH_STATE_WTSTART;
  200be4:	f04f 0c02 	mov.w	ip, #2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  200bec:	4a47      	ldr	r2, [pc, #284]	; (200d0c <main+0x26c>)
  tp->state     = CH_STATE_WTSTART;
  200bee:	f883 c0b0 	strb.w	ip, [r3, #176]	; 0xb0
  REG_INSERT(tp);
  200bf2:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200bf6:	f883 60b1 	strb.w	r6, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200bfa:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200bfe:	f8c3 e09c 	str.w	lr, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  200c02:	f103 0eb8 	add.w	lr, r3, #184	; 0xb8
  tp->name      = name;
  200c06:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  tqp->next = (thread_t *)tqp;
  200c0a:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200c0e:	671e      	str	r6, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200c10:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  200c14:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200c18:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  REG_INSERT(tp);
  200c1c:	6101      	str	r1, [r0, #16]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
  200c1e:	f8d5 c018 	ldr.w	ip, [r5, #24]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
  200c22:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
  200c26:	f8dc 0008 	ldr.w	r0, [ip, #8]
  200c2a:	6169      	str	r1, [r5, #20]
  tlp->next = (thread_t *)tlp;
  200c2c:	f8c3 e0b8 	str.w	lr, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200c30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  200c34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  200c38:	2800      	cmp	r0, #0
  200c3a:	d04b      	beq.n	200cd4 <main+0x234>
  tp->state = CH_STATE_READY;
  200c3c:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200c40:	682d      	ldr	r5, [r5, #0]
  } while (cp->prio >= tp->prio);
  200c42:	68aa      	ldr	r2, [r5, #8]
  200c44:	2a00      	cmp	r2, #0
  200c46:	d1fb      	bne.n	200c40 <main+0x1a0>
  tp->queue.next             = cp;
  200c48:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200c4c:	6868      	ldr	r0, [r5, #4]
  200c4e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  200c52:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  200c54:	6069      	str	r1, [r5, #4]
  200c56:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200c5a:	4b2d      	ldr	r3, [pc, #180]	; (200d10 <main+0x270>)
  200c5c:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  200c60:	4d2c      	ldr	r5, [pc, #176]	; (200d14 <main+0x274>)
  rccResetAHB1(~0);
  200c62:	6918      	ldr	r0, [r3, #16]
  200c64:	6119      	str	r1, [r3, #16]
  200c66:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200c68:	6958      	ldr	r0, [r3, #20]
  200c6a:	6159      	str	r1, [r3, #20]
  200c6c:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200c6e:	6a18      	ldr	r0, [r3, #32]
  200c70:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  200c74:	6218      	str	r0, [r3, #32]
  200c76:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200c78:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200c7a:	6259      	str	r1, [r3, #36]	; 0x24
  200c7c:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200c7e:	6829      	ldr	r1, [r5, #0]
  200c80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  200c84:	6029      	str	r1, [r5, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  200c86:	6f19      	ldr	r1, [r3, #112]	; 0x70
  200c88:	f401 7140 	and.w	r1, r1, #768	; 0x300
  200c8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  200c90:	d003      	beq.n	200c9a <main+0x1fa>
    RCC->BDCR = RCC_BDCR_BDRST;
  200c92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  200c96:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  200c98:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200c9a:	4b1d      	ldr	r3, [pc, #116]	; (200d10 <main+0x270>)
  200c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200c9e:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200ca0:	f042 0219 	orr.w	r2, r2, #25
  200ca4:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200ca6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  200ca8:	079b      	lsls	r3, r3, #30
  200caa:	d5fc      	bpl.n	200ca6 <main+0x206>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  200cac:	4819      	ldr	r0, [pc, #100]	; (200d14 <main+0x274>)
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  200cae:	2300      	movs	r3, #0
  200cb0:	4919      	ldr	r1, [pc, #100]	; (200d18 <main+0x278>)
  200cb2:	6842      	ldr	r2, [r0, #4]
  200cb4:	4d19      	ldr	r5, [pc, #100]	; (200d1c <main+0x27c>)
  200cb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  200cba:	4e19      	ldr	r6, [pc, #100]	; (200d20 <main+0x280>)
  200cbc:	6042      	str	r2, [r0, #4]
  200cbe:	461a      	mov	r2, r3
    _stm32_dma_streams[i].stream->CR = 0U;
  200cc0:	602b      	str	r3, [r5, #0]
  200cc2:	310c      	adds	r1, #12
    dma_isr_redir[i].dma_func = NULL;
  200cc4:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  200cc8:	3201      	adds	r2, #1
  200cca:	2a10      	cmp	r2, #16
  200ccc:	d032      	beq.n	200d34 <main+0x294>
  200cce:	f851 5c0c 	ldr.w	r5, [r1, #-12]
  200cd2:	e7f5      	b.n	200cc0 <main+0x220>
  tp->state = CH_STATE_READY;
  200cd4:	f88c 0020 	strb.w	r0, [ip, #32]
  200cd8:	e7fe      	b.n	200cd8 <main+0x238>
  200cda:	bf00      	nop
  200cdc:	20000844 	.word	0x20000844
  200ce0:	20000990 	.word	0x20000990
  200ce4:	002013f1 	.word	0x002013f1
  200ce8:	20000a34 	.word	0x20000a34
  200cec:	20020000 	.word	0x20020000
  200cf0:	20080000 	.word	0x20080000
  200cf4:	20000a30 	.word	0x20000a30
  200cf8:	e000ed00 	.word	0xe000ed00
  200cfc:	e0001000 	.word	0xe0001000
  200d00:	c5acce55 	.word	0xc5acce55
  200d04:	200008b8 	.word	0x200008b8
  200d08:	002002e5 	.word	0x002002e5
  200d0c:	08001f1c 	.word	0x08001f1c
  200d10:	40023800 	.word	0x40023800
  200d14:	40007000 	.word	0x40007000
  200d18:	08001e50 	.word	0x08001e50
  200d1c:	40026010 	.word	0x40026010
  200d20:	200009b0 	.word	0x200009b0
  200d24:	05fa0300 	.word	0x05fa0300
  200d28:	e000edf0 	.word	0xe000edf0
  200d2c:	08001f04 	.word	0x08001f04
  200d30:	002014b1 	.word	0x002014b1
  200d34:	607a      	str	r2, [r7, #4]
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  200d36:	f04f 3eff 	mov.w	lr, #4294967295
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200d3a:	4ecc      	ldr	r6, [pc, #816]	; (20106c <main+0x5cc>)
  200d3c:	f240 7cff 	movw	ip, #2047	; 0x7ff
  200d40:	49cb      	ldr	r1, [pc, #812]	; (201070 <main+0x5d0>)
  gpiop->ODR     = config->odr;
  200d42:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  200d46:	4acb      	ldr	r2, [pc, #812]	; (201074 <main+0x5d4>)
  200d48:	f64b 7b7e 	movw	fp, #49022	; 0xbf7e
  DMA1->LIFCR = 0xFFFFFFFFU;
  200d4c:	f8c1 e008 	str.w	lr, [r1, #8]
  gpiop->AFRH    = config->afrh;
  200d50:	f44f 0a30 	mov.w	sl, #11534336	; 0xb00000
  DMA1->HIFCR = 0xFFFFFFFFU;
  200d54:	f8c1 e00c 	str.w	lr, [r1, #12]
  gpiop->OSPEEDR = config->ospeedr;
  200d58:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
  DMA2->LIFCR = 0xFFFFFFFFU;
  200d5c:	f8c2 e008 	str.w	lr, [r2, #8]
  gpiop->MODER   = config->moder;
  200d60:	f640 2808 	movw	r8, #2568	; 0xa08
  DMA2->HIFCR = 0xFFFFFFFFU;
  200d64:	f8c2 e00c 	str.w	lr, [r2, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200d68:	6b32      	ldr	r2, [r6, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
  200d6a:	4dc3      	ldr	r5, [pc, #780]	; (201078 <main+0x5d8>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200d6c:	ea42 020c 	orr.w	r2, r2, ip
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  200d70:	49c2      	ldr	r1, [pc, #776]	; (20107c <main+0x5dc>)
  200d72:	6332      	str	r2, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200d74:	6d32      	ldr	r2, [r6, #80]	; 0x50
  200d76:	ea42 0c0c 	orr.w	ip, r2, ip
  sdp->vmt = &vmt;
  200d7a:	4ac1      	ldr	r2, [pc, #772]	; (201080 <main+0x5e0>)
  200d7c:	f8c6 c050 	str.w	ip, [r6, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
  200d80:	f8df c328 	ldr.w	ip, [pc, #808]	; 2010ac <main+0x60c>
  gpiop->OTYPER  = config->otyper;
  200d84:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200d86:	f8c5 e008 	str.w	lr, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  200d8a:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRL    = config->afrl;
  200d8e:	f8df c320 	ldr.w	ip, [pc, #800]	; 2010b0 <main+0x610>
  gpiop->ODR     = config->odr;
  200d92:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  200d94:	f8c5 c020 	str.w	ip, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200d98:	f8df c318 	ldr.w	ip, [pc, #792]	; 2010b4 <main+0x614>
  200d9c:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200da0:	f8df c314 	ldr.w	ip, [pc, #788]	; 2010b8 <main+0x618>
  200da4:	f8c5 c000 	str.w	ip, [r5]
  gpiop->OTYPER  = config->otyper;
  200da8:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200dac:	f8c5 e408 	str.w	lr, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200db0:	f10e 4e8a 	add.w	lr, lr, #1157627904	; 0x45000000
  iqp->q_buffer  = bp;
  200db4:	f8df c304 	ldr.w	ip, [pc, #772]	; 2010bc <main+0x61c>
  200db8:	f10e 1e55 	add.w	lr, lr, #5570645	; 0x550055
  200dbc:	f50e 5ea8 	add.w	lr, lr, #5376	; 0x1500
  200dc0:	f8c5 e40c 	str.w	lr, [r5, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  200dc4:	f8c5 b414 	str.w	fp, [r5, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  200dc8:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 2010c0 <main+0x620>
  gpiop->AFRL    = config->afrl;
  200dcc:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200dd0:	f8c5 a424 	str.w	sl, [r5, #1060]	; 0x424
  gpiop->OTYPER  = config->otyper;
  200dd4:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 2010a8 <main+0x608>
  gpiop->MODER   = config->moder;
  200dd8:	f8c5 e400 	str.w	lr, [r5, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  200ddc:	f46f 1540 	mvn.w	r5, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  200de0:	f8ca 3004 	str.w	r3, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200de4:	f8ca 9008 	str.w	r9, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
  200de8:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2010c4 <main+0x624>
  200dec:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 2010c8 <main+0x628>
  200df0:	f8ca 900c 	str.w	r9, [sl, #12]
  gpiop->AFRL    = config->afrl;
  200df4:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 2010cc <main+0x62c>
  gpiop->ODR     = config->odr;
  200df8:	f8ca 0014 	str.w	r0, [sl, #20]
  gpiop->AFRL    = config->afrl;
  200dfc:	f8ca 9020 	str.w	r9, [sl, #32]
  gpiop->OTYPER  = config->otyper;
  200e00:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 2010d0 <main+0x630>
  gpiop->AFRH    = config->afrh;
  200e04:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200e08:	f8ca 8000 	str.w	r8, [sl]
  200e0c:	f44f 2a20 	mov.w	sl, #655360	; 0xa0000
  gpiop->OTYPER  = config->otyper;
  200e10:	f8c9 3004 	str.w	r3, [r9, #4]
  gpiop->PUPDR   = config->pupdr;
  200e14:	f04f 3855 	mov.w	r8, #1431655765	; 0x55555555
  gpiop->OSPEEDR = config->ospeedr;
  200e18:	f8c9 5008 	str.w	r5, [r9, #8]
  gpiop->AFRH    = config->afrh;
  200e1c:	2577      	movs	r5, #119	; 0x77
  gpiop->PUPDR   = config->pupdr;
  200e1e:	f8c9 b00c 	str.w	fp, [r9, #12]
  gpiop->ODR     = config->odr;
  200e22:	f8c9 0014 	str.w	r0, [r9, #20]
  gpiop->AFRL    = config->afrl;
  200e26:	f8c9 3020 	str.w	r3, [r9, #32]
  gpiop->AFRH    = config->afrh;
  200e2a:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200e2e:	f8c9 a000 	str.w	sl, [r9]
  200e32:	f04f 6a08 	mov.w	sl, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
  200e36:	4d93      	ldr	r5, [pc, #588]	; (201084 <main+0x5e4>)
  gpiop->OSPEEDR = config->ospeedr;
  200e38:	f8df 9298 	ldr.w	r9, [pc, #664]	; 2010d4 <main+0x634>
  gpiop->OTYPER  = config->otyper;
  200e3c:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200e3e:	f8c5 9008 	str.w	r9, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  200e42:	f8c5 800c 	str.w	r8, [r5, #12]
  gpiop->OTYPER  = config->otyper;
  200e46:	f8df 9290 	ldr.w	r9, [pc, #656]	; 2010d8 <main+0x638>
  gpiop->ODR     = config->odr;
  200e4a:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  200e4c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200e4e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200e50:	602b      	str	r3, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200e52:	4d8d      	ldr	r5, [pc, #564]	; (201088 <main+0x5e8>)
  gpiop->OTYPER  = config->otyper;
  200e54:	f8c9 3004 	str.w	r3, [r9, #4]
  gpiop->PUPDR   = config->pupdr;
  200e58:	f8df b280 	ldr.w	fp, [pc, #640]	; 2010dc <main+0x63c>
  gpiop->OSPEEDR = config->ospeedr;
  200e5c:	f8c9 5008 	str.w	r5, [r9, #8]
  gpiop->OTYPER  = config->otyper;
  200e60:	4d8a      	ldr	r5, [pc, #552]	; (20108c <main+0x5ec>)
  gpiop->PUPDR   = config->pupdr;
  200e62:	f8c9 800c 	str.w	r8, [r9, #12]
  gpiop->ODR     = config->odr;
  200e66:	f8c9 0014 	str.w	r0, [r9, #20]
  gpiop->AFRL    = config->afrl;
  200e6a:	f8c9 3020 	str.w	r3, [r9, #32]
  gpiop->AFRH    = config->afrh;
  200e6e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200e72:	f8c9 3000 	str.w	r3, [r9]
  gpiop->OSPEEDR = config->ospeedr;
  200e76:	f8df 9268 	ldr.w	r9, [pc, #616]	; 2010e0 <main+0x640>
  gpiop->OTYPER  = config->otyper;
  200e7a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200e7c:	f8c5 9008 	str.w	r9, [r5, #8]
  200e80:	f04f 090f 	mov.w	r9, #15
  gpiop->PUPDR   = config->pupdr;
  200e84:	f8c5 b00c 	str.w	fp, [r5, #12]
  gpiop->AFRH    = config->afrh;
  200e88:	f8df b258 	ldr.w	fp, [pc, #600]	; 2010e4 <main+0x644>
  gpiop->ODR     = config->odr;
  200e8c:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  200e8e:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200e90:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
  200e94:	f101 0b18 	add.w	fp, r1, #24
  gpiop->MODER   = config->moder;
  200e98:	f8c5 a000 	str.w	sl, [r5]
  gpiop->PUPDR   = config->pupdr;
  200e9c:	f8df a248 	ldr.w	sl, [pc, #584]	; 2010e8 <main+0x648>
  gpiop->OTYPER  = config->otyper;
  200ea0:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200ea4:	f8c5 9408 	str.w	r9, [r5, #1032]	; 0x408
  200ea8:	f04f 0901 	mov.w	r9, #1
  gpiop->PUPDR   = config->pupdr;
  200eac:	f8c5 a40c 	str.w	sl, [r5, #1036]	; 0x40c

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200eb0:	f04f 0a60 	mov.w	sl, #96	; 0x60
  gpiop->ODR     = config->odr;
  200eb4:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200eb8:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200ebc:	f8c5 3424 	str.w	r3, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200ec0:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200ec4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  200ec8:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200eca:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  200ecc:	f8c5 800c 	str.w	r8, [r5, #12]
  adcp->config   = NULL;
  200ed0:	604b      	str	r3, [r1, #4]
  gpiop->ODR     = config->odr;
  200ed2:	6168      	str	r0, [r5, #20]
  adcp->samples  = NULL;
  200ed4:	608b      	str	r3, [r1, #8]
  gpiop->AFRL    = config->afrl;
  200ed6:	622b      	str	r3, [r5, #32]
  adcp->depth    = 0;
  200ed8:	60cb      	str	r3, [r1, #12]
  gpiop->AFRH    = config->afrh;
  200eda:	626b      	str	r3, [r5, #36]	; 0x24
  adcp->grpp     = NULL;
  200edc:	610b      	str	r3, [r1, #16]
  gpiop->MODER   = config->moder;
  200ede:	602b      	str	r3, [r5, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  200ee0:	614b      	str	r3, [r1, #20]
  gpiop->OTYPER  = config->otyper;
  200ee2:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  200ee6:	620b      	str	r3, [r1, #32]
  gpiop->OSPEEDR = config->ospeedr;
  200ee8:	f8c5 3408 	str.w	r3, [r5, #1032]	; 0x408
  200eec:	f8c1 b018 	str.w	fp, [r1, #24]
  gpiop->PUPDR   = config->pupdr;
  200ef0:	f8c5 840c 	str.w	r8, [r5, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  200ef4:	f8c1 b01c 	str.w	fp, [r1, #28]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200ef8:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  gpiop->ODR     = config->odr;
  200efc:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200f00:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200f04:	f8c5 3424 	str.w	r3, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200f08:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200f0c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200f10:	f8c5 3808 	str.w	r3, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200f14:	f8c5 880c 	str.w	r8, [r5, #2060]	; 0x80c

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  200f18:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 2010ec <main+0x64c>
  gpiop->ODR     = config->odr;
  200f1c:	f8c5 0814 	str.w	r0, [r5, #2068]	; 0x814
  200f20:	4610      	mov	r0, r2
  gpiop->AFRL    = config->afrl;
  200f22:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200f26:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200f2a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  ADCD1.adc = ADC1;
  200f2e:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  200f32:	f8c1 802c 	str.w	r8, [r1, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  200f36:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 2010f0 <main+0x650>
  adcp->state    = ADC_STOP;
  200f3a:	f881 9000 	strb.w	r9, [r1]
  ADCD1.adc = ADC1;
  200f3e:	628d      	str	r5, [r1, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  200f40:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
  iqp->q_top     = bp + size;
  200f44:	f10c 0810 	add.w	r8, ip, #16
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200f48:	4951      	ldr	r1, [pc, #324]	; (201090 <main+0x5f0>)
  oqp->q_buffer  = bp;
  200f4a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 2010f4 <main+0x654>
  200f4e:	f881 a312 	strb.w	sl, [r1, #786]	; 0x312
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  200f52:	f04f 0a07 	mov.w	sl, #7
  oqp->q_counter = size;
  200f56:	687d      	ldr	r5, [r7, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200f58:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200f5c:	f8c1 b000 	str.w	fp, [r1]
  iqp->q_counter = 0;
  200f60:	6153      	str	r3, [r2, #20]
  oqp->q_counter = size;
  200f62:	6395      	str	r5, [r2, #56]	; 0x38
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  200f64:	4d4b      	ldr	r5, [pc, #300]	; (201094 <main+0x5f4>)
  sdp->state = SD_STOP;
  200f66:	f882 9008 	strb.w	r9, [r2, #8]
  200f6a:	f885 9000 	strb.w	r9, [r5]
  sdp->vmt = &vmt;
  200f6e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 2010f8 <main+0x658>
  iqp->q_notify  = infy;
  200f72:	6293      	str	r3, [r2, #40]	; 0x28
  200f74:	f840 9b04 	str.w	r9, [r0], #4
  oqp->q_top     = bp + size;
  200f78:	f10e 0910 	add.w	r9, lr, #16
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  200f7c:	6050      	str	r0, [r2, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200f7e:	f06f 003f 	mvn.w	r0, #63	; 0x3f
  gptp->config = NULL;
  200f82:	606b      	str	r3, [r5, #4]
  tqp->next = (thread_t *)tqp;
  200f84:	f102 050c 	add.w	r5, r2, #12
  iqp->q_buffer  = bp;
  200f88:	f8c2 c018 	str.w	ip, [r2, #24]
  iqp->q_link    = link;
  200f8c:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  200f8e:	6512      	str	r2, [r2, #80]	; 0x50
  200f90:	f881 0352 	strb.w	r0, [r1, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200f94:	f8c1 b188 	str.w	fp, [r1, #392]	; 0x188
  GPTD1.tim = STM32_TIM1;
  200f98:	483e      	ldr	r0, [pc, #248]	; (201094 <main+0x5f4>)
  iqp->q_rdptr   = bp;
  200f9a:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200f9e:	f8c1 b008 	str.w	fp, [r1, #8]
  200fa2:	f102 0b30 	add.w	fp, r2, #48	; 0x30
  oqp->q_buffer  = bp;
  200fa6:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  200faa:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  200fae:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
  200fb2:	4939      	ldr	r1, [pc, #228]	; (201098 <main+0x5f8>)
  oqp->q_notify  = onfy;
  200fb4:	f8df e144 	ldr.w	lr, [pc, #324]	; 2010fc <main+0x65c>
  200fb8:	60c1      	str	r1, [r0, #12]

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  200fba:	f5a1 4108 	sub.w	r1, r1, #34816	; 0x8800
  200fbe:	f8c2 e04c 	str.w	lr, [r2, #76]	; 0x4c
  SD7.clock = STM32_UART7CLK;
  200fc2:	f8df e13c 	ldr.w	lr, [pc, #316]	; 201100 <main+0x660>
  iqp->q_wrptr   = bp;
  200fc6:	f8c2 c020 	str.w	ip, [r2, #32]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  200fca:	f04f 0c80 	mov.w	ip, #128	; 0x80
  SD7.usart = UART7;
  200fce:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  200fd0:	f8c2 e058 	str.w	lr, [r2, #88]	; 0x58
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  200fd4:	4931      	ldr	r1, [pc, #196]	; (20109c <main+0x5fc>)
  200fd6:	f8df e12c 	ldr.w	lr, [pc, #300]	; 201104 <main+0x664>
  200fda:	4831      	ldr	r0, [pc, #196]	; (2010a0 <main+0x600>)
  iqp->q_top     = bp + size;
  200fdc:	f8c2 801c 	str.w	r8, [r2, #28]
  oqp->q_top     = bp + size;
  200fe0:	f8c2 9040 	str.w	r9, [r2, #64]	; 0x40
  200fe4:	60d5      	str	r5, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  200fe6:	6115      	str	r5, [r2, #16]
  tqp->next = (thread_t *)tqp;
  200fe8:	f8c2 b030 	str.w	fp, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  200fec:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
  200ff0:	f8c1 e004 	str.w	lr, [r1, #4]
  SysTick->VAL = 0;
  200ff4:	608b      	str	r3, [r1, #8]
  200ff6:	2320      	movs	r3, #32
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  200ff8:	f8c1 a000 	str.w	sl, [r1]
  200ffc:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  201000:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  201004:	7a13      	ldrb	r3, [r2, #8]
  201006:	2b01      	cmp	r3, #1
  201008:	d103      	bne.n	201012 <main+0x572>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  20100a:	6c33      	ldr	r3, [r6, #64]	; 0x40
  20100c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  201010:	6433      	str	r3, [r6, #64]	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201012:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201014:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201018:	4822      	ldr	r0, [pc, #136]	; (2010a4 <main+0x604>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20101a:	2601      	movs	r6, #1
  USART_TypeDef *u = sdp->usart;
  20101c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20101e:	f240 1e2d 	movw	lr, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201022:	fba0 0101 	umull	r0, r1, r0, r1
  u->ICR = 0xFFFFFFFFU;
  201026:	f04f 30ff 	mov.w	r0, #4294967295
  20102a:	2500      	movs	r5, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20102c:	0a89      	lsrs	r1, r1, #10
  20102e:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201030:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201034:	609e      	str	r6, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201036:	f8c3 e000 	str.w	lr, [r3]
  u->ICR = 0xFFFFFFFFU;
  20103a:	6218      	str	r0, [r3, #32]
  sdp->state = SD_READY;
  20103c:	f04f 0302 	mov.w	r3, #2
    sdp->rxmask = 0xFF;
  201040:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  201044:	7213      	strb	r3, [r2, #8]
  201046:	f385 8811 	msr	BASEPRI, r5
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  20104a:	f44f 7080 	mov.w	r0, #256	; 0x100
    {
        if(first == false)
        {
            for (int i=0; i<window; i++)
            {
               value = sdGet(&SD7);
  20104e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 201108 <main+0x668>
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  201052:	f000 fead 	bl	201db0 <_pal_lld_setgroupmode.constprop.3>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  201056:	2080      	movs	r0, #128	; 0x80
  201058:	f000 feaa 	bl	201db0 <_pal_lld_setgroupmode.constprop.3>
    float time = 0;
  20105c:	2000      	movs	r0, #0
    palSetPad(GPIOA, 3);
  20105e:	2108      	movs	r1, #8
  201060:	4a05      	ldr	r2, [pc, #20]	; (201078 <main+0x5d8>)
    palSetPad(GPIOC, 0);
  201062:	4b11      	ldr	r3, [pc, #68]	; (2010a8 <main+0x608>)
    float time = 0;
  201064:	6138      	str	r0, [r7, #16]
    palSetPad(GPIOA, 3);
  201066:	8311      	strh	r1, [r2, #24]
    palSetPad(GPIOC, 0);
  201068:	831e      	strh	r6, [r3, #24]
  20106a:	e053      	b.n	201114 <main+0x674>
  20106c:	40023800 	.word	0x40023800
  201070:	40026000 	.word	0x40026000
  201074:	40026400 	.word	0x40026400
  201078:	40020000 	.word	0x40020000
  20107c:	20000800 	.word	0x20000800
  201080:	20000a58 	.word	0x20000a58
  201084:	40021000 	.word	0x40021000
  201088:	003fcfff 	.word	0x003fcfff
  20108c:	40021800 	.word	0x40021800
  201090:	e000e100 	.word	0xe000e100
  201094:	20000834 	.word	0x20000834
  201098:	40010000 	.word	0x40010000
  20109c:	e000e010 	.word	0xe000e010
  2010a0:	e000ed00 	.word	0xe000ed00
  2010a4:	1b4e81b5 	.word	0x1b4e81b5
  2010a8:	40020800 	.word	0x40020800
  2010ac:	40005551 	.word	0x40005551
  2010b0:	b0000bb0 	.word	0xb0000bb0
  2010b4:	000aaa0a 	.word	0x000aaa0a
  2010b8:	2aae8028 	.word	0x2aae8028
  2010bc:	20000a38 	.word	0x20000a38
  2010c0:	18004001 	.word	0x18004001
  2010c4:	01555051 	.word	0x01555051
  2010c8:	55505555 	.word	0x55505555
  2010cc:	00bb00b0 	.word	0x00bb00b0
  2010d0:	40020c00 	.word	0x40020c00
  2010d4:	cffffff3 	.word	0xcffffff3
  2010d8:	40021400 	.word	0x40021400
  2010dc:	51155555 	.word	0x51155555
  2010e0:	3cccf000 	.word	0x3cccf000
  2010e4:	00b0b000 	.word	0x00b0b000
  2010e8:	55555550 	.word	0x55555550
  2010ec:	08001ed4 	.word	0x08001ed4
  2010f0:	00022c16 	.word	0x00022c16
  2010f4:	20000a48 	.word	0x20000a48
  2010f8:	08001f24 	.word	0x08001f24
  2010fc:	00200711 	.word	0x00200711
  201100:	0337f980 	.word	0x0337f980
  201104:	00034bbf 	.word	0x00034bbf
  201108:	20000a64 	.word	0x20000a64
                   chThdSleepMilliseconds(30);
                   time = time + 0.03;
               }
               else
               {
                   i--;
  20110c:	3d01      	subs	r5, #1
            for (int i=0; i<window; i++)
  20110e:	3501      	adds	r5, #1
  201110:	2d04      	cmp	r5, #4
  201112:	dc49      	bgt.n	2011a8 <main+0x708>
               value = sdGet(&SD7);
  201114:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201118:	4640      	mov	r0, r8
  20111a:	f000 fcb9 	bl	201a90 <iqGetTimeout>
               if (value == 'R')
  20111e:	2852      	cmp	r0, #82	; 0x52
               value = sdGet(&SD7);
  201120:	60f8      	str	r0, [r7, #12]
               if (value == 'R')
  201122:	d1f3      	bne.n	20110c <main+0x66c>
                   sdRead(&SD7, (uint8_t *)&value , 3);
  201124:	2203      	movs	r2, #3
  201126:	f107 010c 	add.w	r1, r7, #12
  20112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  20112e:	4640      	mov	r0, r8
  201130:	f000 fc3e 	bl	2019b0 <iqReadTimeout>
    unsigned int res = 0;
  201134:	2100      	movs	r1, #0
                   rass[i] = ASCIItoNUM(value, 3);
  201136:	f8d7 e00c 	ldr.w	lr, [r7, #12]
  20113a:	f04f 0902 	mov.w	r9, #2
  20113e:	460a      	mov	r2, r1
  201140:	e00a      	b.n	201158 <main+0x6b8>
            exp *= 10;
  201142:	f1b9 0f01 	cmp.w	r9, #1
        res = res + (buff-48)*exp;
  201146:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  20114a:	fa5f f980 	uxtb.w	r9, r0
            exp *= 10;
  20114e:	bf14      	ite	ne
  201150:	2064      	movne	r0, #100	; 0x64
  201152:	200a      	moveq	r0, #10
        res = res + (buff-48)*exp;
  201154:	fb00 1103 	mla	r1, r0, r3, r1
        buff = (uint32_t)(buff >> (8*i));
  201158:	fa2e f302 	lsr.w	r3, lr, r2
  20115c:	f109 30ff 	add.w	r0, r9, #4294967295
        buff = (uint32_t)(buff >> (8*m));
  201160:	3208      	adds	r2, #8
  201162:	b2db      	uxtb	r3, r3
        for(unsigned char j=(m-1)-i;j>0;j--)
  201164:	f1b9 0f00 	cmp.w	r9, #0
  201168:	d1eb      	bne.n	201142 <main+0x6a2>
                   rass[i] = ASCIItoNUM(value, 3);
  20116a:	f107 0238 	add.w	r2, r7, #56	; 0x38
        res = res + (buff-48)*exp;
  20116e:	3b30      	subs	r3, #48	; 0x30
  201170:	2020      	movs	r0, #32
  201172:	440b      	add	r3, r1
                   rass[i] = ASCIItoNUM(value, 3);
  201174:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  201178:	f822 3c24 	strh.w	r3, [r2, #-36]
  20117c:	f380 8811 	msr	BASEPRI, r0
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  201180:	211e      	movs	r1, #30
  201182:	2008      	movs	r0, #8
  201184:	f000 fb04 	bl	201790 <chSchGoSleepTimeoutS>
  201188:	f389 8811 	msr	BASEPRI, r9
                   time = time + 0.03;
  20118c:	6938      	ldr	r0, [r7, #16]
            for (int i=0; i<window; i++)
  20118e:	3501      	adds	r5, #1
                   time = time + 0.03;
  201190:	f7ff fa18 	bl	2005c4 <__aeabi_f2d>
  201194:	a34c      	add	r3, pc, #304	; (adr r3, 2012c8 <main+0x828>)
  201196:	e9d3 2300 	ldrd	r2, r3, [r3]
  20119a:	f7ff f8b5 	bl	200308 <__adddf3>
  20119e:	f7ff fa65 	bl	20066c <__aeabi_d2f>
            for (int i=0; i<window; i++)
  2011a2:	2d04      	cmp	r5, #4
                   time = time + 0.03;
  2011a4:	6138      	str	r0, [r7, #16]
            for (int i=0; i<window; i++)
  2011a6:	ddb5      	ble.n	201114 <main+0x674>
            }
            first = true;
        }


        value = sdGet(&SD7);
  2011a8:	4d49      	ldr	r5, [pc, #292]	; (2012d0 <main+0x830>)
  2011aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
  2011ae:	4628      	mov	r0, r5
  2011b0:	f000 fc6e 	bl	201a90 <iqGetTimeout>
        if (value == 'R')
  2011b4:	2852      	cmp	r0, #82	; 0x52
        value = sdGet(&SD7);
  2011b6:	60f8      	str	r0, [r7, #12]
        if (value == 'R')
  2011b8:	d1f7      	bne.n	2011aa <main+0x70a>
        {
            num = rass[window/2+1];
  2011ba:	f8b7 e01a 	ldrh.w	lr, [r7, #26]
{
  2011be:	46ea      	mov	sl, sp
        z[k]=x[k];
  2011c0:	8abb      	ldrh	r3, [r7, #20]
  2011c2:	2503      	movs	r5, #3
  2011c4:	f8b7 8016 	ldrh.w	r8, [r7, #22]
  2011c8:	8b38      	ldrh	r0, [r7, #24]
  2011ca:	f8b7 c01c 	ldrh.w	ip, [r7, #28]
            num = rass[window/2+1];
  2011ce:	f8a7 e008 	strh.w	lr, [r7, #8]
        z[k]=x[k];
  2011d2:	f8a7 e026 	strh.w	lr, [r7, #38]	; 0x26
  2011d6:	843b      	strh	r3, [r7, #32]
  2011d8:	f8a7 8022 	strh.w	r8, [r7, #34]	; 0x22
  2011dc:	84b8      	strh	r0, [r7, #36]	; 0x24
  2011de:	f8a7 c028 	strh.w	ip, [r7, #40]	; 0x28
                   rass[i] = ASCIItoNUM(value, 3);
  2011e2:	2100      	movs	r1, #0
  2011e4:	460a      	mov	r2, r1
            if (x[j]<x[j+1])
  2011e6:	004b      	lsls	r3, r1, #1
  2011e8:	f834 9011 	ldrh.w	r9, [r4, r1, lsl #1]
        for (uint16_t j=0; j<(sizeof(x)-i-1); j++)
  2011ec:	3201      	adds	r2, #1
            if (x[j]<x[j+1])
  2011ee:	3302      	adds	r3, #2
        for (uint16_t j=0; j<(sizeof(x)-i-1); j++)
  2011f0:	b292      	uxth	r2, r2
            if (x[j]<x[j+1])
  2011f2:	f834 b003 	ldrh.w	fp, [r4, r3]
  2011f6:	45d9      	cmp	r9, fp
  2011f8:	d203      	bcs.n	201202 <main+0x762>
                x[j] = x[j + 1];
  2011fa:	f824 b011 	strh.w	fp, [r4, r1, lsl #1]
                x[j + 1] = buff;
  2011fe:	f824 9003 	strh.w	r9, [r4, r3]
        for (uint16_t j=0; j<(sizeof(x)-i-1); j++)
  201202:	42aa      	cmp	r2, r5
  201204:	4611      	mov	r1, r2
  201206:	d3ee      	bcc.n	2011e6 <main+0x746>
    for (unsigned int i=0; i<sizeof(x)-1; i++ )
  201208:	3d01      	subs	r5, #1
  20120a:	d1ea      	bne.n	2011e2 <main+0x742>
    y = z[window/2+1];
  20120c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
            for (int i=0; i<window-1; i++)
            {
                rass[i] = rass[i+1];
            }

            sdRead(&SD7, (uint8_t *)&value , 3);
  20120e:	2203      	movs	r2, #3
  201210:	f64f 73ff 	movw	r3, #65535	; 0xffff
                rass[i] = rass[i+1];
  201214:	82f8      	strh	r0, [r7, #22]
            flt_num = Filter_Mediana(rass, window);
  201216:	8179      	strh	r1, [r7, #10]
  201218:	46d5      	mov	sp, sl
            sdRead(&SD7, (uint8_t *)&value , 3);
  20121a:	f107 010c 	add.w	r1, r7, #12
  20121e:	482c      	ldr	r0, [pc, #176]	; (2012d0 <main+0x830>)
                rass[i] = rass[i+1];
  201220:	f8a7 8014 	strh.w	r8, [r7, #20]
            rass[window-1] = ASCIItoNUM(value, 3);
  201224:	f04f 0802 	mov.w	r8, #2
                rass[i] = rass[i+1];
  201228:	f8a7 e018 	strh.w	lr, [r7, #24]
  20122c:	f8a7 c01a 	strh.w	ip, [r7, #26]
            sdRead(&SD7, (uint8_t *)&value , 3);
  201230:	f000 fbbe 	bl	2019b0 <iqReadTimeout>
            rass[window-1] = ASCIItoNUM(value, 3);
  201234:	68f9      	ldr	r1, [r7, #12]
  201236:	462a      	mov	r2, r5
  201238:	e00a      	b.n	201250 <main+0x7b0>
            exp *= 10;
  20123a:	f1b8 0f01 	cmp.w	r8, #1
        res = res + (buff-48)*exp;
  20123e:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  201242:	fa5f f880 	uxtb.w	r8, r0
            exp *= 10;
  201246:	bf14      	ite	ne
  201248:	2064      	movne	r0, #100	; 0x64
  20124a:	200a      	moveq	r0, #10
        res = res + (buff-48)*exp;
  20124c:	fb00 5503 	mla	r5, r0, r3, r5
        buff = (uint32_t)(buff >> (8*i));
  201250:	fa21 f302 	lsr.w	r3, r1, r2
  201254:	f108 30ff 	add.w	r0, r8, #4294967295
        buff = (uint32_t)(buff >> (8*m));
  201258:	3208      	adds	r2, #8
  20125a:	b2db      	uxtb	r3, r3
        for(unsigned char j=(m-1)-i;j>0;j--)
  20125c:	f1b8 0f00 	cmp.w	r8, #0
  201260:	d1eb      	bne.n	20123a <main+0x79a>
        res = res + (buff-48)*exp;
  201262:	3b30      	subs	r3, #48	; 0x30
  201264:	2220      	movs	r2, #32
  201266:	441d      	add	r5, r3
            rass[window-1] = ASCIItoNUM(value, 3);
  201268:	83bd      	strh	r5, [r7, #28]
  20126a:	f382 8811 	msr	BASEPRI, r2
  20126e:	211e      	movs	r1, #30
  201270:	2008      	movs	r0, #8
  201272:	f000 fa8d 	bl	201790 <chSchGoSleepTimeoutS>
  201276:	f388 8811 	msr	BASEPRI, r8
            chThdSleepMilliseconds(30);
            time = time + 0.03;
  20127a:	6938      	ldr	r0, [r7, #16]
  20127c:	f7ff f9a2 	bl	2005c4 <__aeabi_f2d>
  201280:	a311      	add	r3, pc, #68	; (adr r3, 2012c8 <main+0x828>)
  201282:	e9d3 2300 	ldrd	r2, r3, [r3]
  201286:	f7ff f83f 	bl	200308 <__adddf3>
  20128a:	f7ff f9ef 	bl	20066c <__aeabi_d2f>

//            chprintf(((BaseSequentialStream *)&SD7), "Time:(%d)\tNum:(%d)\tFlt:(%d)\n\r", (int)time, num, flt_num);
            sdWrite( &SD7, (uint8_t *)&time, sizeof(time));
  20128e:	f107 0110 	add.w	r1, r7, #16
            time = time + 0.03;
  201292:	6138      	str	r0, [r7, #16]
            sdWrite( &SD7, (uint8_t *)&time, sizeof(time));
  201294:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201298:	2204      	movs	r2, #4
  20129a:	480e      	ldr	r0, [pc, #56]	; (2012d4 <main+0x834>)
  20129c:	f000 fad8 	bl	201850 <oqWriteTimeout>
            sdWrite( &SD7, (uint8_t *)&num, sizeof(num));
  2012a0:	f107 0108 	add.w	r1, r7, #8
  2012a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2012a8:	2202      	movs	r2, #2
  2012aa:	480a      	ldr	r0, [pc, #40]	; (2012d4 <main+0x834>)
  2012ac:	f000 fad0 	bl	201850 <oqWriteTimeout>
            sdWrite( &SD7, (uint8_t *)&flt_num, sizeof(flt_num));
  2012b0:	f107 010a 	add.w	r1, r7, #10
  2012b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2012b8:	2202      	movs	r2, #2
  2012ba:	4806      	ldr	r0, [pc, #24]	; (2012d4 <main+0x834>)
  2012bc:	f000 fac8 	bl	201850 <oqWriteTimeout>
  2012c0:	e772      	b.n	2011a8 <main+0x708>
  2012c2:	bf00      	nop
  2012c4:	f3af 8000 	nop.w
  2012c8:	eb851eb8 	.word	0xeb851eb8
  2012cc:	3f9eb851 	.word	0x3f9eb851
  2012d0:	20000a64 	.word	0x20000a64
  2012d4:	20000a88 	.word	0x20000a88
	...

002012e0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  2012e0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2012e2:	4b33      	ldr	r3, [pc, #204]	; (2013b0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  2012e4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  2012e8:	4a32      	ldr	r2, [pc, #200]	; (2013b4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2012ea:	4c33      	ldr	r4, [pc, #204]	; (2013b8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2012ec:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2012ee:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2012f0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2012f2:	681a      	ldr	r2, [r3, #0]
  2012f4:	f042 0201 	orr.w	r2, r2, #1
  2012f8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2012fa:	680b      	ldr	r3, [r1, #0]
  2012fc:	079b      	lsls	r3, r3, #30
  2012fe:	d5fc      	bpl.n	2012fa <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201300:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201302:	4a2b      	ldr	r2, [pc, #172]	; (2013b0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201304:	f023 0303 	bic.w	r3, r3, #3
  201308:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20130a:	688b      	ldr	r3, [r1, #8]
  20130c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20130e:	6893      	ldr	r3, [r2, #8]
  201310:	f013 030c 	ands.w	r3, r3, #12
  201314:	d1fb      	bne.n	20130e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201316:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201318:	4925      	ldr	r1, [pc, #148]	; (2013b0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  20131a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  20131e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201320:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201322:	6813      	ldr	r3, [r2, #0]
  201324:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201328:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  20132a:	680b      	ldr	r3, [r1, #0]
  20132c:	039d      	lsls	r5, r3, #14
  20132e:	d5fc      	bpl.n	20132a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201330:	4b22      	ldr	r3, [pc, #136]	; (2013bc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201332:	4820      	ldr	r0, [pc, #128]	; (2013b4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201334:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201336:	680b      	ldr	r3, [r1, #0]
  201338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20133c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20133e:	6843      	ldr	r3, [r0, #4]
  201340:	045c      	lsls	r4, r3, #17
  201342:	d5fc      	bpl.n	20133e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201344:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201346:	4a1b      	ldr	r2, [pc, #108]	; (2013b4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20134c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20134e:	6853      	ldr	r3, [r2, #4]
  201350:	03d9      	lsls	r1, r3, #15
  201352:	d5fc      	bpl.n	20134e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201354:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201356:	4917      	ldr	r1, [pc, #92]	; (2013b4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20135c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20135e:	684b      	ldr	r3, [r1, #4]
  201360:	039a      	lsls	r2, r3, #14
  201362:	d5fc      	bpl.n	20135e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201364:	4a12      	ldr	r2, [pc, #72]	; (2013b0 <__early_init+0xd0>)
  201366:	6813      	ldr	r3, [r2, #0]
  201368:	019b      	lsls	r3, r3, #6
  20136a:	d5fc      	bpl.n	201366 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20136c:	4b14      	ldr	r3, [pc, #80]	; (2013c0 <__early_init+0xe0>)
  20136e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201372:	4d14      	ldr	r5, [pc, #80]	; (2013c4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201374:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201378:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20137a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20137c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201380:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201384:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201386:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201388:	4909      	ldr	r1, [pc, #36]	; (2013b0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20138a:	f043 0302 	orr.w	r3, r3, #2
  20138e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201390:	688b      	ldr	r3, [r1, #8]
  201392:	f003 030c 	and.w	r3, r3, #12
  201396:	2b08      	cmp	r3, #8
  201398:	d1fa      	bne.n	201390 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20139a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2013a0:	644b      	str	r3, [r1, #68]	; 0x44
  2013a2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  2013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  2013a8:	bc30      	pop	{r4, r5}
  2013aa:	664b      	str	r3, [r1, #100]	; 0x64
  2013ac:	4770      	bx	lr
  2013ae:	bf00      	nop
  2013b0:	40023800 	.word	0x40023800
  2013b4:	40007000 	.word	0x40007000
  2013b8:	10000400 	.word	0x10000400
  2013bc:	09406c08 	.word	0x09406c08
  2013c0:	40023c00 	.word	0x40023c00
  2013c4:	30999400 	.word	0x30999400
	...

002013d0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  2013d0:	b480      	push	{r7}
  2013d2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2013d4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  2013d8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2013da:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2013de:	2300      	movs	r3, #0
  2013e0:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  2013e4:	46bd      	mov	sp, r7
  2013e6:	bc80      	pop	{r7}
  2013e8:	4770      	bx	lr
  2013ea:	bf00      	nop
  2013ec:	0000      	movs	r0, r0
	...

002013f0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  2013f0:	b470      	push	{r4, r5, r6}
  2013f2:	2320      	movs	r3, #32
  2013f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2013f8:	4e0d      	ldr	r6, [pc, #52]	; (201430 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  2013fa:	1e4a      	subs	r2, r1, #1
  2013fc:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  2013fe:	4c0d      	ldr	r4, [pc, #52]	; (201434 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201400:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  201402:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  201404:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201406:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  201408:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20140a:	1858      	adds	r0, r3, r1
  20140c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20140e:	1a23      	subs	r3, r4, r0
  201410:	429a      	cmp	r2, r3
  201412:	d806      	bhi.n	201422 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  201414:	4402      	add	r2, r0
  201416:	2300      	movs	r3, #0
  201418:	6032      	str	r2, [r6, #0]
  20141a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20141e:	bc70      	pop	{r4, r5, r6}
  201420:	4770      	bx	lr
    return NULL;
  201422:	2000      	movs	r0, #0
  201424:	2300      	movs	r3, #0
  201426:	f383 8811 	msr	BASEPRI, r3
}
  20142a:	bc70      	pop	{r4, r5, r6}
  20142c:	4770      	bx	lr
  20142e:	bf00      	nop
  201430:	20000a34 	.word	0x20000a34
  201434:	20000a30 	.word	0x20000a30
	...

00201440 <wakeup>:
  201440:	2320      	movs	r3, #32
  201442:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  201446:	f890 3020 	ldrb.w	r3, [r0, #32]
  20144a:	2b07      	cmp	r3, #7
  20144c:	d80e      	bhi.n	20146c <wakeup+0x2c>
  20144e:	e8df f003 	tbb	[pc, r3]
  201452:	0d28      	.short	0x0d28
  201454:	0408240d 	.word	0x0408240d
  201458:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20145a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20145c:	6893      	ldr	r3, [r2, #8]
  20145e:	3301      	adds	r3, #1
  201460:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201462:	e890 000c 	ldmia.w	r0, {r2, r3}
  201466:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201468:	6802      	ldr	r2, [r0, #0]
  20146a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20146c:	2200      	movs	r2, #0
  20146e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201470:	4b0e      	ldr	r3, [pc, #56]	; (2014ac <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201472:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201476:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201478:	f04f 34ff 	mov.w	r4, #4294967295
  20147c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20147e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201480:	689a      	ldr	r2, [r3, #8]
  201482:	428a      	cmp	r2, r1
  201484:	d2fb      	bcs.n	20147e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  201486:	685a      	ldr	r2, [r3, #4]
  201488:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20148a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20148c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20148e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  201490:	6058      	str	r0, [r3, #4]
  201492:	f381 8811 	msr	BASEPRI, r1
}
  201496:	bc10      	pop	{r4}
  201498:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20149a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20149c:	2200      	movs	r2, #0
  20149e:	601a      	str	r2, [r3, #0]
  2014a0:	e7e4      	b.n	20146c <wakeup+0x2c>
  2014a2:	2300      	movs	r3, #0
  2014a4:	f383 8811 	msr	BASEPRI, r3
  2014a8:	4770      	bx	lr
  2014aa:	bf00      	nop
  2014ac:	20000844 	.word	0x20000844

002014b0 <_idle_thread.lto_priv.35>:
static void _idle_thread(void *p) {
  2014b0:	e7fe      	b.n	2014b0 <_idle_thread.lto_priv.35>
  2014b2:	bf00      	nop
	...

002014c0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2014c0:	4b08      	ldr	r3, [pc, #32]	; (2014e4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2014c2:	681a      	ldr	r2, [r3, #0]
  2014c4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2014c6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2014c8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2014cc:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2014ce:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2014d0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2014d2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2014d4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2014d6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2014da:	619a      	str	r2, [r3, #24]
}
  2014dc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2014de:	f7fe bef9 	b.w	2002d4 <_port_switch>
  2014e2:	bf00      	nop
  2014e4:	20000844 	.word	0x20000844
	...

002014f0 <_port_irq_epilogue>:
  2014f0:	2320      	movs	r3, #32
  2014f2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2014f6:	4b11      	ldr	r3, [pc, #68]	; (20153c <_port_irq_epilogue+0x4c>)
  2014f8:	685b      	ldr	r3, [r3, #4]
  2014fa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2014fe:	d102      	bne.n	201506 <_port_irq_epilogue+0x16>
  201500:	f383 8811 	msr	BASEPRI, r3
  201504:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201506:	b480      	push	{r7}
  201508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20150a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20150e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201512:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201516:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20151a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20151e:	4a08      	ldr	r2, [pc, #32]	; (201540 <_port_irq_epilogue+0x50>)
  201520:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201522:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201524:	6889      	ldr	r1, [r1, #8]
  201526:	6892      	ldr	r2, [r2, #8]
  201528:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20152a:	bf8c      	ite	hi
  20152c:	4a05      	ldrhi	r2, [pc, #20]	; (201544 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20152e:	4a06      	ldrls	r2, [pc, #24]	; (201548 <_port_irq_epilogue+0x58>)
  201530:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201534:	46bd      	mov	sp, r7
  201536:	bc80      	pop	{r7}
  201538:	4770      	bx	lr
  20153a:	bf00      	nop
  20153c:	e000ed00 	.word	0xe000ed00
  201540:	20000844 	.word	0x20000844
  201544:	002002f5 	.word	0x002002f5
  201548:	002002f8 	.word	0x002002f8
  20154c:	00000000 	.word	0x00000000

00201550 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  201550:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201552:	4b07      	ldr	r3, [pc, #28]	; (201570 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  201554:	4807      	ldr	r0, [pc, #28]	; (201574 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201556:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  201558:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20155a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20155e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  201560:	b10a      	cbz	r2, 201566 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  201562:	6c40      	ldr	r0, [r0, #68]	; 0x44
  201564:	4790      	blx	r2
}
  201566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20156a:	f7ff bfc1 	b.w	2014f0 <_port_irq_epilogue>
  20156e:	bf00      	nop
  201570:	40026400 	.word	0x40026400
  201574:	200009b0 	.word	0x200009b0
	...

00201580 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201580:	4b08      	ldr	r3, [pc, #32]	; (2015a4 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  201582:	4809      	ldr	r0, [pc, #36]	; (2015a8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201584:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  201586:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201588:	0d89      	lsrs	r1, r1, #22
  20158a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20158e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  201590:	058c      	lsls	r4, r1, #22
  201592:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  201594:	b10a      	cbz	r2, 20159a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  201596:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  201598:	4790      	blx	r2
}
  20159a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20159e:	f7ff bfa7 	b.w	2014f0 <_port_irq_epilogue>
  2015a2:	bf00      	nop
  2015a4:	40026000 	.word	0x40026000
  2015a8:	200009b0 	.word	0x200009b0
  2015ac:	00000000 	.word	0x00000000

002015b0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2015b0:	4b08      	ldr	r3, [pc, #32]	; (2015d4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  2015b2:	4809      	ldr	r0, [pc, #36]	; (2015d8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2015b4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  2015b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2015b8:	0c09      	lsrs	r1, r1, #16
  2015ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  2015be:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  2015c0:	040c      	lsls	r4, r1, #16
  2015c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  2015c4:	b10a      	cbz	r2, 2015ca <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  2015c6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  2015c8:	4790      	blx	r2
}
  2015ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2015ce:	f7ff bf8f 	b.w	2014f0 <_port_irq_epilogue>
  2015d2:	bf00      	nop
  2015d4:	40026000 	.word	0x40026000
  2015d8:	200009b0 	.word	0x200009b0
  2015dc:	00000000 	.word	0x00000000

002015e0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2015e0:	4b08      	ldr	r3, [pc, #32]	; (201604 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2015e2:	4809      	ldr	r0, [pc, #36]	; (201608 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2015e4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2015e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2015e8:	0989      	lsrs	r1, r1, #6
  2015ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2015ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  2015f0:	018c      	lsls	r4, r1, #6
  2015f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  2015f4:	b10a      	cbz	r2, 2015fa <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  2015f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2015f8:	4790      	blx	r2
}
  2015fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2015fe:	f7ff bf77 	b.w	2014f0 <_port_irq_epilogue>
  201602:	bf00      	nop
  201604:	40026000 	.word	0x40026000
  201608:	200009b0 	.word	0x200009b0
  20160c:	00000000 	.word	0x00000000

00201610 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  201610:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201612:	4b07      	ldr	r3, [pc, #28]	; (201630 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  201614:	4807      	ldr	r0, [pc, #28]	; (201634 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201616:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  201618:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20161a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20161e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  201620:	b10a      	cbz	r2, 201626 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  201622:	6a40      	ldr	r0, [r0, #36]	; 0x24
  201624:	4790      	blx	r2
}
  201626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20162a:	f7ff bf61 	b.w	2014f0 <_port_irq_epilogue>
  20162e:	bf00      	nop
  201630:	40026000 	.word	0x40026000
  201634:	200009b0 	.word	0x200009b0
	...

00201640 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201640:	4b08      	ldr	r3, [pc, #32]	; (201664 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  201642:	4809      	ldr	r0, [pc, #36]	; (201668 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201644:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  201646:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201648:	0d89      	lsrs	r1, r1, #22
  20164a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  20164e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  201650:	058c      	lsls	r4, r1, #22
  201652:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  201654:	b10a      	cbz	r2, 20165a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  201656:	69c0      	ldr	r0, [r0, #28]
  201658:	4790      	blx	r2
}
  20165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20165e:	f7ff bf47 	b.w	2014f0 <_port_irq_epilogue>
  201662:	bf00      	nop
  201664:	40026000 	.word	0x40026000
  201668:	200009b0 	.word	0x200009b0
  20166c:	00000000 	.word	0x00000000

00201670 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201670:	4b08      	ldr	r3, [pc, #32]	; (201694 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  201672:	4809      	ldr	r0, [pc, #36]	; (201698 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201674:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  201676:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201678:	0c09      	lsrs	r1, r1, #16
  20167a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20167e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  201680:	040c      	lsls	r4, r1, #16
  201682:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  201684:	b10a      	cbz	r2, 20168a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  201686:	6940      	ldr	r0, [r0, #20]
  201688:	4790      	blx	r2
}
  20168a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20168e:	f7ff bf2f 	b.w	2014f0 <_port_irq_epilogue>
  201692:	bf00      	nop
  201694:	40026000 	.word	0x40026000
  201698:	200009b0 	.word	0x200009b0
  20169c:	00000000 	.word	0x00000000

002016a0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2016a0:	4b08      	ldr	r3, [pc, #32]	; (2016c4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  2016a2:	4809      	ldr	r0, [pc, #36]	; (2016c8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2016a4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  2016a6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2016a8:	0989      	lsrs	r1, r1, #6
  2016aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  2016ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  2016b0:	018c      	lsls	r4, r1, #6
  2016b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  2016b4:	b10a      	cbz	r2, 2016ba <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  2016b6:	68c0      	ldr	r0, [r0, #12]
  2016b8:	4790      	blx	r2
}
  2016ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2016be:	f7ff bf17 	b.w	2014f0 <_port_irq_epilogue>
  2016c2:	bf00      	nop
  2016c4:	40026000 	.word	0x40026000
  2016c8:	200009b0 	.word	0x200009b0
  2016cc:	00000000 	.word	0x00000000

002016d0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2016d0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2016d2:	4b07      	ldr	r3, [pc, #28]	; (2016f0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  2016d4:	4a07      	ldr	r2, [pc, #28]	; (2016f4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2016d6:	6819      	ldr	r1, [r3, #0]
  2016d8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  2016dc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  2016de:	6813      	ldr	r3, [r2, #0]
  2016e0:	b10b      	cbz	r3, 2016e6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  2016e2:	6850      	ldr	r0, [r2, #4]
  2016e4:	4798      	blx	r3
}
  2016e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2016ea:	f7ff bf01 	b.w	2014f0 <_port_irq_epilogue>
  2016ee:	bf00      	nop
  2016f0:	40026000 	.word	0x40026000
  2016f4:	200009b0 	.word	0x200009b0
	...

00201700 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201700:	4b0e      	ldr	r3, [pc, #56]	; (20173c <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  201702:	6882      	ldr	r2, [r0, #8]
  201704:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201706:	490e      	ldr	r1, [pc, #56]	; (201740 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201708:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20170a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20170c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20170e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  201710:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201712:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201714:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201716:	6083      	str	r3, [r0, #8]
  tmp->n++;
  201718:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20171a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  20171e:	18e4      	adds	r4, r4, r3
  201720:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201724:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201726:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201728:	bf88      	it	hi
  20172a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  20172c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  20172e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201732:	bf38      	it	cc
  201734:	6003      	strcc	r3, [r0, #0]
}
  201736:	bc30      	pop	{r4, r5}
  201738:	4770      	bx	lr
  20173a:	bf00      	nop
  20173c:	e0001000 	.word	0xe0001000
  201740:	20000844 	.word	0x20000844
	...

00201750 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  201750:	4a0e      	ldr	r2, [pc, #56]	; (20178c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201752:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201754:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  201756:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201758:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  20175a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  20175c:	6994      	ldr	r4, [r2, #24]
  20175e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201760:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201762:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201766:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20176a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20176c:	6190      	str	r0, [r2, #24]
  20176e:	e000      	b.n	201772 <chSchDoReschedule+0x22>
  201770:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201772:	689a      	ldr	r2, [r3, #8]
  201774:	4291      	cmp	r1, r2
  201776:	d3fb      	bcc.n	201770 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201778:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20177a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20177c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20177e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201780:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201782:	605c      	str	r4, [r3, #4]
}
  201784:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201786:	f7fe bda5 	b.w	2002d4 <_port_switch>
  20178a:	bf00      	nop
  20178c:	20000844 	.word	0x20000844

00201790 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201790:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201794:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201796:	b5f0      	push	{r4, r5, r6, r7, lr}
  201798:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20179a:	d031      	beq.n	201800 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20179c:	4c1c      	ldr	r4, [pc, #112]	; (201810 <chSchGoSleepTimeoutS+0x80>)
  20179e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  2017a0:	481c      	ldr	r0, [pc, #112]	; (201814 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  2017a2:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  2017a4:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  2017a6:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  2017a8:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  2017aa:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  2017ac:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  2017ae:	d905      	bls.n	2017bc <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  2017b0:	1a89      	subs	r1, r1, r2
    p = p->next;
  2017b2:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  2017b4:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  2017b6:	891a      	ldrh	r2, [r3, #8]
  2017b8:	428a      	cmp	r2, r1
  2017ba:	d3f9      	bcc.n	2017b0 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  2017bc:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  2017be:	aa01      	add	r2, sp, #4
  vtp->next = p;
  2017c0:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  2017c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  2017c6:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  2017c8:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  2017ca:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  2017cc:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  2017ce:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  2017d2:	891a      	ldrh	r2, [r3, #8]
  2017d4:	1a51      	subs	r1, r2, r1
  2017d6:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  2017d8:	84a6      	strh	r6, [r4, #36]	; 0x24
  2017da:	f7ff fe71 	bl	2014c0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  2017de:	9b04      	ldr	r3, [sp, #16]
  2017e0:	b153      	cbz	r3, 2017f8 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  2017e2:	9b01      	ldr	r3, [sp, #4]
  2017e4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  2017e8:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  2017ea:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  2017ec:	4402      	add	r2, r0
  2017ee:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  2017f0:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  2017f2:	9b01      	ldr	r3, [sp, #4]
  2017f4:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  2017f6:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  2017f8:	69a3      	ldr	r3, [r4, #24]
}
  2017fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2017fc:	b007      	add	sp, #28
  2017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201800:	4c03      	ldr	r4, [pc, #12]	; (201810 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201802:	f7ff fe5d 	bl	2014c0 <chSchGoSleepS>
  return currp->u.rdymsg;
  201806:	69a3      	ldr	r3, [r4, #24]
}
  201808:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20180a:	b007      	add	sp, #28
  20180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20180e:	bf00      	nop
  201810:	20000844 	.word	0x20000844
  201814:	00201441 	.word	0x00201441
	...

00201820 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201820:	b161      	cbz	r1, 20183c <chThdEnqueueTimeoutS+0x1c>
  201822:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201824:	4b07      	ldr	r3, [pc, #28]	; (201844 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201826:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201828:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20182a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20182c:	6854      	ldr	r4, [r2, #4]
  20182e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201832:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201834:	6053      	str	r3, [r2, #4]
}
  201836:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201838:	f7ff bfaa 	b.w	201790 <chSchGoSleepTimeoutS>
}
  20183c:	f04f 30ff 	mov.w	r0, #4294967295
  201840:	4770      	bx	lr
  201842:	bf00      	nop
  201844:	20000844 	.word	0x20000844
	...

00201850 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201854:	4699      	mov	r9, r3
  201856:	b083      	sub	sp, #12
  201858:	4604      	mov	r4, r0
  20185a:	460e      	mov	r6, r1
  20185c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20185e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201862:	2320      	movs	r3, #32
  201864:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201868:	4b26      	ldr	r3, [pc, #152]	; (201904 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20186a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20186e:	2700      	movs	r7, #0
  201870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201872:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201876:	fa19 f383 	uxtah	r3, r9, r3
  20187a:	b29b      	uxth	r3, r3
  20187c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20187e:	68a3      	ldr	r3, [r4, #8]
  201880:	b313      	cbz	r3, 2018c8 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201882:	6961      	ldr	r1, [r4, #20]
  201884:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201888:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20188a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20188c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20188e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201890:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201892:	7833      	ldrb	r3, [r6, #0]
  201894:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201896:	6961      	ldr	r1, [r4, #20]
  201898:	6923      	ldr	r3, [r4, #16]
  20189a:	4299      	cmp	r1, r3
  20189c:	d301      	bcc.n	2018a2 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20189e:	68e3      	ldr	r3, [r4, #12]
  2018a0:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  2018a2:	f1b8 0f00 	cmp.w	r8, #0
  2018a6:	d001      	beq.n	2018ac <oqWriteTimeout+0x5c>
      nfy(oqp);
  2018a8:	4620      	mov	r0, r4
  2018aa:	47c0      	blx	r8
  2018ac:	2300      	movs	r3, #0
  2018ae:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  2018b2:	3d01      	subs	r5, #1
    w++;
  2018b4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2018b8:	d019      	beq.n	2018ee <oqWriteTimeout+0x9e>
  2018ba:	2320      	movs	r3, #32
  2018bc:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  2018c0:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2018c2:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  2018c4:	2b00      	cmp	r3, #0
  2018c6:	d1dc      	bne.n	201882 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2018c8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2018cc:	4592      	cmp	sl, r2
  2018ce:	d812      	bhi.n	2018f6 <oqWriteTimeout+0xa6>
  2018d0:	4a0c      	ldr	r2, [pc, #48]	; (201904 <oqWriteTimeout+0xb4>)
  2018d2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2018d4:	9a01      	ldr	r2, [sp, #4]
  2018d6:	1a51      	subs	r1, r2, r1
  2018d8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2018da:	4589      	cmp	r9, r1
  2018dc:	d305      	bcc.n	2018ea <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  2018de:	4620      	mov	r0, r4
  2018e0:	f7ff ff9e 	bl	201820 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2018e4:	2800      	cmp	r0, #0
  2018e6:	d0ca      	beq.n	20187e <oqWriteTimeout+0x2e>
  2018e8:	2300      	movs	r3, #0
  2018ea:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  2018ee:	4638      	mov	r0, r7
  2018f0:	b003      	add	sp, #12
  2018f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2018f6:	4649      	mov	r1, r9
  2018f8:	4620      	mov	r0, r4
  2018fa:	f7ff ff91 	bl	201820 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2018fe:	2800      	cmp	r0, #0
  201900:	d0bd      	beq.n	20187e <oqWriteTimeout+0x2e>
  201902:	e7f1      	b.n	2018e8 <oqWriteTimeout+0x98>
  201904:	20000844 	.word	0x20000844
	...

00201910 <_writet.lto_priv.33>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201910:	3030      	adds	r0, #48	; 0x30
  201912:	f7ff bf9d 	b.w	201850 <oqWriteTimeout>
  201916:	bf00      	nop
	...

00201920 <_write.lto_priv.27>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201920:	3030      	adds	r0, #48	; 0x30
  201922:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201926:	f7ff bf93 	b.w	201850 <oqWriteTimeout>
  20192a:	bf00      	nop
  20192c:	0000      	movs	r0, r0
	...

00201930 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201932:	4604      	mov	r4, r0
  201934:	460f      	mov	r7, r1
  201936:	4616      	mov	r6, r2
  201938:	2320      	movs	r3, #32
  20193a:	f383 8811 	msr	BASEPRI, r3
  20193e:	e003      	b.n	201948 <oqPutTimeout+0x18>
  201940:	f7ff ff6e 	bl	201820 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201944:	2800      	cmp	r0, #0
  201946:	db19      	blt.n	20197c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201948:	68a5      	ldr	r5, [r4, #8]
  20194a:	4631      	mov	r1, r6
  20194c:	4620      	mov	r0, r4
  20194e:	2d00      	cmp	r5, #0
  201950:	d0f6      	beq.n	201940 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201952:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201954:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201956:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201958:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  20195a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  20195c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  20195e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201960:	6962      	ldr	r2, [r4, #20]
  201962:	6923      	ldr	r3, [r4, #16]
  201964:	429a      	cmp	r2, r3
  201966:	d301      	bcc.n	20196c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201968:	68e3      	ldr	r3, [r4, #12]
  20196a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  20196c:	69e3      	ldr	r3, [r4, #28]
  20196e:	b10b      	cbz	r3, 201974 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201970:	4620      	mov	r0, r4
  201972:	4798      	blx	r3
  201974:	2000      	movs	r0, #0
  201976:	f380 8811 	msr	BASEPRI, r0
}
  20197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20197c:	f385 8811 	msr	BASEPRI, r5
  201980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201982:	bf00      	nop
	...

00201990 <_putt.lto_priv.31>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201990:	3030      	adds	r0, #48	; 0x30
  201992:	f7ff bfcd 	b.w	201930 <oqPutTimeout>
  201996:	bf00      	nop
	...

002019a0 <_put.lto_priv.29>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  2019a0:	3030      	adds	r0, #48	; 0x30
  2019a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  2019a6:	f7ff bfc3 	b.w	201930 <oqPutTimeout>
  2019aa:	bf00      	nop
  2019ac:	0000      	movs	r0, r0
	...

002019b0 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  2019b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2019b4:	4699      	mov	r9, r3
  2019b6:	b083      	sub	sp, #12
  2019b8:	4604      	mov	r4, r0
  2019ba:	460e      	mov	r6, r1
  2019bc:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  2019be:	f8d0 801c 	ldr.w	r8, [r0, #28]
  2019c2:	2320      	movs	r3, #32
  2019c4:	f383 8811 	msr	BASEPRI, r3
  2019c8:	4b26      	ldr	r3, [pc, #152]	; (201a64 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2019ca:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  2019ce:	2700      	movs	r7, #0
  2019d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2019d2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  2019d6:	fa19 f383 	uxtah	r3, r9, r3
  2019da:	b29b      	uxth	r3, r3
  2019dc:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  2019de:	68a3      	ldr	r3, [r4, #8]
  2019e0:	b313      	cbz	r3, 201a28 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  2019e2:	69a1      	ldr	r1, [r4, #24]
  2019e4:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  2019e8:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2019ea:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  2019ec:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  2019ee:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  2019f0:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2019f2:	780b      	ldrb	r3, [r1, #0]
  2019f4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  2019f6:	69a1      	ldr	r1, [r4, #24]
  2019f8:	6923      	ldr	r3, [r4, #16]
  2019fa:	4299      	cmp	r1, r3
  2019fc:	d301      	bcc.n	201a02 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  2019fe:	68e3      	ldr	r3, [r4, #12]
  201a00:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  201a02:	f1b8 0f00 	cmp.w	r8, #0
  201a06:	d001      	beq.n	201a0c <iqReadTimeout+0x5c>
      nfy(iqp);
  201a08:	4620      	mov	r0, r4
  201a0a:	47c0      	blx	r8
  201a0c:	2300      	movs	r3, #0
  201a0e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  201a12:	3d01      	subs	r5, #1
    r++;
  201a14:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201a18:	d019      	beq.n	201a4e <iqReadTimeout+0x9e>
  201a1a:	2320      	movs	r3, #32
  201a1c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  201a20:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201a22:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  201a24:	2b00      	cmp	r3, #0
  201a26:	d1dc      	bne.n	2019e2 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201a28:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201a2c:	4592      	cmp	sl, r2
  201a2e:	d812      	bhi.n	201a56 <iqReadTimeout+0xa6>
  201a30:	4a0c      	ldr	r2, [pc, #48]	; (201a64 <iqReadTimeout+0xb4>)
  201a32:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201a34:	9a01      	ldr	r2, [sp, #4]
  201a36:	1a51      	subs	r1, r2, r1
  201a38:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201a3a:	4589      	cmp	r9, r1
  201a3c:	d305      	bcc.n	201a4a <iqReadTimeout+0x9a>
  201a3e:	4620      	mov	r0, r4
  201a40:	f7ff feee 	bl	201820 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201a44:	2800      	cmp	r0, #0
  201a46:	d0ca      	beq.n	2019de <iqReadTimeout+0x2e>
  201a48:	2300      	movs	r3, #0
  201a4a:	f383 8811 	msr	BASEPRI, r3
}
  201a4e:	4638      	mov	r0, r7
  201a50:	b003      	add	sp, #12
  201a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201a56:	4649      	mov	r1, r9
  201a58:	4620      	mov	r0, r4
  201a5a:	f7ff fee1 	bl	201820 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201a5e:	2800      	cmp	r0, #0
  201a60:	d0bd      	beq.n	2019de <iqReadTimeout+0x2e>
  201a62:	e7f1      	b.n	201a48 <iqReadTimeout+0x98>
  201a64:	20000844 	.word	0x20000844
	...

00201a70 <_readt.lto_priv.34>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201a70:	300c      	adds	r0, #12
  201a72:	f7ff bf9d 	b.w	2019b0 <iqReadTimeout>
  201a76:	bf00      	nop
	...

00201a80 <_read.lto_priv.28>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201a80:	300c      	adds	r0, #12
  201a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201a86:	f7ff bf93 	b.w	2019b0 <iqReadTimeout>
  201a8a:	bf00      	nop
  201a8c:	0000      	movs	r0, r0
	...

00201a90 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201a90:	b570      	push	{r4, r5, r6, lr}
  201a92:	2320      	movs	r3, #32
  201a94:	4604      	mov	r4, r0
  201a96:	460e      	mov	r6, r1
  201a98:	f383 8811 	msr	BASEPRI, r3
  201a9c:	e003      	b.n	201aa6 <iqGetTimeout+0x16>
  201a9e:	f7ff febf 	bl	201820 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201aa2:	2800      	cmp	r0, #0
  201aa4:	db19      	blt.n	201ada <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201aa6:	68a5      	ldr	r5, [r4, #8]
  201aa8:	4631      	mov	r1, r6
  201aaa:	4620      	mov	r0, r4
  201aac:	2d00      	cmp	r5, #0
  201aae:	d0f6      	beq.n	201a9e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201ab0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201ab2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201ab4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201ab6:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201ab8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201aba:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201abc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  201abe:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201ac0:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201ac2:	d301      	bcc.n	201ac8 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201ac4:	68e3      	ldr	r3, [r4, #12]
  201ac6:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201ac8:	69e3      	ldr	r3, [r4, #28]
  201aca:	b10b      	cbz	r3, 201ad0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201acc:	4620      	mov	r0, r4
  201ace:	4798      	blx	r3
  201ad0:	2300      	movs	r3, #0
  201ad2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201ad6:	4628      	mov	r0, r5
}
  201ad8:	bd70      	pop	{r4, r5, r6, pc}
  201ada:	f385 8811 	msr	BASEPRI, r5
  201ade:	bd70      	pop	{r4, r5, r6, pc}

00201ae0 <_gett.lto_priv.32>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201ae0:	300c      	adds	r0, #12
  201ae2:	f7ff bfd5 	b.w	201a90 <iqGetTimeout>
  201ae6:	bf00      	nop
	...

00201af0 <_get.lto_priv.30>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201af0:	300c      	adds	r0, #12
  201af2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201af6:	f7ff bfcb 	b.w	201a90 <iqGetTimeout>
  201afa:	bf00      	nop
  201afc:	0000      	movs	r0, r0
	...

00201b00 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201b00:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201b02:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201b04:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201b06:	4b08      	ldr	r3, [pc, #32]	; (201b28 <chSchReadyI+0x28>)
  201b08:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  201b0a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  201b0e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201b10:	689a      	ldr	r2, [r3, #8]
  201b12:	428a      	cmp	r2, r1
  201b14:	d2fb      	bcs.n	201b0e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201b16:	685a      	ldr	r2, [r3, #4]
}
  201b18:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  201b1a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  201b1c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201b1e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201b20:	605c      	str	r4, [r3, #4]
}
  201b22:	bc10      	pop	{r4}
  201b24:	4770      	bx	lr
  201b26:	bf00      	nop
  201b28:	20000844 	.word	0x20000844
  201b2c:	00000000 	.word	0x00000000

00201b30 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
  201b32:	4b23      	ldr	r3, [pc, #140]	; (201bc0 <Vector88+0x90>)
  ADC1->SR = 0;
  201b34:	2100      	movs	r1, #0
  sr = ADC1->SR;
  201b36:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  201b38:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  201b3a:	0693      	lsls	r3, r2, #26
  201b3c:	d535      	bpl.n	201baa <Vector88+0x7a>
  201b3e:	4c21      	ldr	r4, [pc, #132]	; (201bc4 <Vector88+0x94>)
  201b40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201b42:	6802      	ldr	r2, [r0, #0]
  201b44:	6853      	ldr	r3, [r2, #4]
  201b46:	2b00      	cmp	r3, #0
  201b48:	d02f      	beq.n	201baa <Vector88+0x7a>
    if (ADCD1.grpp != NULL)
  201b4a:	6921      	ldr	r1, [r4, #16]
  201b4c:	b369      	cbz	r1, 201baa <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  201b4e:	6813      	ldr	r3, [r2, #0]
  201b50:	f023 031f 	bic.w	r3, r3, #31
  201b54:	6013      	str	r3, [r2, #0]
  201b56:	6813      	ldr	r3, [r2, #0]
  201b58:	f013 0301 	ands.w	r3, r3, #1
  201b5c:	d1fb      	bne.n	201b56 <Vector88+0x26>
  201b5e:	7a07      	ldrb	r7, [r0, #8]
  201b60:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201b62:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201b64:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201b66:	6846      	ldr	r6, [r0, #4]
  201b68:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  201b6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  201b6e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  201b70:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201b72:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201b74:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201b76:	b1fd      	cbz	r5, 201bb8 <Vector88+0x88>
  201b78:	2305      	movs	r3, #5
  201b7a:	4812      	ldr	r0, [pc, #72]	; (201bc4 <Vector88+0x94>)
  201b7c:	7023      	strb	r3, [r4, #0]
  201b7e:	47a8      	blx	r5
  201b80:	7823      	ldrb	r3, [r4, #0]
  201b82:	2b05      	cmp	r3, #5
  201b84:	d015      	beq.n	201bb2 <Vector88+0x82>
  201b86:	2300      	movs	r3, #0
  201b88:	6123      	str	r3, [r4, #16]
  201b8a:	2320      	movs	r3, #32
  201b8c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  201b90:	6963      	ldr	r3, [r4, #20]
  201b92:	b13b      	cbz	r3, 201ba4 <Vector88+0x74>
    tp->u.rdymsg = msg;
  201b94:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  201b98:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  201b9a:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  201b9c:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  201b9e:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  201ba0:	f7ff ffae 	bl	201b00 <chSchReadyI>
  201ba4:	2300      	movs	r3, #0
  201ba6:	f383 8811 	msr	BASEPRI, r3
}
  201baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  201bae:	f7ff bc9f 	b.w	2014f0 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201bb2:	2302      	movs	r3, #2
  201bb4:	7023      	strb	r3, [r4, #0]
  201bb6:	e7e6      	b.n	201b86 <Vector88+0x56>
  201bb8:	2302      	movs	r3, #2
  201bba:	6125      	str	r5, [r4, #16]
  201bbc:	7023      	strb	r3, [r4, #0]
  201bbe:	e7e4      	b.n	201b8a <Vector88+0x5a>
  201bc0:	40012000 	.word	0x40012000
  201bc4:	20000800 	.word	0x20000800
	...

00201bd0 <chThdExit>:
void chThdExit(msg_t msg) {
  201bd0:	b538      	push	{r3, r4, r5, lr}
  201bd2:	2220      	movs	r2, #32
  201bd4:	4603      	mov	r3, r0
  201bd6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  201bda:	4a10      	ldr	r2, [pc, #64]	; (201c1c <chThdExit+0x4c>)
  201bdc:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  201bde:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201be2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201be4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201be6:	4285      	cmp	r5, r0
  201be8:	d006      	beq.n	201bf8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  201bea:	6803      	ldr	r3, [r0, #0]
  201bec:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  201bee:	f7ff ff87 	bl	201b00 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201bf2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201bf4:	42a8      	cmp	r0, r5
  201bf6:	d1f8      	bne.n	201bea <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201bf8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  201bfc:	b943      	cbnz	r3, 201c10 <chThdExit+0x40>
  201bfe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201c02:	079b      	lsls	r3, r3, #30
  201c04:	d104      	bne.n	201c10 <chThdExit+0x40>
    REG_REMOVE(tp);
  201c06:	6922      	ldr	r2, [r4, #16]
  201c08:	6963      	ldr	r3, [r4, #20]
  201c0a:	611a      	str	r2, [r3, #16]
  201c0c:	6922      	ldr	r2, [r4, #16]
  201c0e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201c10:	200f      	movs	r0, #15
}
  201c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201c16:	f7ff bc53 	b.w	2014c0 <chSchGoSleepS>
  201c1a:	bf00      	nop
  201c1c:	20000844 	.word	0x20000844

00201c20 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  201c20:	e7fe      	b.n	201c20 <BusFault_Handler>
  201c22:	bf00      	nop
	...

00201c30 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201c30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201c32:	4f12      	ldr	r7, [pc, #72]	; (201c7c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201c34:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201c36:	4d12      	ldr	r5, [pc, #72]	; (201c80 <__init_ram_areas+0x50>)
  201c38:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  201c3c:	4c11      	ldr	r4, [pc, #68]	; (201c84 <__init_ram_areas+0x54>)
  201c3e:	4b12      	ldr	r3, [pc, #72]	; (201c88 <__init_ram_areas+0x58>)
  201c40:	4912      	ldr	r1, [pc, #72]	; (201c8c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201c42:	429c      	cmp	r4, r3
  201c44:	d911      	bls.n	201c6a <__init_ram_areas+0x3a>
  201c46:	3904      	subs	r1, #4
  201c48:	461a      	mov	r2, r3
      *p = *tp;
  201c4a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  201c4e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201c52:	4294      	cmp	r4, r2
  201c54:	d8f9      	bhi.n	201c4a <__init_ram_areas+0x1a>
  201c56:	43da      	mvns	r2, r3
  201c58:	4414      	add	r4, r2
  201c5a:	f024 0403 	bic.w	r4, r4, #3
  201c5e:	3404      	adds	r4, #4
  201c60:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201c62:	429d      	cmp	r5, r3
  201c64:	d903      	bls.n	201c6e <__init_ram_areas+0x3e>
      *p = 0;
  201c66:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  201c6a:	429d      	cmp	r5, r3
  201c6c:	d8fb      	bhi.n	201c66 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  201c6e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201c70:	4577      	cmp	r7, lr
  201c72:	d202      	bcs.n	201c7a <__init_ram_areas+0x4a>
  201c74:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201c78:	e7e3      	b.n	201c42 <__init_ram_areas+0x12>
  201c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201c7c:	08001f44 	.word	0x08001f44
  201c80:	20020000 	.word	0x20020000
  201c84:	20020000 	.word	0x20020000
  201c88:	20020000 	.word	0x20020000
  201c8c:	08001fc4 	.word	0x08001fc4

00201c90 <__default_exit>:
void __default_exit(void) {
  201c90:	e7fe      	b.n	201c90 <__default_exit>
  201c92:	bf00      	nop
	...

00201ca0 <__late_init>:
void __late_init(void) {}
  201ca0:	4770      	bx	lr
  201ca2:	bf00      	nop
	...

00201cb0 <__core_init>:
void __core_init(void) {
  201cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201cb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201cb6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  201cba:	4c1b      	ldr	r4, [pc, #108]	; (201d28 <__core_init+0x78>)
  201cbc:	2200      	movs	r2, #0
  201cbe:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201cc2:	6963      	ldr	r3, [r4, #20]
  201cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201cc8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  201cca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201cce:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201cd2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201cd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  201cda:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  201cde:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201ce2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201ce6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  201cea:	07b7      	lsls	r7, r6, #30
  201cec:	015d      	lsls	r5, r3, #5
  201cee:	ea05 000e 	and.w	r0, r5, lr
  201cf2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201cf4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201cf6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  201cfa:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201cfc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201d00:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201d04:	1c53      	adds	r3, r2, #1
  201d06:	d1f6      	bne.n	201cf6 <__core_init+0x46>
  201d08:	3d20      	subs	r5, #32
    } while(sets--);
  201d0a:	f115 0f20 	cmn.w	r5, #32
  201d0e:	d1ee      	bne.n	201cee <__core_init+0x3e>
  201d10:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201d14:	6963      	ldr	r3, [r4, #20]
  201d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201d1a:	6163      	str	r3, [r4, #20]
  201d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201d20:	f3bf 8f6f 	isb	sy
  201d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201d26:	bf00      	nop
  201d28:	e000ed00 	.word	0xe000ed00
  201d2c:	00000000 	.word	0x00000000

00201d30 <chTMStartMeasurementX.constprop.22>:
  201d30:	4b01      	ldr	r3, [pc, #4]	; (201d38 <chTMStartMeasurementX.constprop.22+0x8>)
  201d32:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  201d34:	6083      	str	r3, [r0, #8]
  201d36:	4770      	bx	lr
  201d38:	e0001000 	.word	0xe0001000
  201d3c:	00000000 	.word	0x00000000

00201d40 <chEvtBroadcastFlagsI.constprop.17>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201d42:	4f17      	ldr	r7, [pc, #92]	; (201da0 <chEvtBroadcastFlagsI.constprop.17+0x60>)
  201d44:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201d48:	42bc      	cmp	r4, r7
  201d4a:	d021      	beq.n	201d90 <chEvtBroadcastFlagsI.constprop.17+0x50>
  201d4c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  201d4e:	2600      	movs	r6, #0
  201d50:	e002      	b.n	201d58 <chEvtBroadcastFlagsI.constprop.17+0x18>
    elp = elp->next;
  201d52:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201d54:	42bc      	cmp	r4, r7
  201d56:	d01b      	beq.n	201d90 <chEvtBroadcastFlagsI.constprop.17+0x50>
    elp->flags |= flags;
  201d58:	68e3      	ldr	r3, [r4, #12]
  201d5a:	432b      	orrs	r3, r5
  201d5c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  201d5e:	b115      	cbz	r5, 201d66 <chEvtBroadcastFlagsI.constprop.17+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  201d60:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201d62:	4213      	tst	r3, r2
  201d64:	d0f5      	beq.n	201d52 <chEvtBroadcastFlagsI.constprop.17+0x12>
      chEvtSignalI(elp->listener, elp->events);
  201d66:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  201d68:	68a3      	ldr	r3, [r4, #8]
  201d6a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201d6c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201d70:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201d72:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201d74:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201d76:	d00c      	beq.n	201d92 <chEvtBroadcastFlagsI.constprop.17+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201d78:	2a0b      	cmp	r2, #11
  201d7a:	d1ea      	bne.n	201d52 <chEvtBroadcastFlagsI.constprop.17+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  201d7c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  201d7e:	ea32 0303 	bics.w	r3, r2, r3
  201d82:	d1e6      	bne.n	201d52 <chEvtBroadcastFlagsI.constprop.17+0x12>
    tp->u.rdymsg = MSG_OK;
  201d84:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201d86:	f7ff febb 	bl	201b00 <chSchReadyI>
    elp = elp->next;
  201d8a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201d8c:	42bc      	cmp	r4, r7
  201d8e:	d1e3      	bne.n	201d58 <chEvtBroadcastFlagsI.constprop.17+0x18>
  201d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201d92:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  201d94:	4213      	tst	r3, r2
  201d96:	d0dc      	beq.n	201d52 <chEvtBroadcastFlagsI.constprop.17+0x12>
    tp->u.rdymsg = MSG_OK;
  201d98:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201d9a:	f7ff feb1 	bl	201b00 <chSchReadyI>
  201d9e:	e7f4      	b.n	201d8a <chEvtBroadcastFlagsI.constprop.17+0x4a>
  201da0:	20000a58 	.word	0x20000a58
	...

00201db0 <_pal_lld_setgroupmode.constprop.3>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  201db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  201db4:	2100      	movs	r1, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201db6:	2502      	movs	r5, #2
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  201db8:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  201dbc:	f04f 0c0f 	mov.w	ip, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201dc0:	4c1f      	ldr	r4, [pc, #124]	; (201e40 <_pal_lld_setgroupmode.constprop.3+0x90>)
      m1 = 1 << bit;
  201dc2:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  201dc6:	2703      	movs	r7, #3
  201dc8:	e00f      	b.n	201dea <_pal_lld_setgroupmode.constprop.3+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201dca:	6a26      	ldr	r6, [r4, #32]
  201dcc:	ea26 0202 	bic.w	r2, r6, r2
  201dd0:	ea42 0209 	orr.w	r2, r2, r9
  201dd4:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  201dd6:	6822      	ldr	r2, [r4, #0]
  201dd8:	4013      	ands	r3, r2
  201dda:	432b      	orrs	r3, r5
  201ddc:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  201dde:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  201de0:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  201de4:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  201de8:	d027      	beq.n	201e3a <_pal_lld_setgroupmode.constprop.3+0x8a>
      m2 = 3 << (bit * 2);
  201dea:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  201dec:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  201df0:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  201df4:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  201df8:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  201dfc:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  201e00:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  201e04:	d0eb      	beq.n	201dde <_pal_lld_setgroupmode.constprop.3+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201e06:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  201e0a:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  201e0c:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  201e10:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201e14:	ea2a 0606 	bic.w	r6, sl, r6
  201e18:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  201e1a:	68a6      	ldr	r6, [r4, #8]
  201e1c:	ea06 0603 	and.w	r6, r6, r3
  201e20:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  201e22:	68e6      	ldr	r6, [r4, #12]
  201e24:	ea06 0603 	and.w	r6, r6, r3
  201e28:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  201e2a:	d9ce      	bls.n	201dca <_pal_lld_setgroupmode.constprop.3+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  201e2e:	ea26 0202 	bic.w	r2, r6, r2
  201e32:	ea42 0209 	orr.w	r2, r2, r9
  201e36:	6262      	str	r2, [r4, #36]	; 0x24
  201e38:	e7cd      	b.n	201dd6 <_pal_lld_setgroupmode.constprop.3+0x26>
  }
}
  201e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  201e3e:	bf00      	nop
  201e40:	40021000 	.word	0x40021000
